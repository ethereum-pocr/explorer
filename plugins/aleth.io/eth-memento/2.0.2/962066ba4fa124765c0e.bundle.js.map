{"version":3,"sources":["webpack://__aleth_io__ethMemento/./app/eth-memento/module/account/component/txsGrid/TxLinkWithStatusRenderer.tsx","webpack://__aleth_io__ethMemento/./app/eth-memento/module/account/component/TxsGridFields.ts","webpack://__aleth_io__ethMemento/./app/eth-memento/module/account/component/PaginatedGrid.tsx","webpack://__aleth_io__ethMemento/./app/eth-memento/module/account/component/TxsGrid.tsx","webpack://__aleth_io__ethMemento/./app/eth-memento/module/account/pagination/CursorInfinitePaginatedView.ts","webpack://__aleth_io__ethMemento/./app/shared/data/pagination/CursorPaginatedView.ts","webpack://__aleth_io__ethMemento/./app/eth-memento/module/account/component/AccountSummary.tsx","webpack://__aleth_io__ethMemento/./app/eth-memento/module/account/component/Summary.tsx","webpack://__aleth_io__ethMemento/./app/shared/component/Grid.tsx"],"names":["IconWrapper","styled_components","div","withConfig","displayName","componentId","TxLinkWithStatusRenderer_TxLinkWithStatusRenderer","[object Object]","txLinkRendererBase","translation","this","f","external_react_","style","position","success","TooltipRegular","placement","content","get","ErrorSmallIcon","size","render","ITxsGridFieldKeys","TxsGridFields_TxsGridFields","GridFields","t","locale","ethSymbol","currentAccountAddress","super","fields","label","fieldKey","Hash","type","isSortable","selected","alwaysVisible","getFieldValue","hash","renderer","TxLinkRenderer","From","from","AccountHashRenderer","Direction","TransferDirectionRenderer","To","to","%s","Value","value","EthRenderer","Fee","gasUsed","multipliedBy","gasPrice","BlockNo","block","id","BlockLinkRenderer","BlockTime","creationTime","DateTimeRenderer","PaginatedGrid_PaginatedGrid","PaginatedGrid","props","rangeStart","loadStatus","LoadStatus","Loaded","handleNextPage","tslib_es6","NotLoaded","paginatedView","goToNextPage","e","onPageError","Error","Object","external_mobx_","items","getItems","getPageSize","scrollToGridTop","handlePrevPage","goToPreviousPage","gridContainer","scrollIntoView","behavior","inline","prevProps","tr","rangeEnd","length","rows","map","item","idx","key","data","ref","Grid","limitRows","sortingOptions","hasMorePages","CursorInfinitePagination","isLastPage","onPrevPage","onNextPage","errorText","external_mobx_react_","TxsGrid_TxsGrid","gridFields","accountAddress","gridSortingOptions","GridSortingOptions","logger","error","CursorInfinitePaginatedView_CursorInfinitePaginatedView","baseCursorPaginatedView","_hasMorePages","loadFirstPage","loadNextPage","CursorPaginatedView_CursorPaginatedView","store","initialCursor","pageSize","getCursor","storage","currentPage","loadItems","currentItems","RangeError","lastItem","newCursor","atCursor","page","fetch","GridRoot","PAGINATION_PAGE_SIZE","AccountSummary_AccountSummary","AccountSummary","renderExpander","config","isOpen","onClick","onResize","isFullWidth","Expander","open","fullWidth","renderContent","status","arrowPosition","AccordionItemContentStatus","LayoutRow","LayoutRowItem","Label","ThemeContext_","Consumer","theme","AccordionContentFrame","backgroundColor","colors","gridEvenRowBg","borderColor","gridBorder","noBorder","buildItems","accountHash","latestBlockNumber","AccordionVertical","noDataContent","NotAvailableBox","loadingText","onContentError","index","AccordionItem","limit","txLiteByAccountStore","blockNo","txIndex","shallow","__webpack_require__","d","__webpack_exports__","Summary_Summary","react__WEBPACK_IMPORTED_MODULE_1__","_a","tslib__WEBPACK_IMPORTED_MODULE_0__","_alethio_ui_lib_control_grid_Grid__WEBPACK_IMPORTED_MODULE_2__","assign","noDataText","loadMoreText"],"mappings":"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","file":"962066ba4fa124765c0e.bundle.js","sourcesContent":["import * as React from \"react\";\r\nimport { IGridFieldRenderer } from \"@alethio/ui/lib/control/grid/state/IGridFieldRenderer\";\r\nimport { ITranslation } from \"plugin-api/ITranslation\";\r\nimport { ITxLiteByAccount } from \"app/eth-memento/data/tx/byAccount/ITxLiteByAccount\";\r\nimport { TooltipRegular } from \"@alethio/ui/lib/overlay/tooltip/TooltipRegular\";\r\nimport { ErrorSmallIcon } from \"@alethio/ui/lib/icon/ErrorSmallIcon\";\r\nimport { TxLinkRenderer } from \"@alethio/explorer-ui/lib/grid/dataRenderer/tx/TxLinkRenderer\";\r\nimport styled from \"@alethio/explorer-ui/lib/styled-components\";\r\n\r\nconst IconWrapper = styled.div`\r\n    position: absolute;\r\n    left: -8px;\r\n    top: -4px;\r\n    transform: translateX(-100%);\r\n`;\r\n\r\nexport class TxLinkWithStatusRenderer implements IGridFieldRenderer<ITxLiteByAccount> {\r\n\r\n    constructor(\r\n        private txLinkRendererBase: TxLinkRenderer<ITxLiteByAccount>,\r\n        private translation: ITranslation\r\n    ) {}\r\n\r\n    render(f: ITxLiteByAccount) {\r\n        return <div style={{ position: \"relative\" }}>\r\n            { f.success === false ?\r\n            <IconWrapper>\r\n                <TooltipRegular placement=\"left\" content={this.translation.get(\"txView.content.txStatus.error\")}>\r\n                    <ErrorSmallIcon size={24} />\r\n                </TooltipRegular>\r\n            </IconWrapper>\r\n            : null }\r\n            { this.txLinkRendererBase.render(f) }\r\n        </div>;\r\n    }\r\n}\r\n","import { ITranslation } from \"plugin-api/ITranslation\";\r\nimport { GridFields } from \"@alethio/ui/lib/control/grid/state/GridFields\";\r\nimport { EthRenderer } from \"@alethio/ui/lib/data/gridRenderer/EthRenderer\";\r\nimport { AccountHashRenderer } from \"@alethio/explorer-ui/lib/grid/dataRenderer/account/AccountHashRenderer\";\r\nimport { BlockLinkRenderer } from \"@alethio/explorer-ui/lib/grid/dataRenderer/block/BlockLinkRenderer\";\r\nimport { DateTimeRenderer } from \"@alethio/ui/lib/data/gridRenderer/DateTimeRenderer\";\r\nimport { TransferDirectionRenderer } from \"@alethio/explorer-ui/lib/grid/dataRenderer/tx/TransferDirectionRenderer\";\r\nimport { ITxLiteByAccount } from \"app/eth-memento/data/tx/byAccount/ITxLiteByAccount\";\r\nimport { TxLinkRenderer } from \"@alethio/explorer-ui/lib/grid/dataRenderer/tx/TxLinkRenderer\";\r\nimport { TxLinkWithStatusRenderer } from \"app/eth-memento/module/account/component/txsGrid/TxLinkWithStatusRenderer\";\r\n\r\nenum ITxsGridFieldKeys {\r\n    Hash = \"hash\",\r\n    From = \"from\",\r\n    Direction = \"direction\",\r\n    To = \"to\",\r\n    Value = \"value\",\r\n    Fee = \"fee\",\r\n    BlockNo = \"blockNumber\",\r\n    BlockTime = \"blockTime\"\r\n}\r\n\r\nexport class TxsGridFields extends GridFields<ITxLiteByAccount> {\r\n    constructor(t: ITranslation, locale: string, ethSymbol: string, currentAccountAddress: string) {\r\n        super();\r\n        this.fields = [{\r\n            label: t.get(\"general.hash\"),\r\n            fieldKey: ITxsGridFieldKeys.Hash,\r\n            type: \"string\",\r\n            isSortable: false,\r\n            selected: true,\r\n            alwaysVisible: true,\r\n            getFieldValue: f => f.hash,\r\n            renderer: new TxLinkWithStatusRenderer(\r\n                new TxLinkRenderer(f => f.hash),\r\n                t\r\n            )\r\n        }, {\r\n            label: t.get(\"general.from\"),\r\n            fieldKey: ITxsGridFieldKeys.From,\r\n            type: \"string\",\r\n            isSortable: false,\r\n            alwaysVisible: true,\r\n            selected: true,\r\n            getFieldValue: f => f.from,\r\n            renderer: new AccountHashRenderer(\r\n                currentAccountAddress,\r\n                f => f.from\r\n            )\r\n        }, {\r\n            label: \"\",\r\n            fieldKey: ITxsGridFieldKeys.Direction,\r\n            type: \"string\",\r\n            isSortable: false,\r\n            alwaysVisible: true,\r\n            selected: true,\r\n            getFieldValue: f => \"\",\r\n            renderer: new TransferDirectionRenderer(currentAccountAddress, t)\r\n        }, {\r\n            label: t.get(\"general.to\"),\r\n            fieldKey: ITxsGridFieldKeys.To,\r\n            type: \"string\",\r\n            isSortable: false,\r\n            alwaysVisible: true,\r\n            selected: true,\r\n            getFieldValue: f => f.to,\r\n            renderer: new AccountHashRenderer(\r\n                currentAccountAddress,\r\n                f => f.to\r\n            )\r\n        }, {\r\n            label: t.get(\"general.valueEth\", { \"%s\": ethSymbol }),\r\n            fieldKey: ITxsGridFieldKeys.Value,\r\n            type: \"number\",\r\n            isSortable: false,\r\n            selected: true,\r\n            getFieldValue: f => f.value,\r\n            renderer: new EthRenderer(\r\n                locale,\r\n                f => f.value\r\n            )\r\n        }, {\r\n            label: t.get(\"general.feeEth\", { \"%s\": ethSymbol }),\r\n            fieldKey: ITxsGridFieldKeys.Fee,\r\n            type: \"number\",\r\n            isSortable: false,\r\n            selected: true,\r\n            getFieldValue: f => f.gasUsed.multipliedBy(f.gasPrice),\r\n            renderer: new EthRenderer(\r\n                locale,\r\n                f => f.gasUsed.multipliedBy(f.gasPrice)\r\n            )\r\n        }, {\r\n            label: t.get(\"accountView.content.accountSummary.transactions.blockNumber.label\"),\r\n            fieldKey: ITxsGridFieldKeys.BlockNo,\r\n            type: \"number\",\r\n            isSortable: false,\r\n            selected: false,\r\n            getFieldValue: f => f.block.id,\r\n            renderer: new BlockLinkRenderer(\r\n                locale,\r\n                f => f.block.id\r\n            )\r\n        },\r\n        {\r\n            label: t.get(\"accountView.content.accountSummary.transactions.blockTime.label\"),\r\n            fieldKey: ITxsGridFieldKeys.BlockTime,\r\n            type: \"string\",\r\n            isSortable: false,\r\n            selected: true,\r\n            getFieldValue: f => f.block.creationTime,\r\n            renderer: new DateTimeRenderer(\r\n                locale,\r\n                f => f.block.creationTime\r\n            )\r\n        }];\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { ITranslation } from \"plugin-api/ITranslation\";\r\nimport { observer } from \"mobx-react\";\r\nimport { observable, runInAction } from \"mobx\";\r\nimport { CursorInfinitePagination } from \"@alethio/ui/lib/control/pagination/CursorInfinitePagination\";\r\nimport { LoadStatus } from \"@alethio/ui/lib/control/pagination/LoadStatus\";\r\nimport { GridFields } from \"@alethio/ui/lib/control/grid/state/GridFields\";\r\nimport { IGridSortingOptions } from \"@alethio/ui/lib/control/grid/state/IGridSortingOptions\";\r\nimport { Grid } from \"app/shared/component/Grid\";\r\nimport { ICursor } from \"app/eth-memento/data/tx/byAccount/ICursor\";\r\nimport { CursorInfinitePaginatedView } from \"app/eth-memento/module/account/pagination/CursorInfinitePaginatedView\";\r\n\r\nexport interface IPaginatedGridProps<TItem> {\r\n    fields: GridFields<TItem>;\r\n    sortingOptions: IGridSortingOptions;\r\n    paginatedView: CursorInfinitePaginatedView<TItem, ICursor | undefined>;\r\n    translation: ITranslation;\r\n    locale: string;\r\n    onPageError(e: any): void;\r\n}\r\n\r\n@observer\r\nexport class PaginatedGrid<TItem> extends React.Component<IPaginatedGridProps<TItem>> {\r\n    private gridContainer: HTMLElement;\r\n    @observable\r\n    private rangeStart = 1;\r\n    @observable\r\n    private loadStatus = LoadStatus.Loaded;\r\n    private items: TItem[];\r\n\r\n    constructor(props: IPaginatedGridProps<TItem>) {\r\n        super(props);\r\n\r\n        this.items = this.props.paginatedView.getItems();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: IPaginatedGridProps<TItem>) {\r\n        if (this.props.paginatedView !== prevProps.paginatedView) {\r\n            this.items = this.props.paginatedView.getItems();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { translation: tr, locale } = this.props;\r\n\r\n        let rangeEnd = this.rangeStart + this.items.length - 1;\r\n\r\n        let rows = this.items.map((item, idx) => ({\r\n            key: idx,\r\n            data: item\r\n        }));\r\n\r\n        return <>\r\n            <div ref={ref => this.gridContainer = ref!}>\r\n                <Grid<TItem>\r\n                    rows={rows}\r\n                    limitRows={false}\r\n                    fields={this.props.fields}\r\n                    sortingOptions={this.props.sortingOptions}\r\n                    translation={tr}\r\n                />\r\n            </div>\r\n            { this.hasMorePages() || this.rangeStart > 1 ?\r\n            <CursorInfinitePagination\r\n                rangeStart={this.rangeStart}\r\n                rangeEnd={rangeEnd}\r\n                isLastPage={!this.hasMorePages()}\r\n                loadStatus={this.loadStatus}\r\n                onPrevPage={this.handlePrevPage}\r\n                onNextPage={this.handleNextPage}\r\n                errorText={tr.get(\"general.error\")}\r\n                locale={locale}\r\n            />\r\n            : null }\r\n        </>;\r\n    }\r\n\r\n    private handleNextPage = async () => {\r\n        this.loadStatus = LoadStatus.NotLoaded;\r\n        try {\r\n            await this.props.paginatedView.goToNextPage();\r\n        } catch (e) {\r\n            this.props.onPageError(e);\r\n            this.loadStatus = LoadStatus.Error;\r\n            return;\r\n        }\r\n        runInAction(() => {\r\n            this.items = this.props.paginatedView.getItems();\r\n            this.loadStatus = LoadStatus.Loaded;\r\n            this.rangeStart += this.props.paginatedView.getPageSize();\r\n        });\r\n        this.scrollToGridTop();\r\n    }\r\n\r\n    private handlePrevPage = async () => {\r\n        this.loadStatus = LoadStatus.NotLoaded;\r\n        try {\r\n            await this.props.paginatedView.goToPreviousPage();\r\n        } catch (e) {\r\n            this.props.onPageError(e);\r\n            this.loadStatus = LoadStatus.Error;\r\n            return;\r\n        }\r\n        runInAction(() => {\r\n            this.items = this.props.paginatedView.getItems();\r\n            this.loadStatus = LoadStatus.Loaded;\r\n            this.rangeStart -= this.props.paginatedView.getPageSize();\r\n\r\n        });\r\n        this.scrollToGridTop();\r\n    }\r\n\r\n    private scrollToGridTop = () => {\r\n        this.gridContainer.scrollIntoView({\r\n            behavior: \"smooth\",\r\n            block: \"start\",\r\n            inline: \"nearest\"\r\n        });\r\n    }\r\n\r\n    private hasMorePages() {\r\n        return this.props.paginatedView.hasMorePages();\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { ITranslation } from \"plugin-api/ITranslation\";\r\nimport { GridSortingOptions } from \"@alethio/ui/lib/control/grid/state/GridSortingOptions\";\r\nimport { GridFields } from \"@alethio/ui/lib/control/grid/state/GridFields\";\r\nimport { ITxLiteByAccount } from \"app/eth-memento/data/tx/byAccount/ITxLiteByAccount\";\r\nimport { TxsGridFields } from \"app/eth-memento/module/account/component/TxsGridFields\";\r\nimport { ICursor } from \"app/eth-memento/data/tx/byAccount/ICursor\";\r\nimport { CursorInfinitePaginatedView } from \"../pagination/CursorInfinitePaginatedView\";\r\nimport { PaginatedGrid } from \"./PaginatedGrid\";\r\nimport { ILogger } from \"plugin-api/ILogger\";\r\n\r\nexport interface ITxsGridProps {\r\n    paginatedView: CursorInfinitePaginatedView<ITxLiteByAccount, ICursor | undefined>;\r\n    accountAddress: string;\r\n    translation: ITranslation;\r\n    locale: string;\r\n    ethSymbol: string;\r\n    logger: ILogger;\r\n}\r\n\r\nexport class TxsGrid extends React.Component<ITxsGridProps> {\r\n    private gridFields: GridFields<ITxLiteByAccount>;\r\n    private gridSortingOptions: GridSortingOptions;\r\n    constructor(props: ITxsGridProps) {\r\n        super(props);\r\n        this.gridFields = new TxsGridFields(\r\n            props.translation, props.locale, props.ethSymbol, props.accountAddress);\r\n        this.gridSortingOptions = new GridSortingOptions();\r\n    }\r\n    render() {\r\n        return (\r\n            <PaginatedGrid<ITxLiteByAccount>\r\n                paginatedView={this.props.paginatedView}\r\n                fields={this.gridFields}\r\n                sortingOptions={this.gridSortingOptions}\r\n                translation={this.props.translation}\r\n                locale={this.props.locale}\r\n                onPageError={e => this.props.logger.error(e)}\r\n            />\r\n        );\r\n    }\r\n}\r\n","import { IPaginatedView } from \"app/shared/data/pagination/IPaginatedView\";\r\nimport { CursorPaginatedView } from \"app/shared/data/pagination/CursorPaginatedView\";\r\n\r\n/**\r\n * Loads data using a cursor-based pagination and keeps all records in memory to be able to navigate backwards without\r\n * having another server call with a \"reverse\" cursor.\r\n */\r\nexport class CursorInfinitePaginatedView<TItem, TCursor> implements IPaginatedView<TItem> {\r\n    private _hasMorePages = true;\r\n\r\n    constructor(\r\n        private baseCursorPaginatedView: CursorPaginatedView<TItem, TCursor>\r\n    ) {\r\n    }\r\n\r\n    async loadFirstPage() {\r\n        await this.baseCursorPaginatedView.loadFirstPage();\r\n        try {\r\n            await this.baseCursorPaginatedView.loadNextPage();\r\n        } catch (e) {\r\n            this._hasMorePages = false;\r\n        }\r\n    }\r\n\r\n    async goToNextPage() {\r\n        await this.baseCursorPaginatedView.goToNextPage();\r\n        try {\r\n            await this.baseCursorPaginatedView.loadNextPage();\r\n        } catch (e) {\r\n            this._hasMorePages = false;\r\n        }\r\n    }\r\n\r\n    async goToPreviousPage() {\r\n        await this.baseCursorPaginatedView.goToPreviousPage();\r\n        this._hasMorePages = true;\r\n    }\r\n\r\n    getItems() {\r\n        return this.baseCursorPaginatedView.getItems();\r\n    }\r\n\r\n    getPageSize() {\r\n        return this.baseCursorPaginatedView.getPageSize();\r\n    }\r\n\r\n    hasMorePages() {\r\n        return this._hasMorePages;\r\n    }\r\n}\r\n","import { IPaginatedView } from \"./IPaginatedView\";\r\n\r\ninterface IStore<TItem, TCursor> {\r\n    fetch(cursor: TCursor, limit: number): Promise<TItem[]>;\r\n}\r\n\r\n/**\r\n * Loads data using a cursor-based pagination and keeps all records in memory to be able to navigate backwards without\r\n * having another server call with a \"reverse\" cursor.\r\n */\r\nexport class CursorPaginatedView<TItem, TCursor> implements IPaginatedView<TItem> {\r\n    /**\r\n     * Items indexed by page number.\r\n     *\r\n     * We use page numbers so that we can navigate backwards without having a \"previous\" cursor.\r\n     */\r\n    private storage: TItem[][] = [];\r\n    private currentPage: number | undefined;\r\n\r\n    constructor(\r\n        private store: IStore<TItem, TCursor>,\r\n        private initialCursor: TCursor,\r\n        private pageSize: number,\r\n        private getCursor: (item: TItem) => TCursor\r\n    ) {\r\n    }\r\n\r\n    async loadFirstPage() {\r\n        this.currentPage = 0;\r\n        await this.loadItems(this.initialCursor, this.currentPage);\r\n    }\r\n\r\n    async goToNextPage() {\r\n        if (this.currentPage === void 0) {\r\n            throw new Error(`Not initialized`);\r\n        }\r\n        await this.loadNextPage();\r\n        this.currentPage++;\r\n    }\r\n\r\n    async loadNextPage() {\r\n        if (this.currentPage === void 0) {\r\n            throw new Error(`Not initialized`);\r\n        }\r\n        let currentItems = this.getItems();\r\n        if (!currentItems) {\r\n            throw new Error(`Page ${this.currentPage + 1} can't be loaded because the previous page is not loaded`);\r\n        }\r\n        // We have no \"next URL\" in server response, so we only know it's the last page when there are fewer items\r\n        if (currentItems.length < this.pageSize) {\r\n            throw new RangeError(`We are already on the last page`);\r\n        }\r\n        let lastItem = currentItems[currentItems.length - 1];\r\n        let newCursor = this.getCursor(lastItem);\r\n        await this.loadItems(newCursor, this.currentPage + 1);\r\n    }\r\n\r\n    async goToPreviousPage() {\r\n        if (this.currentPage === void 0) {\r\n            throw new Error(`Not initialized`);\r\n        }\r\n        if (this.currentPage === 0) {\r\n            throw new RangeError(`We are already on the first page`);\r\n        }\r\n        this.currentPage--;\r\n    }\r\n\r\n    private async loadItems(atCursor: TCursor, page: number) {\r\n        let items = this.storage[page];\r\n        if (!items) {\r\n            items = await this.store.fetch(atCursor, this.pageSize);\r\n            this.storage[page] = items;\r\n        }\r\n    }\r\n\r\n    getItems() {\r\n        if (this.currentPage === void 0) {\r\n            throw new Error(`Not initialized`);\r\n        }\r\n        return this.storage[this.currentPage];\r\n    }\r\n\r\n    getPageSize() {\r\n        return this.pageSize;\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { ITranslation } from \"plugin-api/ITranslation\";\r\nimport { NotAvailableBox } from \"app/shared/component/NotAvailableBox\";\r\nimport { IAccordionItemConfig } from \"@alethio/ui/lib/control/accordion/IAccordionItemConfig\";\r\nimport { Expander } from \"@alethio/ui/lib/control/expander/Expander\";\r\nimport { observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport { AccordionVertical, IAccordionVerticalProps } from \"@alethio/ui/lib/control/accordion/AccordionVertical\";\r\nimport { AccordionItem } from \"@alethio/ui/lib/control/accordion/AccordionItem\";\r\nimport { AccordionContentFrame } from \"@alethio/ui/lib/control/accordion/AccordionContentFrame\";\r\nimport { ThemeContext } from \"plugin-api/ThemeContext\";\r\nimport { AccordionItemContentStatus } from \"@alethio/ui/lib/control/accordion/AccordionItemContentStatus\";\r\nimport { LayoutRow } from \"@alethio/ui/lib/layout/content/LayoutRow\";\r\nimport { LayoutRowItem } from \"@alethio/ui/lib/layout/content/LayoutRowItem\";\r\nimport { Label } from \"@alethio/ui/lib/data/Label\";\r\nimport { TxLiteByAccountStore } from \"app/eth-memento/data/tx/byAccount/TxLiteByAccountStore\";\r\nimport { TxsGrid } from \"./TxsGrid\";\r\nimport { ITxLiteByAccount } from \"app/eth-memento/data/tx/byAccount/ITxLiteByAccount\";\r\nimport { ICursor } from \"app/eth-memento/data/tx/byAccount/ICursor\";\r\nimport { CursorInfinitePaginatedView } from \"../pagination/CursorInfinitePaginatedView\";\r\nimport { ILogger } from \"plugin-api/ILogger\";\r\nimport styled from \"@alethio/explorer-ui/lib/styled-components\";\r\nimport { CursorPaginatedView } from \"app/shared/data/pagination/CursorPaginatedView\";\r\nimport { ITheme } from \"@alethio/explorer-ui/lib/ITheme\";\r\n\r\nconst GridRoot = styled.div`\r\n    max-width: 100vw;\r\n`;\r\n\r\nconst PAGINATION_PAGE_SIZE = 50;\r\n\r\ninterface IAccountSummaryItemConfig extends IAccordionItemConfig {\r\n    label: string;\r\n}\r\n\r\nexport interface IAccountSummaryProps {\r\n    accountHash: string;\r\n    translation: ITranslation;\r\n    locale: string;\r\n    logger: ILogger;\r\n    ethSymbol: string;\r\n    latestBlockNumber: number;\r\n    txLiteByAccountStore: TxLiteByAccountStore;\r\n}\r\n\r\n@observer\r\nexport class AccountSummary extends React.Component<IAccountSummaryProps> {\r\n    @observable.shallow\r\n    private items: React.ReactNode;\r\n\r\n    constructor(props: IAccountSummaryProps) {\r\n        super(props);\r\n\r\n        this.items = this.buildItems(this.props.accountHash, this.props.latestBlockNumber);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: IAccountSummaryProps) {\r\n        if (this.props.accountHash !== prevProps.accountHash ||\r\n            this.props.translation !== prevProps.translation\r\n        ) {\r\n            this.items = this.buildItems(this.props.accountHash, this.props.latestBlockNumber);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { translation: tr } = this.props;\r\n\r\n        return <AccordionVertical\r\n            label={tr.get(\"accountView.content.accountSummary.label\")}\r\n            noDataContent={<NotAvailableBox translation={tr} />}\r\n            renderExpander={this.renderExpander}\r\n            renderContent={this.renderContent}\r\n            loadingText={`${tr.get(\"general.loading\")}...`}\r\n            errorText={tr.get(\"general.error\")}\r\n            onContentError={(e, item) => {\r\n                this.props.logger.error(`Couldn't load content for account summary tab #${item.index}`, e);\r\n            }}\r\n        >\r\n            {this.items}\r\n        </AccordionVertical>;\r\n    }\r\n\r\n    private renderExpander: IAccordionVerticalProps<IAccountSummaryItemConfig>[\"renderExpander\"] =\r\n    ({config, isOpen, onClick, onResize, isFullWidth}) => {\r\n        return <Expander\r\n            label={config.label}\r\n            open={isOpen}\r\n            onClick={onClick}\r\n            onResize={onResize}\r\n            fullWidth={isFullWidth}\r\n            locale={this.props.locale}\r\n        />;\r\n    }\r\n\r\n    private renderContent: IAccordionVerticalProps<IAccountSummaryItemConfig>[\"renderContent\"] =\r\n    ({ content, status, arrowPosition }) => {\r\n        if (status !== AccordionItemContentStatus.Loaded) {\r\n            return <LayoutRow>\r\n                <LayoutRowItem>\r\n                    <Label></Label>\r\n                    {content}\r\n                </LayoutRowItem>\r\n            </LayoutRow>;\r\n        }\r\n\r\n        return (\r\n            <ThemeContext.Consumer>\r\n                {(theme: ITheme) =>\r\n                    <AccordionContentFrame\r\n                        arrowPosition={arrowPosition}\r\n                        backgroundColor={theme.colors.gridEvenRowBg}\r\n                        borderColor={theme.colors.gridBorder}\r\n                        noBorder\r\n                    >{content}</AccordionContentFrame>\r\n                }\r\n            </ThemeContext.Consumer>\r\n        );\r\n    }\r\n\r\n    private buildItems(accountHash: string, latestBlockNumber: number) {\r\n        let tr = this.props.translation;\r\n\r\n        let items = <>\r\n            <AccordionItem<IAccountSummaryItemConfig>\r\n                label={tr.get(\"accountView.content.accountSummary.minedTransactions.label\")}\r\n                content={async () => {\r\n                    let paginatedView = new CursorInfinitePaginatedView<\r\n                        ITxLiteByAccount, ICursor\r\n                    >(\r\n                        new CursorPaginatedView(\r\n                            {\r\n                                fetch: (atCursor, limit) => this.props.txLiteByAccountStore.fetch(\r\n                                    accountHash, atCursor, limit\r\n                                )\r\n                            },\r\n                            {\r\n                                blockNo: latestBlockNumber,\r\n                                txIndex: 0\r\n                            },\r\n                            PAGINATION_PAGE_SIZE,\r\n                            (item) => ({\r\n                                blockNo: item.block.id,\r\n                                txIndex: item.txIndex\r\n                            })\r\n                        )\r\n                    );\r\n                    // Pre-fetch\r\n                    await paginatedView.loadFirstPage();\r\n                    return <GridRoot>\r\n                        <TxsGrid\r\n                            paginatedView={paginatedView}\r\n                            accountAddress={accountHash}\r\n                            translation={tr}\r\n                            locale={this.props.locale}\r\n                            ethSymbol={this.props.ethSymbol}\r\n                            logger={this.props.logger}\r\n                        />\r\n                    </GridRoot>;\r\n                }}\r\n            />\r\n        </>;\r\n\r\n        return items;\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { ITranslation } from \"plugin-api/ITranslation\";\r\nimport { AccountSummary } from \"./AccountSummary\";\r\nimport { ILogger } from \"plugin-api/ILogger\";\r\nimport { TxLiteByAccountStore } from \"app/eth-memento/data/tx/byAccount/TxLiteByAccountStore\";\r\n\r\nexport interface ISummaryProps {\r\n    accountHash: string;\r\n    translation: ITranslation;\r\n    locale: string;\r\n    ethSymbol: string;\r\n    logger: ILogger;\r\n    latestBlockNumber: number;\r\n    txLiteByAccountStore: TxLiteByAccountStore;\r\n}\r\n\r\nexport class Summary extends React.Component<ISummaryProps> {\r\n    render() {\r\n        let {\r\n            translation: tr, locale, txLiteByAccountStore, accountHash,\r\n            ethSymbol\r\n        } = this.props;\r\n\r\n        return (\r\n            <AccountSummary\r\n                accountHash={accountHash}\r\n                translation={tr}\r\n                locale={locale}\r\n                ethSymbol={ethSymbol}\r\n                logger={this.props.logger}\r\n                latestBlockNumber={this.props.latestBlockNumber}\r\n                txLiteByAccountStore={txLiteByAccountStore}\r\n            />\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { Grid as GridBase, IGridProps as IGridBaseProps } from \"@alethio/ui/lib/control/grid/Grid\";\n\nexport interface IGridProps<TData> {\n    rows: IGridBaseProps<TData>[\"rows\"];\n    limitRows?: boolean;\n    maxVisibleRows?: number;\n    fields: IGridBaseProps<TData>[\"fields\"];\n    sortingOptions: IGridBaseProps<TData>[\"sortingOptions\"];\n    translation: ITranslation;\n}\n\nexport class Grid<TData> extends React.Component<IGridProps<TData>> {\n    render() {\n        let { translation: tr, ...props} = this.props;\n\n        return <GridBase<TData>\n            {...props}\n            noDataText={tr.get(\"general.grid.footer.norowsavailable.label\")}\n            loadMoreText={tr.get(\"general.grid.footer.loadMore.label\")}\n        />;\n    }\n}\n"],"sourceRoot":""}