{"version":3,"sources":["webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/layout/content/box/TypedValueBox.tsx","webpack://__aleth_io__ethMemento/./app/shared/module/tx/txSummary/component/DecodedLogEventView.tsx","webpack://__aleth_io__ethMemento/./app/shared/module/tx/txSummary/component/LogEvents.tsx","webpack://__aleth_io__ethMemento/./app/eth-memento/module/tx/txSummary/component/TxSummary.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/control/accordion/AccordionVertical.tsx"],"names":["StyledBox","Object","lib_styled_components","Box","withConfig","displayName","componentId","ValueSpan","span","TypeSpan","theme","colors","typedValueBoxTypeText","SizingWrapper","props","withinForm","TypedValueBox_TypedValueBox","external_react_","[object Object]","value","type","this","wrapperDivStyle","minWidth","background","typedValueBoxBg","text","typedValueBoxText","border","typedValueBoxBorder","metrics","height","textPaddingTop","textPaddingX","fontSize","iconSize","lineHeight","fontWeight","letterSpacing","defaultProps","DataRoot","styled_components","div","DataLineWrapper","DecodedLogEventView_DecodedLogEventView","external_react_default","a","PureComponent","data","lines","event","push","name","identationIdx","identationLinePath","topic0","inputs","getLogEventsLines","identation","forEach","arg","idx","toString","length","IdentationLineWrapper","LastLeaf","Leaf","components","nextIdentation","Empty","Vertical","getTxInputData","createElement","map","l","key","reverse","reduce","acc","identLine","idxLine","icon","PayloadDataLine","payload","LogEventsRoot","LogEventsSection","logEventsBorder","RawLogEventsSection","EVENT_LOGS_LINE_BASE_HEIGHT","LogEvents_LogEvents","Component","translation","tr","eLog","eLogId","eventDecoded","renderDecodedEvent","renderRawEvent","hasLogTopics","topic","LayoutRow","LayoutRowItem","baseHeight","Label","get","logData","TxSummary_TxSummary","TxSummary","super","handleResize","items","buildItems","tx","renderExpander","config","isOpen","onClick","isFullWidth","Expander","label","open","fullWidth","locale","renderHeader","header","renderContent","content","status","arrowPosition","AccordionItemContentStatus","Loaded","ThemeContext_","Consumer","AccordionContentFrame","backgroundColor","gridEvenRowBg","borderColor","gridBorder","noBorder","window","addEventListener","prevProps","removeEventListener","LayoutSection","useWrapper","AccordionVertical","noDataContent","NotAvailableBox","loadingText","errorText","onContentError","e","item","logger","error","index","isMementoTxDetails","AccordionItem","logEventsCount","tslib_es6","logEvents","logEventsStore","fetchByTx","hash","logEventsSectionBg","external_mobx_","shallow","external_mobx_react_","react__WEBPACK_IMPORTED_MODULE_1__","expanderEls","Map","handleContainerRef","ref","containerOffsetLeft","offsetLeft","onExpanderResize","fixedExpanderWidth","destroyWidthWatch","setupWidthWatch","accordionState","_internal_AccordionState__WEBPACK_IMPORTED_MODULE_7__","refreshDisposer","mobx__WEBPACK_IMPORTED_MODULE_2__","getItems","i","clear","delay","equals","itemConfigs","prevItemConfigs","every","widthWatchDisposer","size","computeWidth","maxWidth","values","max","el","Math","offsetWidth","style","position","top","left","children","renderItems","_layout_content_LayoutRow__WEBPACK_IMPORTED_MODULE_4__","_layout_content_LayoutRowItem__WEBPACK_IMPORTED_MODULE_5__","_data_Label__WEBPACK_IMPORTED_MODULE_6__","activeItem","getActiveItem","responsive","ignoreFirstLabel","set","width","onResize","_fx_Height__WEBPACK_IMPORTED_MODULE_9__","duration","contentAnimSeconds","_internal_AccordionContentWrapper__WEBPACK_IMPORTED_MODULE_8__","contentStatus","getContentArrowPosition","loadingDelay","expanderEl","next","childContextTypes","mobx_react__WEBPACK_IMPORTED_MODULE_3__","objectOrObservableObject","tslib__WEBPACK_IMPORTED_MODULE_0__"],"mappings":"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","file":"32aa11334489192e09a9.bundle.js","sourcesContent":["import * as React from \"react\";\r\nimport { Box } from \"./Box\";\r\nimport styled, { css } from \"../../../styled-components\";\r\n\r\ninterface ITypedValueBox {\r\n    value?: string;\r\n    type?: string;\r\n    /** Render similarly to a form text input */\r\n    withinForm?: boolean;\r\n}\r\n\r\nconst StyledBox = styled(Box)`\r\n    font-family: \"Roboto Mono\", monospace;\r\n`;\r\nconst ValueSpan = styled.span`\r\n    margin: 0 8px;\r\n`;\r\nconst TypeSpan = styled.span`\r\n    color: ${({theme}) => theme.colors.typedValueBoxTypeText };\r\n    margin: 0 8px;\r\n`;\r\ninterface ISizingWrapperProps {\r\n    withinForm?: boolean;\r\n}\r\nconst SizingWrapper = styled<ISizingWrapperProps, \"div\">(\"div\")`\r\n    ${props => props.withinForm ? css`\r\n        min-width: 484px;\r\n    ` : ``}\r\n`;\r\n\r\n/**\r\n * A ValueBox adaptation suitable for displaying statically typed data. Shows the value as well as its type.\r\n */\r\nexport class TypedValueBox extends React.Component<ITypedValueBox> {\r\n    static defaultProps = {\r\n        withinForm: false\r\n    };\r\n\r\n    render() {\r\n        const { value, type, withinForm } = this.props;\r\n        let wrapperDivStyle: React.CSSProperties = {};\r\n        if (withinForm) {\r\n            wrapperDivStyle.minWidth = 500;\r\n        }\r\n        return (\r\n            <StyledBox colors={(theme) => ({\r\n                background: theme.colors.typedValueBoxBg,\r\n                text: theme.colors.typedValueBoxText,\r\n                border: withinForm ? theme.colors.typedValueBoxBorder : void 0\r\n            })} metrics={{\r\n                height: 36,\r\n                textPaddingTop: 0,\r\n                textPaddingX: 8,\r\n                fontSize: 14,\r\n                iconSize: 24,\r\n                lineHeight: 34,\r\n                fontWeight: 500,\r\n                letterSpacing: \"normal\"\r\n            }}>\r\n                <SizingWrapper withinForm={withinForm}>\r\n                    { value ? <ValueSpan>{value}</ValueSpan> : null }\r\n                    { type ? <TypeSpan>{type}</TypeSpan> : null }\r\n                </SizingWrapper>\r\n            </StyledBox>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport styled from \"@alethio/explorer-ui/lib/styled-components\";\r\nimport { IDecodedLogEvent, ILogEventInput } from \"app/shared/data/logEvents/ILogEvent\";\r\nimport {\r\n    IdentationGuideLineIcon, IdentationLineWrapper\r\n} from \"app/shared/component/decodedPayload/IdentationLineWrapper\";\r\nimport { PayloadDataLine } from \"app/shared/component/decodedPayload/PayloadDataLine\";\r\n\r\n/*\r\nTODO: Refactor. This entire file is duplicate of DecodedPayloadView.\r\nInstead of two almost identical files we need a proper TreeView component.\r\n*/\r\ninterface IDecodedLogEventViewProps {\r\n    data: IDecodedLogEvent;\r\n}\r\nexport interface IDataLine {\r\n    name: string;\r\n    type?: string;\r\n    value?: string;\r\n    identationIdx: number;\r\n    identationLinePath: IdentationGuideLineIcon[];\r\n}\r\nconst DataRoot = styled.div`\r\n    padding: 24px 40px;\r\n`;\r\nconst DataLineWrapper = styled.div`\r\n    font-family: \"Roboto Mono\", monospace;\r\n    font-size: 14px;\r\n    line-height: 16px;\r\n    font-weight: 500;\r\n`;\r\n\r\nexport class DecodedLogEventView extends React.PureComponent<IDecodedLogEventViewProps> {\r\n\r\n    private getTxInputData(data: IDecodedLogEvent) {\r\n        const lines: IDataLine[] = [];\r\n\r\n        if (data.event) {\r\n            lines.push({\r\n                name: \"event\",\r\n                value: data.event,\r\n                identationIdx: 0,\r\n                identationLinePath: []\r\n            });\r\n        }\r\n        if (data.topic0) {\r\n            lines.push({\r\n                name: \"topic0\",\r\n                value: data.topic0,\r\n                identationIdx: 0,\r\n                identationLinePath: []\r\n            });\r\n        }\r\n        if (data.inputs) {\r\n            lines.push({\r\n                name: \"inputs\",\r\n                identationIdx: 0,\r\n                identationLinePath: []\r\n            });\r\n            this.getLogEventsLines(data.inputs, lines, 1, []);\r\n        }\r\n        return lines;\r\n    }\r\n\r\n    private getLogEventsLines(\r\n        inputs: ILogEventInput[], lines: IDataLine[], identationIdx: number, identation: number[]\r\n    ) {\r\n        inputs.forEach((arg, idx) => {\r\n            if (arg.value) {\r\n                lines.push({\r\n                    name: arg.name ? arg.name : idx.toString(),\r\n                    type: arg.type,\r\n                    value: arg.value,\r\n                    identationIdx,\r\n                    identationLinePath: [\r\n                        ...identation,\r\n                        idx === inputs.length - 1 ? IdentationGuideLineIcon.LastLeaf : IdentationGuideLineIcon.Leaf\r\n                    ]\r\n                });\r\n            } else if (arg.components) {\r\n                lines.push({\r\n                    name: arg.name ? arg.name : idx.toString(),\r\n                    type: arg.type,\r\n                    identationIdx,\r\n                    identationLinePath: [\r\n                        ...identation,\r\n                        idx === inputs.length - 1 ? IdentationGuideLineIcon.LastLeaf : IdentationGuideLineIcon.Leaf\r\n                    ]\r\n                });\r\n                let nextIdentation = [\r\n                    ...identation,\r\n                    idx === inputs.length - 1 ? IdentationGuideLineIcon.Empty : IdentationGuideLineIcon.Vertical\r\n                ];\r\n                this.getLogEventsLines(\r\n                    arg.components, lines, identationIdx + 1, nextIdentation\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let data = this.getTxInputData(this.props.data);\r\n        return (\r\n            <DataRoot>\r\n                { data.map((l, idx) =>\r\n                    <DataLineWrapper key={idx}>\r\n                        { [...l.identationLinePath].reverse().reduce((acc, identLine, idxLine) => {\r\n                            return (\r\n                                <IdentationLineWrapper key={`${idx}_${idxLine}`} icon={identLine}>\r\n                                    { acc }\r\n                                </IdentationLineWrapper>\r\n                            );\r\n                        }, <PayloadDataLine payload={l} />) }\r\n                    </DataLineWrapper>\r\n                )}\r\n            </DataRoot>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport styled from \"@alethio/explorer-ui/lib/styled-components\";\r\nimport { LayoutRow } from \"@alethio/ui/lib/layout/content/LayoutRow\";\r\nimport { LayoutRowItem } from \"@alethio/ui/lib/layout/content/LayoutRowItem\";\r\nimport { Label } from \"@alethio/ui/lib/data/Label\";\r\nimport { ITranslation } from \"plugin-api/ITranslation\";\r\nimport { TypedValueBox } from \"@alethio/ui/lib/layout/content/box/TypedValueBox\";\r\nimport { ILogEvent } from \"app/shared/data/logEvents/ILogEvent\";\r\nimport { DecodedLogEventView } from \"app/shared/module/tx/txSummary/component/DecodedLogEventView\";\r\n\r\ninterface ILogEventsProps {\r\n    translation: ITranslation;\r\n    data: ILogEvent[];\r\n}\r\n\r\nconst LogEventsRoot = styled.div``;\r\nconst LogEventsSection = styled.div`\r\n    border-bottom: 1px solid ${({theme}) => theme.colors.logEventsBorder };\r\n`;\r\nconst RawLogEventsSection = styled.div`\r\n    padding: 20px 0;\r\n`;\r\n\r\nconst EVENT_LOGS_LINE_BASE_HEIGHT = 44;\r\n\r\nexport class LogEvents extends React.Component<ILogEventsProps> {\r\n    render() {\r\n        const { translation: tr, data } = this.props;\r\n        return (\r\n            <LogEventsRoot>\r\n                { data.map((eLog, eLogId) =>\r\n                    <LogEventsSection key={eLogId}>\r\n                        { eLog.eventDecoded ? this.renderDecodedEvent(eLog) : this.renderRawEvent(eLog, tr) }\r\n                    </LogEventsSection>\r\n                ) }\r\n            </LogEventsRoot>\r\n        );\r\n    }\r\n\r\n    renderDecodedEvent(eLog: ILogEvent) {\r\n        return <DecodedLogEventView data={eLog.eventDecoded!} />;\r\n    }\r\n\r\n    renderRawEvent(eLog: ILogEvent, tr: ITranslation) {\r\n        return <RawLogEventsSection>\r\n                { eLog.hasLogTopics.map((topic, idx) =>\r\n                    <LayoutRow key={idx}>\r\n                        <LayoutRowItem baseHeight={EVENT_LOGS_LINE_BASE_HEIGHT} >\r\n                            <Label>\r\n                                {tr.get(\"txView.content.txSummary.logEvents.topic.value\") + \" \" + idx}\r\n                            </Label>\r\n                            <TypedValueBox value={topic} />\r\n                        </LayoutRowItem>\r\n                    </LayoutRow>\r\n                ) }\r\n                <LayoutRow>\r\n                    <LayoutRowItem baseHeight={EVENT_LOGS_LINE_BASE_HEIGHT} >\r\n                        <Label>\r\n                            {tr.get(\"txView.content.txSummary.logEvents.logData.value\")}\r\n                        </Label>\r\n                        <TypedValueBox value={eLog.logData} />\r\n                    </LayoutRowItem>\r\n                </LayoutRow>\r\n            </RawLogEventsSection>;\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport { ITheme } from \"@alethio/explorer-ui/lib/ITheme\";\r\nimport { ThemeContext } from \"plugin-api/ThemeContext\";\r\nimport { ITranslation } from \"plugin-api/ITranslation\";\r\nimport { ITxDetails } from \"app/shared/data/tx/details/ITxDetails\";\r\nimport { NotAvailableBox } from \"app/shared/component/NotAvailableBox\";\r\nimport { IAccordionItemConfig } from \"@alethio/ui/lib/control/accordion/IAccordionItemConfig\";\r\nimport { Expander } from \"@alethio/ui/lib/control/expander/Expander\";\r\nimport { AccordionVertical, IAccordionVerticalProps } from \"@alethio/ui/lib/control/accordion/AccordionVertical\";\r\nimport { AccordionItem } from \"@alethio/ui/lib/control/accordion/AccordionItem\";\r\nimport { AccordionContentFrame } from \"@alethio/ui/lib/control/accordion/AccordionContentFrame\";\r\nimport { AccordionItemContentStatus } from \"@alethio/ui/lib/control/accordion/AccordionItemContentStatus\";\r\nimport { LayoutRow } from \"@alethio/ui/lib/layout/content/LayoutRow\";\r\nimport { LayoutRowItem } from \"@alethio/ui/lib/layout/content/LayoutRowItem\";\r\nimport { Label } from \"@alethio/ui/lib/data/Label\";\r\nimport { LogEvents } from \"app/shared/module/tx/txSummary/component/LogEvents\";\r\nimport { ILogger } from \"plugin-api/ILogger\";\r\nimport { LayoutSection } from \"@alethio/ui/lib/layout/content/LayoutSection\";\r\nimport { LogEventsStore } from \"app/eth-memento/data/logEvents/LogEventsStore\";\r\nimport { isMementoTxDetails } from \"app/eth-memento/data/tx/details/isMementoTxDetails\";\r\n\r\ninterface ITxSummaryItemConfig extends IAccordionItemConfig {\r\n    label: string;\r\n    value: number;\r\n    /** Header element shown beside the expander box */\r\n    header?: React.ReactNode;\r\n    backgroundColor?(theme: ITheme): string;\r\n    borderColor?(theme: ITheme): string;\r\n}\r\n\r\nexport interface ITxSummaryProps {\r\n    tx: ITxDetails;\r\n    translation: ITranslation;\r\n    locale: string;\r\n    ethSymbol: string;\r\n    logEventsStore: LogEventsStore;\r\n    logger: ILogger;\r\n}\r\n\r\n@observer\r\nexport class TxSummary extends React.Component<ITxSummaryProps> {\r\n    @observable.shallow\r\n    private items: React.ReactNode;\r\n\r\n    constructor(props: ITxSummaryProps) {\r\n        super(props);\r\n\r\n        window.addEventListener(\"resize\", this.handleResize);\r\n        this.handleResize();\r\n        this.items = this.buildItems(this.props.tx);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ITxSummaryProps) {\r\n        if (this.props.tx !== prevProps.tx || this.props.translation !== prevProps.translation) {\r\n            this.items = this.buildItems(this.props.tx);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.handleResize);\r\n    }\r\n\r\n    private handleResize = () => {\r\n        this.items = this.buildItems(this.props.tx);\r\n    }\r\n\r\n    render() {\r\n        const { translation: tr } = this.props;\r\n\r\n        return <LayoutSection useWrapper>\r\n            <AccordionVertical\r\n                label={tr.get(\"txView.content.txSummary.label\")}\r\n                noDataContent={<NotAvailableBox translation={tr} />}\r\n                renderExpander={this.renderExpander}\r\n                renderHeader={this.renderHeader}\r\n                renderContent={this.renderContent}\r\n                loadingText={`${tr.get(\"general.loading\")}...`}\r\n                errorText={tr.get(\"general.error\")}\r\n                onContentError={(e, item) => {\r\n                    this.props.logger.error(`Couldn't load content for tx summary tab #${item.index}`, e);\r\n                }}\r\n            >\r\n                {this.items}\r\n            </AccordionVertical>\r\n        </LayoutSection>;\r\n    }\r\n\r\n    private renderExpander: IAccordionVerticalProps<ITxSummaryItemConfig>[\"renderExpander\"] =\r\n    ({config, isOpen, onClick, isFullWidth}) => {\r\n        return <Expander\r\n            label={config.label}\r\n            value={config.value}\r\n            open={isOpen}\r\n            onClick={onClick}\r\n            fullWidth={isFullWidth}\r\n            locale={this.props.locale}\r\n        />;\r\n    }\r\n\r\n    private renderHeader: IAccordionVerticalProps<ITxSummaryItemConfig>[\"renderHeader\"] =\r\n    ({config}) => {\r\n        return config.header;\r\n    }\r\n\r\n    private renderContent: IAccordionVerticalProps<ITxSummaryItemConfig>[\"renderContent\"] =\r\n    ({ content, status, arrowPosition, config }) => {\r\n        if (status !== AccordionItemContentStatus.Loaded) {\r\n            return <LayoutRow>\r\n                <LayoutRowItem>\r\n                    <Label></Label>\r\n                    {content}\r\n                </LayoutRowItem>\r\n            </LayoutRow>;\r\n        }\r\n\r\n        return (\r\n            <ThemeContext.Consumer>\r\n                {(theme: ITheme) =>\r\n                    <AccordionContentFrame\r\n                        arrowPosition={arrowPosition}\r\n                        backgroundColor={\r\n                            config.backgroundColor && config.backgroundColor(theme) || theme.colors.gridEvenRowBg}\r\n                        borderColor={config.borderColor && config.borderColor(theme) || theme.colors.gridBorder}\r\n                        noBorder={!config.borderColor}\r\n                    >{content}</AccordionContentFrame>\r\n                }\r\n            </ThemeContext.Consumer>\r\n        );\r\n    }\r\n\r\n    private buildItems(tx: ITxDetails) {\r\n        let { translation: tr } = this.props;\r\n\r\n        let items = !isMementoTxDetails(tx) ? null : <>\r\n            <AccordionItem<ITxSummaryItemConfig>\r\n                label={tr.get(\"txView.content.txSummary.logEvents.label\")}\r\n                value={tx.logEventsCount}\r\n                content={async () => {\r\n                    let logEvents = await this.props.logEventsStore.fetchByTx(this.props.tx.hash);\r\n                    return <LogEvents translation={tr} data={logEvents} />;\r\n                }}\r\n                backgroundColor={theme => theme.colors.logEventsSectionBg}\r\n                borderColor={theme => theme.colors.logEventsBorder}\r\n            />\r\n        </>;\r\n\r\n        return items;\r\n    }\r\n}\r\n","import * as React from \"react\";\nimport { observable, IReactionDisposer, when, reaction, runInAction } from \"mobx\";\nimport { observer, PropTypes } from \"mobx-react\";\nimport { IAccordionItemConfig } from \"./IAccordionItemConfig\";\nimport { LayoutRow } from \"../../layout/content/LayoutRow\";\nimport { LayoutRowItem } from \"../../layout/content/LayoutRowItem\";\nimport { Label } from \"../../data/Label\";\nimport { AccordionState } from \"./internal/AccordionState\";\nimport { AccordionContentWrapper } from \"./internal/AccordionContentWrapper\";\nimport { Height } from \"../../fx/Height\";\nimport { AccordionItemState } from \"./AccordionItemState\";\nimport { AccordionItemContentStatus } from \"./AccordionItemContentStatus\";\n\nexport interface IAccordionVerticalProps<TItemConfig extends IAccordionItemConfig> {\n    label: string;\n    noDataContent: React.ReactElement<{}>;\n    loadingText: string;\n    errorText: string;\n    contentAnimSeconds?: number;\n    children?: React.ReactNode;\n    onContentError(e: any, item: AccordionItemState<TItemConfig>): void;\n    renderExpander(args: {\n        config: TItemConfig;\n        isOpen: boolean;\n        isFullWidth: boolean;\n        onClick(): void;\n        onResize(): void;\n    }): React.ReactElement<{}>;\n    renderHeader?(args: {\n        config: TItemConfig;\n        isOpen: boolean;\n    }): React.ReactNode;\n    renderContent?(args: {\n        content?: React.ReactElement<{}>;\n        status: AccordionItemContentStatus;\n        arrowPosition?: number;\n        config: TItemConfig;\n    }): React.ReactElement<{}>;\n}\n\n/**\n * Accordion with async loading that uses the standard LayoutRow/LayoutItem components to display its data\n *\n * Uses a vertical layout, calculating the width of the largest expander and sets all expanders to the same width\n *\n * For each accordion item, a corresponding <AccordionItem /> instance should be passed as a child\n * to the accordion instance. Passing arbitrary props to each item is possible and is reflected\n * in the TItemConfig generic type parameter:\n *\n * ```ts\n * import { IAccordionItemConfig } from \"@alethio/ui/lib/control/accordion/IAccordionItemConfig\";\n *\n * interface IItemData extends IAccordionItemConfig {\n *     foo: string;\n * }\n * <AccordionVertical<IItemData> ...>\n *     <AccordionItem<IItemData> foo=\"bar\" content={async () => <div>Test</div>} />\n * </AccordionVertical>\n * ```\n */\n@observer\nexport class AccordionVertical<TItemConfig extends IAccordionItemConfig>\nextends React.Component<IAccordionVerticalProps<TItemConfig>> {\n    static defaultProps: Pick<IAccordionVerticalProps<any>, \"contentAnimSeconds\"> = {\n        contentAnimSeconds: .2\n    };\n\n    // We use legacy context because the accordion and the children\n    // may be instantiated from different apps library instances and the createContext API won't work in this case\n    /** @internal */\n    static childContextTypes = {\n        // Just so we don't have to import react prop-types. We don't care about the shape anyway\n        accordionState: PropTypes.objectOrObservableObject\n    };\n    /** @internal */\n    private accordionState: AccordionState<TItemConfig>;\n\n    @observable\n    private expanderEls = new Map<number, HTMLElement>();\n    @observable\n    private fixedExpanderWidth: number | undefined;\n    private containerOffsetLeft: number | undefined;\n    private widthWatchDisposer: IReactionDisposer | undefined;\n    private refreshDisposer: IReactionDisposer | undefined;\n\n    constructor(props: IAccordionVerticalProps<TItemConfig>) {\n        super(props);\n\n        this.accordionState = new AccordionState<TItemConfig>(this.props.onContentError);\n\n        this.refreshDisposer = reaction(() => this.accordionState.getItems().map(i => i.config), () => {\n            // Reset width and recalculate\n            runInAction(() => {\n                this.fixedExpanderWidth = void 0;\n                this.expanderEls.clear();\n            });\n            this.destroyWidthWatch();\n            this.setupWidthWatch();\n        }, {\n            // HACK: The reaction triggers before re-render with new items resulting in incorrect width\n            // Debounce also helps with multiple triggers due to changes in each item\n            delay: 100,\n            equals: (itemConfigs: TItemConfig[], prevItemConfigs: TItemConfig[]) => {\n                if (itemConfigs.length !== prevItemConfigs.length) {\n                    return false;\n                }\n                return itemConfigs.every((item, idx) => item === prevItemConfigs[idx]);\n            }\n        });\n    }\n\n    /** @internal */\n    getChildContext() {\n        return { accordionState: this.accordionState };\n    }\n\n    componentDidMount() {\n        this.setupWidthWatch();\n    }\n\n    private setupWidthWatch() {\n        const items = this.accordionState.getItems();\n        if (items.length) {\n            this.widthWatchDisposer = when(() => this.expanderEls.size === items.length, () => {\n                this.computeWidth();\n            });\n        }\n    }\n\n    private destroyWidthWatch() {\n        if (this.widthWatchDisposer) {\n            this.widthWatchDisposer();\n            this.widthWatchDisposer = void 0;\n        }\n    }\n\n    componentWillUnmount() {\n        this.destroyWidthWatch();\n        if (this.refreshDisposer) {\n            this.refreshDisposer();\n            this.refreshDisposer = void 0;\n        }\n    }\n\n    private computeWidth() {\n        let maxWidth = [...this.expanderEls.values()].reduce((max, el) => Math.max(max, el.offsetWidth), 0);\n        // HACK: Add 1 to account for rounding errors (subpixel rendering)\n        this.fixedExpanderWidth = maxWidth + 1;\n    }\n\n    render() {\n        return <>\n            { /* Just make sure there wasn't something extra besides <AccordionItem>-s, which return null */ }\n            <div style={{ position: \"fixed\", top: -10000, left: -10000 }}>\n                { /* Children aren't actually visible, we just use this method as hook to add items dynamically */ }\n                { this.props.children }\n            </div>\n            { this.renderItems() }\n        </>;\n    }\n\n    private renderItems() {\n        if (!this.accordionState.getItems().length) {\n            return <LayoutRow>\n                <LayoutRowItem>\n                    <Label>{this.props.label}</Label>\n                    {this.props.noDataContent}\n                </LayoutRowItem>\n            </LayoutRow>;\n        }\n\n        let items = this.accordionState.getItems();\n        let activeItem = this.accordionState.getActiveItem();\n\n        return <div ref={this.handleContainerRef}>\n            { items.map((item, idx) => <React.Fragment key={idx}>\n                <LayoutRow responsive={{ignoreFirstLabel: \"forLowRes\"}}>\n                    <LayoutRowItem>\n                        <Label>{ !idx ? this.props.label : void 0}</Label>\n                        <div\n                            ref={ref => ref && this.expanderEls.set(idx, ref)}\n                            style={{ width: this.fixedExpanderWidth }}\n                        >\n                            { this.props.renderExpander({\n                                config: item.config,\n                                isFullWidth: !!this.fixedExpanderWidth,\n                                isOpen: item === activeItem,\n                                onClick: item.onClick,\n                                onResize: this.onExpanderResize\n                            }) }\n                        </div>\n                        { this.props.renderHeader && this.props.renderHeader({\n                            config: item.config,\n                            isOpen: item === activeItem\n                        }) }\n                    </LayoutRowItem>\n                </LayoutRow>\n                <Height duration={this.props.contentAnimSeconds!}>\n                    { item === activeItem && <AccordionContentWrapper<TItemConfig>\n                        content={item.content}\n                        config={item.config}\n                        status={item.contentStatus}\n                        arrowPosition={this.getContentArrowPosition()}\n                        loadingDelay={this.props.contentAnimSeconds!}\n                        errorText={this.props.errorText}\n                        loadingText={this.props.loadingText}\n                        renderContent={this.props.renderContent}\n                    />}\n                </Height>\n            </React.Fragment>) }\n        </div>;\n    }\n\n    private handleContainerRef = (ref: HTMLElement | null) => {\n        if (ref) {\n            this.containerOffsetLeft = ref.offsetLeft;\n        }\n    }\n\n    private getContentArrowPosition() {\n        if (this.expanderEls.size && this.containerOffsetLeft !== void 0 && this.fixedExpanderWidth) {\n            let expanderEl = this.expanderEls.values().next().value;\n            return expanderEl.offsetLeft - this.containerOffsetLeft + this.fixedExpanderWidth / 2;\n        }\n\n        return void 0;\n    }\n\n    private onExpanderResize = () => {\n        this.fixedExpanderWidth = void 0;\n        this.destroyWidthWatch();\n        this.setupWidthWatch();\n    }\n}\n"],"sourceRoot":""}