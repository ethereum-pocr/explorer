{"version":3,"sources":["webpack://__aleth_io__ethLite/./app/eth-lite/module/block/blockTxs/BlockTxsState.ts","webpack://__aleth_io__ethLite/./app/eth-lite/module/block/blockTxs/txHighlight/HighlightFieldKey.ts","webpack://__aleth_io__ethLite/./app/eth-lite/module/block/blockTxs/txHighlight/HighlightFieldsFull.ts","webpack://__aleth_io__ethLite/./app/eth-lite/module/block/blockTxs/BlockTxsStateFactory.ts","webpack://__aleth_io__ethLite/./app/eth-lite/module/block/blockTxs/component/TxTooltipContent.tsx","webpack://__aleth_io__ethLite/./app/shared/component/Grid.tsx","webpack://__aleth_io__ethLite/./app/eth-lite/module/block/blockTxs/component/TxGridFields.tsx","webpack://__aleth_io__ethLite/./app/eth-lite/module/block/blockTxs/component/TxsGrid.tsx","webpack://__aleth_io__ethLite/./app/helper/logScale.ts","webpack://__aleth_io__ethLite/./app/helper/minMaxLogScale.ts","webpack://__aleth_io__ethLite/./app/eth-lite/module/block/blockTxs/component/BlockTxs.tsx"],"names":["BlockTxsState","[object Object]","txsViewMode","txsHighlightFields","txsGridSortingOptions","this","HighlightFieldKey","HighlightFieldsFull_HighlightFieldsFull","HighlightFields","super","fields","key","Value","getLabel","t","get","getData","tx","value","GasPrice","gasPrice","GasLimit","gasLimit","setSelectedField","BlockTxsStateFactory_BlockTxsStateFactory","TxsViewMode","GridSortingOptions","TxTooltipContent_TxTooltipContent","external_react_","translation","ethSymbol","props","TxTooltipContentWrapper","TxHashBox","variant","hash","Label","AddressHashBox","from","to","style","paddingLeft","arrow","disabled","isZero","display","EthValueBox","wei","locale","symbol","Grid_Grid","_a","tr","tslib_es6","grid_Grid","Object","assign","noDataText","loadMoreText","TxGridFields_TxGridFields","GridFields","label","fieldKey","ITxGridFieldKeys","Hash","type","isSortable","selected","alwaysVisible","getFieldValue","f","renderer","TxLinkRenderer","From","AccountLinkRenderer","To","%s","EthRenderer","TxsGridRoot","styled_components","div","withConfig","displayName","componentId","TxsGrid_TxsGrid","TxsGrid","gridFields","gridSortingOptions","prevProps","rows","transactions","map","data","sortingOptions","external_mobx_","ref","external_mobx_react_","logScale","x","maxValue","percent","dividedBy","multipliedBy","toNumber","Math","floor","log10","minMaxLogScale","values","defaultSize","length","min","BigNumber","minimum","max","maxSize","maximum","minus","v","HIGHLIGHT_THRESHOLD","BlockTxs_BlockTxs","BlockTxs","external_react_default","a","Component","renderHeatMapTooltip","createElement","blockTxsState","uiStateContainer","blockTxsLiteState","create","txs","Fragment","LayoutRow","minWidth","LayoutRowItem","TxCountBox","TxHighlightSelector","isTableList","ViewSelectorBox","isHeatMapGrid","fullRow","autoHeight","maxWidth","TxsHeatMap","highlightThreshold","highlightDataSelector","getSelectedField","scaleValuesFn","txTooltipThunk","Spacer","height"],"mappings":"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","file":"a6b7404ecbbd8021ea47.bundle.js","sourcesContent":["import { GridSortingOptions } from \"@alethio/ui/lib/control/grid/state/GridSortingOptions\";\nimport { TxsViewMode } from \"@alethio/explorer-ui/lib/blockTxs/TxsViewMode\";\nimport { HighlightFields } from \"@alethio/explorer-ui/lib/blockTxs/txHighlight/HighlightFields\";\nimport { HighlightFieldKey } from \"./txHighlight/HighlightFieldKey\";\nimport { ITxDetails } from \"app/eth-lite/data/tx/details/ITxDetails\";\n\nexport class BlockTxsState {\n    constructor(\n        public txsViewMode: TxsViewMode,\n        public txsHighlightFields: HighlightFields<ITxDetails, HighlightFieldKey>,\n        public txsGridSortingOptions: GridSortingOptions\n    ) {\n\n    }\n}\n","export enum HighlightFieldKey {\n    Value = \"value\",\n    GasPrice = \"gasprice\",\n    GasLimit = \"gaslimit\"\n}\n","import { HighlightFields } from \"@alethio/explorer-ui/lib/blockTxs/txHighlight/HighlightFields\";\nimport { HighlightFieldKey } from \"./HighlightFieldKey\";\nimport { ITxDetails } from \"app/eth-lite/data/tx/details/ITxDetails\";\n\nexport class HighlightFieldsFull extends HighlightFields<ITxDetails, HighlightFieldKey> {\n    constructor() {\n        super();\n        this.fields = [{\n            key: HighlightFieldKey.Value,\n            getLabel: t => t.get(\"blockView.content.transactionsHighlight.value.label\"),\n            getData: tx => tx.value\n        }, {\n            key: HighlightFieldKey.GasPrice,\n            getLabel: t => t.get(\"general.gasPrice\"),\n            getData: tx => tx.gasPrice\n        }, {\n            key: HighlightFieldKey.GasLimit,\n            getLabel: t => t.get(\"general.gasLimit\"),\n            getData: tx => tx.gasLimit\n        }];\n        this.setSelectedField(HighlightFieldKey.Value);\n    }\n}\n","import { GridSortingOptions } from \"@alethio/ui/lib/control/grid/state/GridSortingOptions\";\nimport { BlockTxsState } from \"./BlockTxsState\";\nimport { TxsViewMode } from \"@alethio/explorer-ui/lib/blockTxs/TxsViewMode\";\nimport { HighlightFieldsFull } from \"./txHighlight/HighlightFieldsFull\";\n\nexport class BlockTxsStateFactory {\n    create() {\n        return new BlockTxsState(\n            new TxsViewMode(),\n            new HighlightFieldsFull(),\n            new GridSortingOptions()\n        );\n    }\n}\n","import * as React from \"react\";\r\nimport { Label } from \"@alethio/ui/lib/data/Label\";\r\nimport { EthValueBox } from \"@alethio/ui/lib/data/box/EthValueBox\";\r\nimport { TxHashBox } from \"@alethio/explorer-ui/lib/box/tx/TxHashBox\";\r\nimport { AddressHashBox } from \"@alethio/explorer-ui/lib/box/account/AddressHashBox\";\r\nimport { ITranslation } from \"plugin-api/ITranslation\";\r\nimport { ITxDetails } from \"app/eth-lite/data/tx/details/ITxDetails\";\r\nimport { TxTooltipContentWrapper } from \"@alethio/explorer-ui/lib/blockTxs/TxTooltipContentWrapper\";\r\n\r\nexport interface ITxTooltipContentProps {\r\n    tx: ITxDetails;\r\n    translation: ITranslation;\r\n    locale: string;\r\n    ethSymbol: string;\r\n}\r\n\r\nexport class TxTooltipContent extends React.Component<ITxTooltipContentProps> {\r\n    render() {\r\n        let { tx, translation, ethSymbol } = this.props;\r\n        return (\r\n            <TxTooltipContentWrapper>\r\n                <TxHashBox variant=\"small\">{tx.hash}</TxHashBox>\r\n                <Label>{translation.get(\"general.from\")}</Label>\r\n                <AddressHashBox variant=\"small\">{tx.from}</AddressHashBox>\r\n                <Label>{translation.get(\"general.to\")}</Label>\r\n                <AddressHashBox variant=\"small\">{tx.to}</AddressHashBox>\r\n                <div style={{paddingLeft: 8}}>\r\n                    <Label arrow disabled={tx.value.isZero()}>{translation.get(\"txTooltip.value.label\")}</Label>\r\n                </div>\r\n                <div style={{display: \"flex\"}}>\r\n                    <EthValueBox variant=\"smallThin\" wei={tx.value} locale={this.props.locale} symbol={ethSymbol} />\r\n                </div>\r\n            </TxTooltipContentWrapper>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { Grid as GridBase, IGridProps as IGridBaseProps } from \"@alethio/ui/lib/control/grid/Grid\";\n\nexport interface IGridProps<TData> {\n    rows: IGridBaseProps<TData>[\"rows\"];\n    limitRows?: boolean;\n    maxVisibleRows?: number;\n    fields: IGridBaseProps<TData>[\"fields\"];\n    sortingOptions: IGridBaseProps<TData>[\"sortingOptions\"];\n    translation: ITranslation;\n}\n\nexport class Grid<TData> extends React.Component<IGridProps<TData>> {\n    render() {\n        let { translation: tr, ...props} = this.props;\n\n        return <GridBase<TData>\n            {...props}\n            noDataText={tr.get(\"general.grid.footer.norowsavailable.label\")}\n            loadMoreText={tr.get(\"general.grid.footer.loadMore.label\")}\n        />;\n    }\n}\n","import { GridFields } from \"@alethio/ui/lib/control/grid/state/GridFields\";\r\nimport { EthRenderer } from \"@alethio/ui/lib/data/gridRenderer/EthRenderer\";\r\nimport { ITranslation } from \"plugin-api/ITranslation\";\r\nimport { TxLinkRenderer } from \"@alethio/explorer-ui/lib/grid/dataRenderer/tx/TxLinkRenderer\";\r\nimport { AccountLinkRenderer } from \"@alethio/explorer-ui/lib/grid/dataRenderer/account/AccountLinkRenderer\";\r\nimport { ITxGridFieldKeys } from \"./TxsGrid\";\r\nimport { ITxDetails } from \"app/eth-lite/data/tx/details/ITxDetails\";\r\n\r\nexport class TxGridFields extends GridFields<ITxDetails> {\r\n    constructor(t: ITranslation, locale: string, ethSymbol: string) {\r\n        super();\r\n        this.fields = [{\r\n            label: t.get(\"general.hash\"),\r\n            fieldKey: ITxGridFieldKeys.Hash,\r\n            type: \"string\",\r\n            isSortable: true,\r\n            selected: true,\r\n            alwaysVisible: true,\r\n            getFieldValue: f => f.hash,\r\n            renderer: new TxLinkRenderer(f => f.hash)\r\n        }, {\r\n            label: t.get(\"general.from\"),\r\n            fieldKey: ITxGridFieldKeys.From,\r\n            type: \"string\",\r\n            isSortable: true,\r\n            selected: true,\r\n            getFieldValue: f => f.from,\r\n            renderer: new AccountLinkRenderer(f => f.from)\r\n        }, {\r\n            label: t.get(\"general.to\"),\r\n            fieldKey: ITxGridFieldKeys.To,\r\n            type: \"string\",\r\n            isSortable: true,\r\n            selected: true,\r\n            getFieldValue: f => f.to,\r\n            renderer: new AccountLinkRenderer(f => f.to)\r\n        }, {\r\n            label: t.get(\"general.valueEth\", { \"%s\": ethSymbol }),\r\n            fieldKey: ITxGridFieldKeys.Value,\r\n            type: \"number\",\r\n            isSortable: true,\r\n            selected: true,\r\n            getFieldValue: f => f.value,\r\n            renderer: new EthRenderer(\r\n                locale,\r\n                f => f.value\r\n            )\r\n        }];\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { observable, action } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport styled from \"@alethio/explorer-ui/lib/styled-components\";\r\nimport { GridSortingOptions } from \"@alethio/ui/lib/control/grid/state/GridSortingOptions\";\r\nimport { GridFields } from \"@alethio/ui/lib/control/grid/state/GridFields\";\r\nimport { Grid } from \"app/shared/component/Grid\";\r\nimport { ITranslation } from \"plugin-api/ITranslation\";\r\nimport { TxGridFields } from \"./TxGridFields\";\r\nimport { ITxDetails } from \"app/eth-lite/data/tx/details/ITxDetails\";\r\n\r\nconst TxsGridRoot = styled.div`\r\n    margin-top: 16px;\r\n`;\r\n\r\nexport enum ITxGridFieldKeys {\r\n    Type = \"type\",\r\n    Hash = \"hash\",\r\n    From = \"from\",\r\n    To = \"to\",\r\n    Value = \"value\"\r\n}\r\n\r\ninterface ITxGridProps {\r\n    transactions: ITxDetails[];\r\n    locale: string;\r\n    translation: ITranslation;\r\n    ethSymbol: string;\r\n    gridSortingOptions: GridSortingOptions;\r\n}\r\n\r\n@observer\r\nexport class TxsGrid extends React.Component<ITxGridProps> {\r\n    @observable.ref\r\n    private gridFields: GridFields<ITxDetails>;\r\n    private gridSortingOptions: GridSortingOptions;\r\n\r\n    constructor(props: ITxGridProps) {\r\n        super(props);\r\n        this.gridFields = new TxGridFields(props.translation, props.locale, props.ethSymbol);\r\n        this.gridSortingOptions = this.props.gridSortingOptions;\r\n    }\r\n\r\n    @action\r\n    componentDidUpdate(prevProps: ITxGridProps) {\r\n        if (this.props.translation !== prevProps.translation) {\r\n            this.gridFields = new TxGridFields(this.props.translation, this.props.locale, this.props.ethSymbol);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const rows = this.props.transactions.map(tx => {\r\n            return {\r\n                key: tx.hash,\r\n                data: tx\r\n            };\r\n        });\r\n        return (\r\n            <TxsGridRoot>\r\n                <Grid<ITxDetails>\r\n                    rows={rows}\r\n                    fields={this.gridFields}\r\n                    sortingOptions={this.gridSortingOptions}\r\n                    translation={this.props.translation}\r\n                />\r\n            </TxsGridRoot>\r\n        );\r\n    }\r\n}\r\n","import { BigNumber } from \"app/util/BigNumber\";\n\n/**\n * Produces scaled percentage values\n */\nexport function logScale(x: BigNumber, maxValue: BigNumber) {\n    // We can loose precision here\n    let percent = x.dividedBy(maxValue).multipliedBy(100).toNumber();\n    return Math.floor(Math.log10(100 * percent + 1) * 25);\n}\n","import { logScale } from \"./logScale\";\nimport { BigNumber } from \"app/util/BigNumber\";\n\n/**\n * Takes an array of values and scales the items between the array min and max values to a percentage, logarithmically\n * e.g. Transforms interval (min, max) to (0, 100)\n *\n * Logarithmic scale is especially useful for transaction values that differ by an order of magnitude\n *\n * @param values\n * @param defaultSize If all values are the same, fill the result with this default\n */\nexport function minMaxLogScale(values: (number | BigNumber)[], defaultSize = 50) {\n    if (!values.length) {\n        return [];\n    }\n\n    let min = BigNumber.minimum(...values);\n    let max = BigNumber.maximum(...values);\n\n    let maxSize = max.minus(min);\n\n    if (maxSize.isZero()) {\n        // All values are equal, just fill with default size\n        return values.map(v => defaultSize);\n    }\n\n    /*\n     * Array values between [min, max]:\n     * |---|----------------------|\n     * 0  min                    max\n     *     |----------------------|      ( x1 = x0 - min )\n     *     0                  max - min\n     *     |----------------------|      ( x2 = log(x1 * 100 / max) )\n     *     0                     100\n     */\n    return values\n        // translate(-min)\n        .map(v => new BigNumber(v).minus(min))\n        // scale to maxSize and apply log scale\n        .map(v => logScale(v, maxSize));\n}\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport { LayoutRow } from \"@alethio/ui/lib/layout/content/LayoutRow\";\r\nimport { LayoutRowItem } from \"@alethio/ui/lib/layout/content/LayoutRowItem\";\r\nimport { Label } from \"@alethio/ui/lib/data/Label\";\r\nimport { Spacer } from \"@alethio/ui/lib/layout/Spacer\";\r\nimport { TxCountBox } from \"@alethio/explorer-ui/lib/box/block/TxCountBox\";\r\nimport { ITranslation } from \"plugin-api/ITranslation\";\r\nimport { TxHighlightSelector } from \"@alethio/explorer-ui/lib/blockTxs/txHighlight/TxHighlightSelector\";\r\nimport { ViewSelectorBox } from \"@alethio/explorer-ui/lib/blockTxs/ViewSelectorBox\";\r\nimport { BlockTxsStateFactory } from \"../BlockTxsStateFactory\";\r\nimport { BlockTxsState } from \"../BlockTxsState\";\r\nimport { TxTooltipContent } from \"./TxTooltipContent\";\r\nimport { TxsHeatMap } from \"@alethio/explorer-ui/lib/blockTxs/txHeatMap/TxsHeatMap\";\r\nimport { TxsGrid } from \"./TxsGrid\";\r\nimport { ITxDetails } from \"app/eth-lite/data/tx/details/ITxDetails\";\r\nimport { minMaxLogScale } from \"app/helper/minMaxLogScale\";\r\n\r\nconst HIGHLIGHT_THRESHOLD = 80;\r\n\r\ninterface IGlobalState {\r\n    blockTxsLiteState?: BlockTxsState;\r\n}\r\n\r\nexport interface IBlockTxsProps {\r\n    txs: ITxDetails[];\r\n    translation: ITranslation;\r\n    locale: string;\r\n    ethSymbol: string;\r\n    uiStateContainer: IGlobalState;\r\n}\r\n\r\n@observer\r\nexport class BlockTxs extends React.Component<IBlockTxsProps> {\r\n    constructor(props: IBlockTxsProps) {\r\n        super(props);\r\n\r\n        // TODO: encapsulation per module type\r\n        let blockTxsState = this.props.uiStateContainer.blockTxsLiteState;\r\n        if (!blockTxsState) {\r\n            blockTxsState = new BlockTxsStateFactory().create();\r\n            this.props.uiStateContainer.blockTxsLiteState = blockTxsState;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { translation: tr, txs, locale, uiStateContainer, ethSymbol } = this.props;\r\n        let {\r\n            txsGridSortingOptions, txsHighlightFields, txsViewMode\r\n        } = uiStateContainer.blockTxsLiteState as BlockTxsState;\r\n\r\n        return <>\r\n            <LayoutRow minWidth={610}>\r\n                <LayoutRowItem>\r\n                    <Label>{tr.get(\"blockView.content.transactions.label\")}</Label>\r\n                    <TxCountBox>{txs.length}</TxCountBox>\r\n                </LayoutRowItem>\r\n                { txs.length ?\r\n                <LayoutRowItem>\r\n                    <Label>{tr.get(\"blockView.content.transactionsHighlight.label\")}</Label>\r\n                    <TxHighlightSelector fields={txsHighlightFields} translation={tr}\r\n                        disabled={txsViewMode.isTableList} />\r\n                    <ViewSelectorBox txsViewMode={txsViewMode} />\r\n                </LayoutRowItem>\r\n                : null }\r\n            </LayoutRow>\r\n            { txs.length ?\r\n            <>\r\n                { txsViewMode.isHeatMapGrid ?\r\n                <LayoutRow>\r\n                    <LayoutRowItem fullRow autoHeight>\r\n                        <div />\r\n                        <div style={{ maxWidth: 600 }}>\r\n                            <TxsHeatMap\r\n                                transactions={txs}\r\n                                highlightThreshold={HIGHLIGHT_THRESHOLD}\r\n                                highlightDataSelector={txsHighlightFields.getSelectedField().getData}\r\n                                scaleValuesFn={minMaxLogScale}\r\n                                txTooltipThunk={this.renderHeatMapTooltip}\r\n                            />\r\n                        </div>\r\n                    </LayoutRowItem>\r\n                </LayoutRow>\r\n                :\r\n                <TxsGrid\r\n                    transactions={txs}\r\n                    gridSortingOptions={txsGridSortingOptions}\r\n                    locale={locale}\r\n                    translation={tr}\r\n                    ethSymbol={ethSymbol}\r\n                />\r\n                }\r\n                <Spacer height=\"64px\" />\r\n            </>\r\n            : null }\r\n        </>;\r\n    }\r\n\r\n    private renderHeatMapTooltip = (tx: ITxDetails) => {\r\n        return <TxTooltipContent\r\n            tx={tx}\r\n            translation={this.props.translation} locale={this.props.locale}\r\n            ethSymbol={this.props.ethSymbol}\r\n        />;\r\n    }\r\n}\r\n"],"sourceRoot":""}