{"version":3,"sources":["webpack://__aleth_io__ethLite/../node_modules/@alethio/explorer-ui/src/box/block/BlockHashBox.tsx","webpack://__aleth_io__ethLite/../node_modules/@alethio/explorer-ui/src/box/block/ParentHashBox.tsx","webpack://__aleth_io__ethLite/../node_modules/@alethio/ui/src/data/ByteSize.tsx","webpack://__aleth_io__ethLite/../node_modules/@alethio/explorer-ui/src/box/block/BlockSizeBox.tsx","webpack://__aleth_io__ethLite/../node_modules/@alethio/explorer-ui/src/box/block/UnclesCountBox.tsx","webpack://__aleth_io__ethLite/./app/eth-lite/module/block/blockDetails/BlockDetails.tsx"],"names":["BlockHashBox_BlockHashBox","external_react_","[object Object]","children","linkTo","this","props","HashLinkValueBox","colors","theme","background","blockColorCode","text","blockBoxText","ParentHashBox","parentHashBoxBg","parentHashBoxText","ByteSize_ByteSize","format","replace","NumberFormatter","locale","BlockSizeBox","bytes","translations","ValueBox","UnclesCountBox_UnclesCountBox","unclesBoxBg","unclesBoxText","border","unclesBoxBorder","variant","data_Number","value","__webpack_require__","d","__webpack_exports__","BlockDetails_BlockDetails","translation","tr","blockDetails","block","slots","LayoutSection","useWrapper","LayoutRow","minWidth","LayoutRowItem","Label","get","BlockNumberBox","noLink","id","creationTime","TimeElapsedBox","timestamp","BlockDetailsSlotType","Confirmations","uncles","length","hash","parentHash","parentId","fullRow","map","uncleHash","idx","UncleHashBox","key","nonce","HashValueBox","byteSize","Txs","sha3uncles","AddressHashBox","beneficiaryAddress","NumberBox","gasLimit","GasUsedValueBox","gasUsed","limit","DifficultyBox","difficulty","ExtraData","autoHeight","DecodedHexData","data","extraData","mixHash","HexData","logsBloom"],"mappings":"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","file":"68abc4cda1536e0ec7b2.bundle.js","sourcesContent":["import * as React from \"react\";\nimport { HashLinkValueBox } from \"../HashLinkValueBox\";\nimport { ITheme } from \"../../theme/ITheme\";\n\ninterface IBlockHashBoxProps {\n    children: string;\n    linkTo?: string;\n}\n\nexport class BlockHashBox extends React.Component<IBlockHashBoxProps> {\n    render() {\n        let { children, linkTo } = this.props;\n        return (\n            <HashLinkValueBox\n                colors={(theme: ITheme) => ({\n                    background: theme.colors.blockColorCode,\n                    text: theme.colors.blockBoxText\n                })}\n                linkTo={linkTo}\n            >\n                { children }\n            </HashLinkValueBox>\n        );\n    }\n}\n","import * as React from \"react\";\nimport { HashLinkValueBox, IHashLinkValueBoxProps } from \"../HashLinkValueBox\";\nimport { ITheme } from \"../../theme/ITheme\";\n\ninterface IParentHashBoxProps {\n    linkTo?: IHashLinkValueBoxProps[\"linkTo\"];\n    children: string;\n}\n\nexport const ParentHashBox: React.StatelessComponent<IParentHashBoxProps> = ({ children, linkTo }) => (\n    <HashLinkValueBox\n        colors={(theme: ITheme) => ({\n            background: theme.colors.parentHashBoxBg,\n            text: theme.colors.parentHashBoxText\n        })}\n        linkTo={linkTo}\n    >\n        { children }\n    </HashLinkValueBox>\n);\n","import * as React from \"react\";\r\nimport { NumberFormatter } from \"../util/internal/locale/NumberFormatter\";\r\n\r\nexport interface IByteSizeProps {\r\n    children: number;\r\n    locale: string;\r\n    /** Localized string: (e.g. \"%d bytes\") */\r\n    format: string;\r\n}\r\n\r\n/** Formats numbers that represent data sizes (in bytes) */\r\nexport class ByteSize extends React.Component<IByteSizeProps> {\r\n    render() {\r\n        return (\r\n            this.props.format.replace(/%d/, new NumberFormatter().format(this.props.children, this.props.locale))\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\nimport { ValueBox } from \"@alethio/ui/lib/layout/content/box/ValueBox\";\nimport { ByteSize } from \"@alethio/ui/lib/data/ByteSize\";\n\nexport interface IBlockSizeBoxProps {\n    bytes: number;\n    locale: string;\n    translations: {\n        bytes: string;\n    };\n}\n\nexport const BlockSizeBox: React.StatelessComponent<IBlockSizeBoxProps> = ({ bytes, locale, translations }) => (\n    <ValueBox><ByteSize format={\"%d \" + translations.bytes} locale={locale}>{bytes}</ByteSize></ValueBox>\n);\n","import * as React from \"react\";\nimport { ValueBox, IValueBoxProps } from \"@alethio/ui/lib/layout/content/box/ValueBox\";\nimport { Number } from \"@alethio/ui/lib/data/Number\";\nimport { ITheme } from \"../../theme/ITheme\";\n\nexport interface IUnclesCountBoxProps {\n    children: number;\n    locale: string;\n    variant?: IValueBoxProps[\"variant\"];\n}\n\nexport class UnclesCountBox extends React.Component<IUnclesCountBoxProps> {\n    render() {\n        return (\n            <ValueBox\n                colors={(theme: ITheme) => ({\n                    background: theme.colors.unclesBoxBg,\n                    text: theme.colors.unclesBoxText,\n                    border: theme.colors.unclesBoxBorder\n                })}\n                variant={this.props.variant}\n            >\n                <Number locale={this.props.locale} value={this.props.children} />\n            </ValueBox>\n        );\n    }\n}\n","import * as React from \"react\";\nimport { LayoutRow } from \"@alethio/ui/lib/layout/content/LayoutRow\";\nimport { LayoutRowItem } from \"@alethio/ui/lib/layout/content/LayoutRowItem\";\nimport { Label } from \"@alethio/ui/lib/data/Label\";\nimport { NumberBox } from \"@alethio/ui/lib/data/box/NumberBox\";\nimport { GasUsedValueBox } from \"@alethio/ui/lib/data/box/GasUsedValueBox\";\nimport { DifficultyBox } from \"@alethio/ui/lib/data/box/DifficultyBox\";\nimport { DecodedHexData } from \"@alethio/ui/lib/data/hex/DecodedHexData\";\nimport { HexData } from \"@alethio/ui/lib/data/hex/HexData\";\nimport { HashValueBox } from \"@alethio/ui/lib/data/box/HashValueBox\";\nimport { LayoutSection } from \"@alethio/ui/lib/layout/content/LayoutSection\";\nimport { BlockNumberBox } from \"@alethio/explorer-ui/lib/box/block/BlockNumberBox\";\nimport { TimeElapsedBox } from \"app/shared/component/TimeElapsedBox\";\nimport { BlockHashBox } from \"@alethio/explorer-ui/lib/box/block/BlockHashBox\";\nimport { ParentHashBox } from \"@alethio/explorer-ui/lib/box/block/ParentHashBox\";\nimport { BlockSizeBox } from \"@alethio/explorer-ui/lib/box/block/BlockSizeBox\";\nimport { AddressHashBox } from \"@alethio/explorer-ui/lib/box/account/AddressHashBox\";\nimport { UncleHashBox } from \"@alethio/explorer-ui/lib/box/uncle/UncleHashBox\";\nimport { UnclesCountBox } from \"@alethio/explorer-ui/lib/box/block/UnclesCountBox\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { IBlockDetails } from \"app/eth-lite/data/block/details/IBlockDetails\";\nimport { BlockDetailsSlotType } from \"./BlockDetailsSlotType\";\n\nexport interface IBlockDetailsProps {\n    blockDetails: IBlockDetails;\n    translation: ITranslation;\n    locale: string;\n    slots: Record<BlockDetailsSlotType, JSX.Element[]>;\n}\n\nexport class BlockDetails extends React.PureComponent<IBlockDetailsProps> {\n    render() {\n        let { translation: tr, blockDetails: block, slots, locale } = this.props;\n\n        return <>\n            <LayoutSection useWrapper>\n                <LayoutRow minWidth={900}>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.blockNumber.label\")}</Label>\n                        <BlockNumberBox noLink>{block.id}</BlockNumberBox>\n                    </LayoutRowItem>\n                    <LayoutRowItem>\n                        { block.creationTime ?\n                        <>\n                        <Label>{tr.get(\"blockView.content.blockCreationTime.label\")}</Label>\n                        <TimeElapsedBox timestamp={block.creationTime}\n                            translation={tr}\n                            locale={locale} />\n                        </>\n                        : null }\n                        { slots[BlockDetailsSlotType.Confirmations] }\n                    </LayoutRowItem>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.uncles.label\")}</Label>\n                        <UnclesCountBox locale={locale}>{block.uncles.length}</UnclesCountBox>\n                    </LayoutRowItem>\n                </LayoutRow>\n                <LayoutRow minWidth={760}>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"general.hash\")}</Label>\n                        <BlockHashBox>{block.hash}</BlockHashBox>\n                    </LayoutRowItem>\n                    {block.parentHash ?\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.parentHash.label\")}</Label>\n                        <ParentHashBox\n                            linkTo={block.parentId !== void 0 ?\n                                `page://aleth.io/block?blockNumber=${block.parentId}` :\n                                void 0}\n                        >\n                            {block.parentHash}\n                        </ParentHashBox>\n                    </LayoutRowItem> : null }\n                </LayoutRow>\n                { block.uncles.length ?\n                <LayoutRow>\n                    <LayoutRowItem fullRow>\n                        <Label>{tr.get(\"blockView.content.uncles.label\")}</Label>\n                        {block.uncles.map((uncleHash, idx) => (\n                            <UncleHashBox key={uncleHash}\n                                linkTo={`page://aleth.io/uncle?blockNumber=${block.id}&uncleIndex=${idx}`}\n                            >\n                                {uncleHash}\n                            </UncleHashBox>\n                        ))}\n                    </LayoutRowItem>\n                </LayoutRow>\n                : null }\n                { block.nonce ?\n                <LayoutRow minWidth={710}>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"general.nonce\")}</Label>\n                        <HashValueBox>{block.nonce}</HashValueBox>\n                    </LayoutRowItem>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.blockSize.label\")}</Label>\n                        <BlockSizeBox bytes={block.byteSize} locale={locale} translations={{\n                            bytes: tr.get(\"general.bytes\")\n                        }} />\n                    </LayoutRowItem>\n                </LayoutRow>\n                : null }\n            </LayoutSection>\n            { slots[BlockDetailsSlotType.Txs]}\n            <LayoutSection useWrapper>\n                <LayoutRow minWidth={760}>\n                    { block.sha3uncles ?\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.sha3Uncles.label\")}</Label>\n                        <HashValueBox>{block.sha3uncles}</HashValueBox>\n                    </LayoutRowItem>\n                    : null }\n                </LayoutRow>\n                <LayoutRow>\n                    <LayoutRowItem fullRow>\n                        <Label>{tr.get(\"blockView.content.beneficiary.label\")}</Label>\n                        <AddressHashBox>{block.beneficiaryAddress}</AddressHashBox>\n                    </LayoutRowItem>\n                </LayoutRow>\n                <LayoutRow minWidth={760}>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"general.gasLimit\")}</Label>\n                        <NumberBox value={block.gasLimit} locale={locale} />\n                    </LayoutRowItem>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"general.gasUsed\")}</Label>\n                        <GasUsedValueBox value={block.gasUsed} limit={block.gasLimit} locale={locale} />\n                    </LayoutRowItem>\n                </LayoutRow>\n                <LayoutRow>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.difficulty.label\")}</Label>\n                        <DifficultyBox value={block.difficulty} locale={locale} />\n                    </LayoutRowItem>\n                </LayoutRow>\n                { slots && slots[BlockDetailsSlotType.ExtraData] ||\n                <LayoutRow>\n                    <LayoutRowItem autoHeight>\n                        <Label>{tr.get(\"blockView.content.extraData.label\")}</Label>\n                        <DecodedHexData data={block.extraData} />\n                    </LayoutRowItem>\n                </LayoutRow> }\n                { block.mixHash ?\n                <LayoutRow minWidth={760}>\n                    <LayoutRowItem>\n                        <Label>{tr.get(\"blockView.content.mixHash.label\")}</Label>\n                        <HashValueBox>{block.mixHash}</HashValueBox>\n                    </LayoutRowItem>\n                </LayoutRow>\n                : null }\n            </LayoutSection>\n            <LayoutSection useWrapper>\n                <LayoutRow>\n                    <LayoutRowItem fullRow autoHeight>\n                        <Label>{tr.get(\"blockView.content.logsBloom.label\")}</Label>\n                        <HexData data={block.logsBloom} />\n                    </LayoutRowItem>\n                </LayoutRow>\n            </LayoutSection>\n        </>;\n    }\n}\n"],"sourceRoot":""}