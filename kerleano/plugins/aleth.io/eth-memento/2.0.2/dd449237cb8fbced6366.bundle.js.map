{"version":3,"sources":["webpack://__aleth_io__ethMemento/../node_modules/@alethio/explorer-ui/src/box/block/BlockHashBox.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/explorer-ui/src/box/block/ParentHashBox.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/data/ByteSize.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/explorer-ui/src/box/block/BlockSizeBox.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/explorer-ui/src/box/block/UnclesCountBox.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/data/vis/stackBar/StackBar.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/data/vis/stackBar/internal/StackBarBubble.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/data/vis/stackBar/StackBarTooltipText.tsx","webpack://__aleth_io__ethMemento/./app/shared/module/block/blockBasic/blockSummary/TooltipTxCount.tsx","webpack://__aleth_io__ethMemento/./app/shared/module/block/blockBasic/blockSummary/BlockSummaryTooltipText.tsx","webpack://__aleth_io__ethMemento/./app/helper/roundPercentages.ts","webpack://__aleth_io__ethMemento/./app/shared/module/block/blockBasic/blockSummary/BlockSummary.tsx","webpack://__aleth_io__ethMemento/./app/shared/module/block/blockBasic/BlockBasic.tsx","webpack://__aleth_io__ethMemento/./app/shared/data/tx/lite/isFullTxLite.ts"],"names":["BlockHashBox_BlockHashBox","external_react_","[object Object]","children","linkTo","this","props","HashLinkValueBox","colors","theme","background","blockColorCode","text","blockBoxText","ParentHashBox","parentHashBoxBg","parentHashBoxText","ByteSize_ByteSize","format","replace","NumberFormatter","locale","BlockSizeBox","bytes","translations","ValueBox","UnclesCountBox_UnclesCountBox","unclesBoxBg","unclesBoxText","border","unclesBoxBorder","variant","data_Number","value","StackBarItemFill","Object","styled_components","withConfig","displayName","componentId","color","StackBarItem","percent","height","selected","StackBar_$StackBar","$StackBar","className","items","defaultBarHeight","maxBarHeight","minBarHeight","totalCount","reduce","acc","current","count","ref","wrapperEl","map","item","idx","selectedItem","onMouseEnter","selectItem","onMouseLeave","unselectItem","key","TooltipRegular","placement","content","tooltip","referenceElement","tslib_es6","external_mobx_","external_mobx_react_","StackBar","defaultProps","StackBarBubble_$StackBarBubble","SIZE","StackBarBubble","StackBarTooltipTextRoot","div","StackBarTooltipText_StackBarTooltipText","bubbleColor","TooltipCountRoot","lib_styled_components","span","tooltipTxCountText","TooltipTxCount","translation","get","BlockSummaryTooltipText_BlockSummaryTooltipText","label","roundPercentages","newItems","originalItem","Math","floor","flooredTotal","remainder","i","sortedNewItems","sort","a","b","some","BlockSummary_$BlockSummary","buildData","Map","set","TxType","Value","txTypeValue","Create","txTypeCreate","Call","txTypeCall","countPerType","transactions","forEach","tx","type","values","dataItems","roundedItems","keys","roundedItem","Error","BlockSummary","__webpack_require__","d","__webpack_exports__","BlockBasic_BlockBasic","tr","blockDetails","block","slots","LayoutSection","useWrapper","LayoutRow","minWidth","LayoutRowItem","Label","BlockNumberBox","noLink","id","creationTime","TimeElapsedBox","timestamp","BlockBasicSlotType","Confirmations","uncles","length","inconsistentWarning","style","width","textAlign","ErrorIcon","hash","parentHash","parentId","fullRow","uncleHash","UncleHashBox","HashValueBox","nonce","byteSize","isFullTxLite","autoHeight","maxWidth","flex","txLite","undefined"],"mappings":"wUASaA,UAAqBC,EAAA,aAC9BC,SACI,IAAIC,SAAEA,EAAQC,OAAEA,GAAWC,KAAKC,MAChC,OACIL,EAAA,iBAACM,EAAA,MACGC,OAASC,KACLC,WAAYD,EAAMD,OAAOG,eACzBC,KAAMH,EAAMD,OAAOK,eAEvBT,OAAQA,GAEND,ICXX,MAAMW,EAA+D,EAAGX,WAAUC,YACrFH,EAAA,iBAACM,EAAA,MACGC,OAASC,KACLC,WAAYD,EAAMD,OAAOO,gBACzBH,KAAMH,EAAMD,OAAOQ,oBAEvBZ,OAAQA,GAEND,yCCNGc,UAAiBhB,EAAA,aAC1BC,SACI,OACIG,KAAKC,MAAMY,OAAOC,QAAQ,MAAM,IAAIC,EAAA,MAAkBF,OAAOb,KAAKC,MAAMH,SAAUE,KAAKC,MAAMe,UCFlG,MAAMC,EAA6D,EAAGC,QAAOF,SAAQG,kBACxFvB,EAAA,iBAACwB,EAAA,KAAQ,KAACxB,EAAA,iBAACgB,GAASC,OAAQ,MAAQM,EAAaD,MAAOF,OAAQA,GAASE,0CCFhEG,UAAuBzB,EAAA,aAChCC,SACI,OACID,EAAA,iBAACwB,EAAA,MACGjB,OAASC,KACLC,WAAYD,EAAMD,OAAOmB,YACzBf,KAAMH,EAAMD,OAAOoB,cACnBC,OAAQpB,EAAMD,OAAOsB,kBAEzBC,QAAS1B,KAAKC,MAAMyB,SAEpB9B,EAAA,iBAAC+B,EAAA,MAAOX,OAAQhB,KAAKC,MAAMe,OAAQY,MAAO5B,KAAKC,MAAMH,6FCUrE,MAAM+B,EAAmBC,OAAAC,EAAA,KAAAD,CAAsC,OAAME,YAAAC,YAAA,mBAAAC,YAAA;wBAC7C,EAAEC,WAAWA;;;EAKrC,MAAMC,EAAeN,OAAAC,EAAA,KAAAD,CAAkC,OAAME,YAAAC,YAAA,eAAAC,YAAA;aAChD,EAAEG,aAAaA;cACdpC,GAASA,EAAMqC;;;MAGvBrC,GAASA,EAAMsC,SAAWR,EAAA;QACxBF;;;MAGAE,EAAA;sBACcF;;;;qBAIDA;;;EAMrB,IAAMW,QAAAC,UAAkB7C,EAAA,aAKpBC,SACI,IAAI6C,UAAEA,EAASC,MAAEA,EAAKC,iBAAEA,EAAgBC,aAAEA,EAAYC,aAAEA,GAAiB9C,KAAKC,MAE9E,IAAI8C,EAAaJ,EAAMK,OAAO,CAACC,EAAKC,IAAYD,EAAMC,EAAQC,MAAO,GACrE,OACIvD,EAAA,wBAAK8C,UAAWA,EAAWU,IAAKA,GAAOpD,KAAKqD,UAAYD,GACtDT,EAAMW,IAAI,CAACC,EAAMC,KACf,IAAInB,EAAUkB,EAAKJ,MAAQJ,EAAa,IACxC,IAAIT,EAAStC,KAAKyD,aACdF,IAASvD,KAAKyD,aAAeZ,EAAgBC,EAC7CF,EAEJ,OAAOhD,EAAA,iBAACwC,GACJG,SAAUgB,IAASvD,KAAKyD,aACxBpB,QAASA,EACTC,OAAQA,EACRoB,aAAc,IAAM1D,KAAK2D,WAAWJ,GACpCK,aAAc,IAAM5D,KAAK6D,aAAaN,GACtCO,IAAKN,GAEL5D,EAAA,iBAACmE,EAAA,MAAeC,UAAU,QAAQC,QAASV,EAAKW,QAC5CC,iBAAkB,IAAMnE,KAAKqD,WAC7BzD,EAAA,iBAACiC,GAAiBM,MAAOoB,EAAKpB,aAQ1CtC,WAAW0D,GACfvD,KAAKyD,aAAeF,EAGhB1D,aAAa0D,GACbvD,KAAKyD,eAAiBF,IACtBvD,KAAKyD,kBAAe,KAtC5BW,EAAA,MADCC,EAAA,cAAWjB,wCAFVZ,EAAS4B,EAAA,MADdE,EAAA,aACK9B,GA+CC,MAAM+B,EAAWzC,OAAAC,EAAA,KAAAD,CAAOU,GAAUR,YAAAC,YAAA,WAAAC,YAAA;cAC3BjC,GAASA,EAAM4C;;;;;EAM7B0B,EAASC,cACL5B,iBAAkB,GAClBE,aAAc,GACdD,aAAc,0CC3GZ4B,UAAwB7E,EAAA,aAC1BC,SACI,OACID,EAAA,wBAAK8C,UAAW1C,KAAKC,MAAMyC,aAKvC,MAAMgC,EAAO,EAGN,MAAMC,EAAiB7C,OAAAC,EAAA,KAAAD,CAAO2C,GAAgBzC,YAAAC,YAAA,iBAAAC,YAAA;aAHxC;cAAA;qBAMQwC;mBACFA;wBACKzE,GAASA,EAAMkC;;;EChBvC,MAAMyC,EAA0B7C,EAAA,KAAO8C,IAAG7C,YAAAC,YAAA,0BAAAC,YAAA;;;;;;;;QAU7B4C,UAA4BlF,EAAA,aACrCC,SACI,OACID,EAAA,iBAACgF,EAAuB,KACpBhF,EAAA,6BACIA,EAAA,iBAAC+E,GAAexC,MAAOnC,KAAKC,MAAM8E,eAEpC/E,KAAKC,MAAMH,WChB7B,MAAMkF,EAAmBC,EAAA,KAAOC,KAAIlD,YAAAC,YAAA,mBAAAC,YAAA;aACvBjC,GAASA,EAAMG,MAAMD,OAAOgF;EAGlC,MAAMC,EAAoE,EAAGjC,QAAOkC,iBACvFzF,EAAA,iBAACoF,EAAgB,KACZK,EAAYC,IAAI,4CACZxE,QAAQ,KAAM,GAAKqC,UCHnBoC,UAAgC3F,EAAA,aACzCC,SACI,OACID,EAAA,iBAACkF,GAAoBC,YAAa/E,KAAKC,MAAMkC,OACzCvC,EAAA,6BACKI,KAAKC,MAAMuF,OAEhB5F,EAAA,6BACKI,KAAKC,MAAMoC,aAEhBzC,EAAA,iBAACwF,GAAejC,MAAOnD,KAAKC,MAAMkD,MAAOkC,YAAarF,KAAKC,MAAMoF,gBCR1E,SAASI,EAAkC9C,GAC9C,IAAI+C,EAA6B/C,EAAMW,IAAIC,KACvCoC,aAAcpC,EACdlB,QAASuD,KAAKC,MAAMtC,EAAKlB,YAG7B,IAAIyD,EACJ,IAAIC,EAAY,IADGL,EAAS1C,OAAO,CAACC,EAAK+C,IAAM/C,EAAM+C,EAAE3D,QAAS,GAKhE,IAAI4D,MAAqBP,GACpBQ,KAAK,CAACC,EAAGC,IAAOA,EAAET,aAAatD,QAAU+D,EAAE/D,SAAY8D,EAAER,aAAatD,QAAU8D,EAAE9D,UAGxEgE,KAAK9C,IAChB,GAAIwC,KAAe,EACf,OAAO,EAGXxC,EAAKlB,SAAW,EAChB,OAAO,IAGX,OAAOqD,QCvBLY,UAAsB1G,EAAA,iBACxBC,SACI,OACID,EAAA,iBAAC2E,GAAS3B,iBAAkB,EAAGC,aAAc,GAAIC,aAAc,EAAGH,MAAO3C,KAAKuG,cAI9E1G,YACJ,MAAMM,GAAS,IAAIqG,KACdC,IAAIC,EAAA,KAAOC,MAAO3G,KAAKC,MAAMG,MAAOD,OAAOyG,aAC3CH,IAAIC,EAAA,KAAOG,OAAQ7G,KAAKC,MAAMG,MAAOD,OAAO2G,cAC5CL,IAAIC,EAAA,KAAOK,KAAM/G,KAAKC,MAAMG,MAAOD,OAAO6G,YAE/C,IAAIC,EAAe,IAAIT,IACvBxG,KAAKC,MAAMiH,aAAaC,QAAQC,IAC5BH,EAAaR,IAAIW,EAAGC,MAAOJ,EAAa3B,IAAI8B,EAAGC,OAAS,GAAK,KAEjE,IAAItE,MAAiBkE,EAAaK,UAAUtE,OAAO,CAACC,EAAKC,IAAYD,EAAMC,EAAS,GAEpF,IAAIqE,EAUJ,IAAIC,EAEJ,OAFmB/B,MAVCwB,EAAaQ,QAAQvB,OAAO5C,IAAI+D,IAChD,IAAIlE,EAAQ8D,EAAa3B,IAAI+B,GAC7B,OACIA,OACAlE,QACAd,QAASc,EAAQJ,EAAa,QAOlBO,IAAIoE,IACpB,IAAIL,EAAOK,EAAY/B,aAAa0B,KACpC,IAAIlF,EAAQhC,EAAOmF,IAAI+B,GACvB,IAAKlF,EACD,MAAM,IAAIwF,0BAA0BjB,EAAA,KAAOW,4BAE/C,IAAI7B,EAAQxF,KAAKC,MAAMoF,YAAYC,IAAI,mBAAqBoB,EAAA,KAAOW,IACnE,IAAIlE,EAAQuE,EAAY/B,aAAaxC,MACrC,IAAId,EAAUqF,EAAYrF,QAE1B,OACIc,QACAhB,QACAqD,QACAtB,QACItE,EAAA,iBAAC2F,GACGpC,MAAOA,EACPhB,MAAOA,EACPqD,MAAOA,EACPnD,QAASA,EACTgD,YAAarF,KAAKC,MAAMoF,kBAOzC,MAAMuC,EAAe9F,OAAAmD,EAAA,KAAAnD,CAAUwE,mBC1EtCuB,EAAAC,EAAAC,EAAA,+BAAAC,UA6BaA,UAAmBpI,EAAA,iBAC5BC,SACI,IAAMwF,YAAa4C,EAAIC,aAAcC,EAAKC,MAAEA,EAAKpH,OAAEA,GAAWhB,KAAKC,MAEnE,OAAOL,EAAA,iBAACyI,EAAA,MAAcC,YAAU,GAC5B1I,EAAA,iBAAC2I,EAAA,MAAUC,SAAU,KACjB5I,EAAA,iBAAC6I,EAAA,KAAa,KACV7I,EAAA,iBAAC8I,EAAA,KAAK,KAAET,EAAG3C,IAAI,wCACf1F,EAAA,iBAAC+I,EAAA,MAAeC,QAAM,GAAET,EAAMU,KAElCjJ,EAAA,iBAAC6I,EAAA,KAAa,KACTN,EAAMW,aACPlJ,EAAA,iBAAAA,EAAA,iBACAA,EAAA,iBAAC8I,EAAA,KAAK,KAAET,EAAG3C,IAAI,8CACf1F,EAAA,iBAACmJ,EAAA,MAAeC,UAAWb,EAAMW,aAC7BzD,YAAa4C,EACbjH,OAAQA,KAEV,KACAoH,EAAMa,EAAA,KAAmBC,gBAE/BtJ,EAAA,iBAAC6I,EAAA,KAAa,KACV7I,EAAA,iBAAC8I,EAAA,KAAK,KAAET,EAAG3C,IAAI,mCACf1F,EAAA,iBAACyB,GAAeL,OAAQA,GAASmH,EAAMgB,OAAOC,UAGtDxJ,EAAA,iBAAC2I,EAAA,MAAUC,SAAU,KACjB5I,EAAA,iBAAC6I,EAAA,KAAa,KACV7I,EAAA,iBAAC8I,EAAA,KAAK,KAAET,EAAG3C,IAAI,iBACb6C,EAAMkB,oBACJzJ,EAAA,iBAACmE,EAAA,MAAeE,QACZrE,EAAA,wBAAK0J,OAAQC,MAAO,IAAKC,UAAW,WAC9BvB,EAAG3C,IAAI,gDAGb1F,EAAA,iBAAC6J,EAAA,KAAS,OAEhB,KACF7J,EAAA,iBAACD,EAAY,KAAEwI,EAAMuB,OAExBvB,EAAMwB,WACP/J,EAAA,iBAAC6I,EAAA,KAAa,KACV7I,EAAA,iBAAC8I,EAAA,KAAK,KAAET,EAAG3C,IAAI,uCACf1F,EAAA,iBAACa,GACGV,OAAQoI,EAAMyB,8CAAgDzB,EAAMyB,gBAAa,GAEhFzB,EAAMwB,aAEI,MAErBxB,EAAMgB,OAAOC,OACfxJ,EAAA,iBAAC2I,EAAA,KAAS,KACN3I,EAAA,iBAAC6I,EAAA,MAAcoB,SAAO,GAClBjK,EAAA,iBAAC8I,EAAA,KAAK,KAAET,EAAG3C,IAAI,mCACd6C,EAAMgB,OAAO7F,IAAIwG,GACdlK,EAAA,iBAACmK,EAAA,MAAajG,IAAKgG,EAAW/J,0CAA2C+J,KACpEA,MAKf,KACFlK,EAAA,iBAAC2I,EAAA,MAAUC,SAAU,KACjB5I,EAAA,iBAAC6I,EAAA,KAAa,KACV7I,EAAA,iBAAC8I,EAAA,KAAK,KAAET,EAAG3C,IAAI,kBACf1F,EAAA,iBAACoK,EAAA,KAAY,KAAE7B,EAAM8B,QAEzBrK,EAAA,iBAAC6I,EAAA,KAAa,KACV7I,EAAA,iBAAC8I,EAAA,KAAK,KAAET,EAAG3C,IAAI,sCACf1F,EAAA,iBAACqB,GAAaC,MAAOiH,EAAM+B,SAAUlJ,OAAQA,EAAQG,cACjDD,MAAO+G,EAAG3C,IAAI,sBAIxB6C,EAAMjB,aAAakC,QAAUtH,OAAAqI,EAAA,KAAArI,CAAaqG,EAAMjB,aAAa,IAC/DtH,EAAA,iBAAC2I,EAAA,KAAS,KACN3I,EAAA,iBAAC6I,EAAA,MAAcoB,SAAO,EAACO,YAAU,GAC7BxK,EAAA,iBAAC8I,EAAA,KAAK,KAAET,EAAG3C,IAAI,yCACf1F,EAAA,wBAAK0J,OAAQe,SAAU,IAAKC,KAAM,aAC9B1K,EAAA,iBAACgI,GAAaV,aAAciB,EAAMjB,aAA+B7B,YAAa4C,OAIxF,6CC7GdJ,EAAAC,EAAAC,EAAA,sBAAAoC,IAAO,SAASA,EAAaI,GACzB,YAAwCC,IAAhCD,EAAuBlD","file":"dd449237cb8fbced6366.bundle.js","sourcesContent":["import * as React from \"react\";\nimport { HashLinkValueBox } from \"../HashLinkValueBox\";\nimport { ITheme } from \"../../theme/ITheme\";\n\ninterface IBlockHashBoxProps {\n    children: string;\n    linkTo?: string;\n}\n\nexport class BlockHashBox extends React.Component<IBlockHashBoxProps> {\n    render() {\n        let { children, linkTo } = this.props;\n        return (\n            <HashLinkValueBox\n                colors={(theme: ITheme) => ({\n                    background: theme.colors.blockColorCode,\n                    text: theme.colors.blockBoxText\n                })}\n                linkTo={linkTo}\n            >\n                { children }\n            </HashLinkValueBox>\n        );\n    }\n}\n","import * as React from \"react\";\nimport { HashLinkValueBox, IHashLinkValueBoxProps } from \"../HashLinkValueBox\";\nimport { ITheme } from \"../../theme/ITheme\";\n\ninterface IParentHashBoxProps {\n    linkTo?: IHashLinkValueBoxProps[\"linkTo\"];\n    children: string;\n}\n\nexport const ParentHashBox: React.StatelessComponent<IParentHashBoxProps> = ({ children, linkTo }) => (\n    <HashLinkValueBox\n        colors={(theme: ITheme) => ({\n            background: theme.colors.parentHashBoxBg,\n            text: theme.colors.parentHashBoxText\n        })}\n        linkTo={linkTo}\n    >\n        { children }\n    </HashLinkValueBox>\n);\n","import * as React from \"react\";\r\nimport { NumberFormatter } from \"../util/internal/locale/NumberFormatter\";\r\n\r\nexport interface IByteSizeProps {\r\n    children: number;\r\n    locale: string;\r\n    /** Localized string: (e.g. \"%d bytes\") */\r\n    format: string;\r\n}\r\n\r\n/** Formats numbers that represent data sizes (in bytes) */\r\nexport class ByteSize extends React.Component<IByteSizeProps> {\r\n    render() {\r\n        return (\r\n            this.props.format.replace(/%d/, new NumberFormatter().format(this.props.children, this.props.locale))\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\nimport { ValueBox } from \"@alethio/ui/lib/layout/content/box/ValueBox\";\nimport { ByteSize } from \"@alethio/ui/lib/data/ByteSize\";\n\nexport interface IBlockSizeBoxProps {\n    bytes: number;\n    locale: string;\n    translations: {\n        bytes: string;\n    };\n}\n\nexport const BlockSizeBox: React.StatelessComponent<IBlockSizeBoxProps> = ({ bytes, locale, translations }) => (\n    <ValueBox><ByteSize format={\"%d \" + translations.bytes} locale={locale}>{bytes}</ByteSize></ValueBox>\n);\n","import * as React from \"react\";\nimport { ValueBox, IValueBoxProps } from \"@alethio/ui/lib/layout/content/box/ValueBox\";\nimport { Number } from \"@alethio/ui/lib/data/Number\";\nimport { ITheme } from \"../../theme/ITheme\";\n\nexport interface IUnclesCountBoxProps {\n    children: number;\n    locale: string;\n    variant?: IValueBoxProps[\"variant\"];\n}\n\nexport class UnclesCountBox extends React.Component<IUnclesCountBoxProps> {\n    render() {\n        return (\n            <ValueBox\n                colors={(theme: ITheme) => ({\n                    background: theme.colors.unclesBoxBg,\n                    text: theme.colors.unclesBoxText,\n                    border: theme.colors.unclesBoxBorder\n                })}\n                variant={this.props.variant}\n            >\n                <Number locale={this.props.locale} value={this.props.children} />\n            </ValueBox>\n        );\n    }\n}\n","import styled, { css } from \"../../../styled-components\";\r\nimport * as React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport { observable } from \"mobx\";\r\nimport { TooltipRegular } from \"../../../overlay/tooltip/TooltipRegular\";\r\n\r\nexport interface IStackBarProps {\r\n    items: IStackBarItem[];\r\n    className?: string;\r\n    defaultBarHeight?: number;\r\n    maxBarHeight?: number;\r\n    minBarHeight?: number;\r\n}\r\n\r\nexport interface IStackBarItem {\r\n    color: string;\r\n    count: number;\r\n    label: string;\r\n    tooltip: React.ReactElement<{}>;\r\n}\r\n\r\ninterface IStackBarItemFillProps {\r\n    color: string;\r\n    className?: string;\r\n}\r\n\r\ninterface IStackBarItemProps {\r\n    percent: number;\r\n    height: number;\r\n    selected: boolean;\r\n}\r\n\r\nconst StackBarItemFill = styled<IStackBarItemFillProps, \"div\">(\"div\")`\r\n    background-color: ${({color}) => color};\r\n    width: 100%;\r\n    height: 100%;\r\n`;\r\n\r\nconst StackBarItem = styled<IStackBarItemProps, \"div\">(\"div\")`\r\n    width: ${({percent}) => percent}%;\r\n    height: ${props => props.height}px;\r\n    transition: height .2s ease-out;\r\n\r\n    ${props => props.selected ? css`\r\n    > ${StackBarItemFill} {\r\n        border-radius: 2px;\r\n    }\r\n    ` : css`\r\n    &:first-child > ${StackBarItemFill} {\r\n        border-radius: 2px 0 0 2px;\r\n    }\r\n\r\n    &:last-child > ${StackBarItemFill} {\r\n        border-radius: 0 2px 2px 0;\r\n    }` }\r\n`;\r\n\r\n@observer\r\nclass $StackBar extends React.Component<IStackBarProps> {\r\n    private wrapperEl: HTMLElement;\r\n    @observable.ref\r\n    private selectedItem: IStackBarItem | undefined;\r\n\r\n    render() {\r\n        let { className, items, defaultBarHeight, maxBarHeight, minBarHeight } = this.props;\r\n\r\n        let totalCount = items.reduce((acc, current) => acc + current.count, 0);\r\n        return (\r\n            <div className={className} ref={ref => this.wrapperEl = ref!}>\r\n            { items.map((item, idx) => {\r\n                let percent = item.count / totalCount * 100;\r\n                let height = this.selectedItem ? (\r\n                    item === this.selectedItem ? maxBarHeight! : minBarHeight!\r\n                ) : defaultBarHeight!;\r\n\r\n                return <StackBarItem\r\n                    selected={item === this.selectedItem}\r\n                    percent={percent}\r\n                    height={height}\r\n                    onMouseEnter={() => this.selectItem(item)}\r\n                    onMouseLeave={() => this.unselectItem(item)}\r\n                    key={idx}\r\n                >\r\n                    <TooltipRegular placement=\"right\" content={item.tooltip}\r\n                        referenceElement={() => this.wrapperEl}>\r\n                        <StackBarItemFill color={item.color} />\r\n                    </TooltipRegular>\r\n                </StackBarItem>;\r\n            }) }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private selectItem(item: IStackBarItem) {\r\n        this.selectedItem = item;\r\n    }\r\n\r\n    private unselectItem(item: IStackBarItem) {\r\n        if (this.selectedItem === item) {\r\n            this.selectedItem = void 0;\r\n        }\r\n    }\r\n}\r\n\r\n/** Like a pie-chart, but disposed in a horizontal layout, similar to a progress bar */\r\nexport const StackBar = styled($StackBar)`\r\n    height: ${props => props.maxBarHeight!}px;\r\n    display: flex;\r\n    align-items: center;\r\n    box-sizing: border-box;\r\n    width: 100%;\r\n`;\r\nStackBar.defaultProps = {\r\n    defaultBarHeight: 28,\r\n    minBarHeight: 28,\r\n    maxBarHeight: 28\r\n};\r\n","import * as React from \"react\";\r\nimport styled from \"../../../../styled-components\";\r\n\r\nexport interface IStackBarBubbleProps {\r\n    color: string;\r\n    className?: string;\r\n}\r\n\r\nclass $StackBarBubble extends React.Component<IStackBarBubbleProps> {\r\n    render() {\r\n        return (\r\n            <div className={this.props.className}></div>\r\n        );\r\n    }\r\n}\r\n\r\nconst SIZE = 8;\r\n\r\n/** @internal */\r\nexport const StackBarBubble = styled($StackBarBubble)`\r\n    width: ${SIZE}px;\r\n    height: ${SIZE}px;\r\n    border-radius: ${SIZE / 2}px;\r\n    margin-top: -${SIZE / 2}px;\r\n    background-color: ${props => props.color};\r\n    vertical-align: middle;\r\n    display: inline-block;\r\n`;\r\n","import * as React from \"react\";\r\nimport { StackBarBubble } from \"./internal/StackBarBubble\";\r\nimport styled from \"../../../styled-components\";\r\n\r\nexport interface IStackBarTooltipTextProps {\r\n    bubbleColor: string;\r\n}\r\n\r\nconst StackBarTooltipTextRoot = styled.div`\r\n    > span {\r\n        padding-left: 8px;\r\n    }\r\n\r\n    > span:first-child {\r\n        padding-left: 0;\r\n    }\r\n`;\r\n\r\nexport class StackBarTooltipText extends React.Component<IStackBarTooltipTextProps> {\r\n    render() {\r\n        return (\r\n            <StackBarTooltipTextRoot>\r\n                <span>\r\n                    <StackBarBubble color={this.props.bubbleColor} />\r\n                </span>\r\n                { this.props.children }\r\n            </StackBarTooltipTextRoot>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { ITranslation } from \"plugin-api/ITranslation\";\r\nimport styled from \"@alethio/explorer-ui/lib/styled-components\";\r\n\r\ninterface ITooltipTxCountBoxProps {\r\n    count: number;\r\n    translation: ITranslation;\r\n}\r\n\r\nconst TooltipCountRoot = styled.span`\r\n    color: ${props => props.theme.colors.tooltipTxCountText};\r\n`;\r\n\r\nexport const TooltipTxCount: React.StatelessComponent<ITooltipTxCountBoxProps> = ({ count, translation }) => (\r\n    <TooltipCountRoot>\r\n        {translation.get(\"blockView.content.blockSummary.txs.label\")\r\n            .replace(/%d/, \"\" + count)}\r\n    </TooltipCountRoot>\r\n);\r\n","import * as React from \"react\";\r\nimport { StackBarTooltipText } from \"@alethio/ui/lib/data/vis/stackBar/StackBarTooltipText\";\r\nimport { ITranslation } from \"plugin-api/ITranslation\";\r\nimport { TooltipTxCount } from \"./TooltipTxCount\";\r\n\r\nexport interface IBlockSummaryTooltipTextProps {\r\n    count: number;\r\n    percent: number;\r\n    color: string;\r\n    label: string;\r\n    translation: ITranslation;\r\n}\r\n\r\nexport class BlockSummaryTooltipText extends React.Component<IBlockSummaryTooltipTextProps> {\r\n    render() {\r\n        return (\r\n            <StackBarTooltipText bubbleColor={this.props.color}>\r\n                <span>\r\n                    {this.props.label}\r\n                </span>\r\n                <span>\r\n                    {this.props.percent}%\r\n                </span>\r\n                <TooltipTxCount count={this.props.count} translation={this.props.translation} />\r\n            </StackBarTooltipText>\r\n        );\r\n    }\r\n}\r\n","interface IItem {\n    percent: number;\n}\n\ninterface IItemResult<T extends IItem> {\n    originalItem: T;\n    percent: number;\n}\n\n/**\n * Takes an array of items with floating point percentages (they must add up to 100 or less)\n * and rounds them up so they result in integer percentages that still add up to 100\n *\n * See https://revs.runtime-revolution.com/getting-100-with-rounded-percentages-273ffa70252b\n */\nexport function roundPercentages<T extends IItem>(items: T[]) {\n    let newItems: IItemResult<T>[] = items.map(item => ({\n        originalItem: item,\n        percent: Math.floor(item.percent)\n    }));\n\n    let flooredTotal = newItems.reduce((acc, i) => acc + i.percent, 0);\n    let remainder = 100 - flooredTotal;\n\n    // Sort by fractional parts desc\n    // We clone the array, but not the items. This way we don't alter the return order, just the percentages\n    let sortedNewItems = [...newItems]\n        .sort((a, b) => (b.originalItem.percent - b.percent) - (a.originalItem.percent - a.percent));\n\n    // Distribute remainder, adding 1 to each item in order, until remainder is 0\n    sortedNewItems.some(item => {\n        if (remainder-- <= 0) {\n            return true;\n        }\n\n        item.percent += 1;\n        return false;\n    });\n\n    return newItems;\n}\n","import * as React from \"react\";\r\nimport { StackBar } from \"@alethio/ui/lib/data/vis/stackBar/StackBar\";\r\nimport { TxType } from \"app/shared/data/tx/TxType\";\r\nimport { ITranslation } from \"plugin-api/ITranslation\";\r\nimport { ITheme } from \"@alethio/explorer-ui/lib/ITheme\";\r\nimport { withTheme } from \"@alethio/explorer-ui/lib/styled-components\";\r\nimport { BlockSummaryTooltipText } from \"./BlockSummaryTooltipText\";\r\nimport { roundPercentages } from \"app/helper/roundPercentages\";\r\nimport { ITxLiteFull } from \"app/shared/data/tx/lite/ITxLiteFull\";\r\n\r\nexport interface IBlockSummaryProps {\r\n    transactions: ITxLiteFull[];\r\n    translation: ITranslation;\r\n    theme?: ITheme;\r\n}\r\n\r\nclass $BlockSummary extends React.PureComponent<IBlockSummaryProps> {\r\n    render() {\r\n        return (\r\n            <StackBar defaultBarHeight={8} maxBarHeight={12} minBarHeight={4} items={this.buildData()} />\r\n        );\r\n    }\r\n\r\n    private buildData() {\r\n        const colors = new Map<TxType, string>()\r\n            .set(TxType.Value, this.props.theme!.colors.txTypeValue)\r\n            .set(TxType.Create, this.props.theme!.colors.txTypeCreate)\r\n            .set(TxType.Call, this.props.theme!.colors.txTypeCall);\r\n\r\n        let countPerType = new Map<TxType, number>();\r\n        this.props.transactions.forEach(tx => {\r\n            countPerType.set(tx.type, (countPerType.get(tx.type) || 0) + 1);\r\n        });\r\n        let totalCount = [...countPerType.values()].reduce((acc, current) => acc + current, 0);\r\n\r\n        let dataItems = [...countPerType.keys()].sort().map(type => {\r\n            let count = countPerType.get(type)!;\r\n            return {\r\n                type,\r\n                count,\r\n                percent: count / totalCount * 100\r\n            };\r\n        });\r\n\r\n        // Round percentages so that they still add to 100%\r\n        let roundedItems = roundPercentages(dataItems);\r\n\r\n        return roundedItems.map(roundedItem => {\r\n            let type = roundedItem.originalItem.type;\r\n            let color = colors.get(type);\r\n            if (!color) {\r\n                throw new Error(`TransactionType \"${TxType[type]}\" has no color defined`);\r\n            }\r\n            let label = this.props.translation.get(\"general.tx.type.\" + TxType[type]);\r\n            let count = roundedItem.originalItem.count;\r\n            let percent = roundedItem.percent;\r\n\r\n            return {\r\n                count,\r\n                color,\r\n                label,\r\n                tooltip:\r\n                    <BlockSummaryTooltipText\r\n                        count={count}\r\n                        color={color}\r\n                        label={label}\r\n                        percent={percent}\r\n                        translation={this.props.translation}\r\n                    />\r\n            };\r\n        });\r\n    }\r\n}\r\n\r\nexport const BlockSummary = withTheme($BlockSummary);\r\n","import * as React from \"react\";\r\nimport { LayoutRow } from \"@alethio/ui/lib/layout/content/LayoutRow\";\r\nimport { LayoutRowItem } from \"@alethio/ui/lib/layout/content/LayoutRowItem\";\r\nimport { Label } from \"@alethio/ui/lib/data/Label\";\r\nimport { HashValueBox } from \"@alethio/ui/lib/data/box/HashValueBox\";\r\nimport { LayoutSection } from \"@alethio/ui/lib/layout/content/LayoutSection\";\r\nimport { ErrorIcon } from \"@alethio/ui/lib/icon/ErrorIcon\";\r\nimport { TooltipRegular } from \"@alethio/ui/lib/overlay/tooltip/TooltipRegular\";\r\nimport { BlockNumberBox } from \"@alethio/explorer-ui/lib/box/block/BlockNumberBox\";\r\nimport { TimeElapsedBox } from \"app/shared/component/TimeElapsedBox\";\r\nimport { BlockHashBox } from \"@alethio/explorer-ui/lib/box/block/BlockHashBox\";\r\nimport { ParentHashBox } from \"@alethio/explorer-ui/lib/box/block/ParentHashBox\";\r\nimport { BlockSizeBox } from \"@alethio/explorer-ui/lib/box/block/BlockSizeBox\";\r\nimport { UncleHashBox } from \"@alethio/explorer-ui/lib/box/uncle/UncleHashBox\";\r\nimport { UnclesCountBox } from \"@alethio/explorer-ui/lib/box/block/UnclesCountBox\";\r\nimport { ITranslation } from \"plugin-api/ITranslation\";\r\nimport { IBlockDetails } from \"app/shared/data/block/details/IBlockDetails\";\r\nimport { BlockBasicSlotType } from \"./BlockBasicSlotType\";\r\nimport { BlockSummary } from \"./blockSummary/BlockSummary\";\r\nimport { isFullTxLite } from \"app/shared/data/tx/lite/isFullTxLite\";\r\nimport { ITxLiteFull } from \"app/shared/data/tx/lite/ITxLiteFull\";\r\n\r\nexport interface IBlockBasicProps {\r\n    blockDetails: IBlockDetails;\r\n    translation: ITranslation;\r\n    locale: string;\r\n    slots: Record<BlockBasicSlotType, JSX.Element[]>;\r\n}\r\n\r\nexport class BlockBasic extends React.PureComponent<IBlockBasicProps> {\r\n    render() {\r\n        let { translation: tr, blockDetails: block, slots, locale } = this.props;\r\n\r\n        return <LayoutSection useWrapper>\r\n            <LayoutRow minWidth={900}>\r\n                <LayoutRowItem>\r\n                    <Label>{tr.get(\"blockView.content.blockNumber.label\")}</Label>\r\n                    <BlockNumberBox noLink>{block.id}</BlockNumberBox>\r\n                </LayoutRowItem>\r\n                <LayoutRowItem>\r\n                    {block.creationTime ?\r\n                    <>\r\n                    <Label>{tr.get(\"blockView.content.blockCreationTime.label\")}</Label>\r\n                    <TimeElapsedBox timestamp={block.creationTime}\r\n                        translation={tr}\r\n                        locale={locale} />\r\n                    </>\r\n                    : null }\r\n                    { slots[BlockBasicSlotType.Confirmations] }\r\n                </LayoutRowItem>\r\n                <LayoutRowItem>\r\n                    <Label>{tr.get(\"blockView.content.uncles.label\")}</Label>\r\n                    <UnclesCountBox locale={locale}>{block.uncles.length}</UnclesCountBox>\r\n                </LayoutRowItem>\r\n            </LayoutRow>\r\n            <LayoutRow minWidth={760}>\r\n                <LayoutRowItem>\r\n                    <Label>{tr.get(\"general.hash\")}</Label>\r\n                    { block.inconsistentWarning ?\r\n                        <TooltipRegular content={\r\n                            <div style={{width: 450, textAlign: \"center\"}}>\r\n                                { tr.get(\"blockView.content.inconsistentWarning.text\") }\r\n                            </div>\r\n                        }>\r\n                            <ErrorIcon />\r\n                        </TooltipRegular>\r\n                    : null}\r\n                    <BlockHashBox>{block.hash}</BlockHashBox>\r\n                </LayoutRowItem>\r\n                {block.parentHash ?\r\n                <LayoutRowItem>\r\n                    <Label>{tr.get(\"blockView.content.parentHash.label\")}</Label>\r\n                    <ParentHashBox\r\n                        linkTo={block.parentId ? `page://aleth.io/block?blockNumber=${block.parentId}` : void 0}\r\n                    >\r\n                        {block.parentHash}\r\n                    </ParentHashBox>\r\n                </LayoutRowItem> : null }\r\n            </LayoutRow>\r\n            { block.uncles.length ?\r\n            <LayoutRow>\r\n                <LayoutRowItem fullRow>\r\n                    <Label>{tr.get(\"blockView.content.uncles.label\")}</Label>\r\n                    {block.uncles.map(uncleHash => (\r\n                        <UncleHashBox key={uncleHash} linkTo={`page://aleth.io/uncle?uncleHash=${uncleHash}`}>\r\n                            {uncleHash}\r\n                        </UncleHashBox>\r\n                    ))}\r\n                </LayoutRowItem>\r\n            </LayoutRow>\r\n            : null }\r\n            <LayoutRow minWidth={710}>\r\n                <LayoutRowItem>\r\n                    <Label>{tr.get(\"general.nonce\")}</Label>\r\n                    <HashValueBox>{block.nonce}</HashValueBox>\r\n                </LayoutRowItem>\r\n                <LayoutRowItem>\r\n                    <Label>{tr.get(\"blockView.content.blockSize.label\")}</Label>\r\n                    <BlockSizeBox bytes={block.byteSize} locale={locale} translations={{\r\n                        bytes: tr.get(\"general.bytes\")\r\n                    }} />\r\n                </LayoutRowItem>\r\n            </LayoutRow>\r\n            { block.transactions.length && isFullTxLite(block.transactions[0]) ?\r\n            <LayoutRow>\r\n                <LayoutRowItem fullRow autoHeight>\r\n                    <Label>{tr.get(\"blockView.content.blockSummary.label\")}</Label>\r\n                    <div style={{maxWidth: 500, flex: \"1 1 auto\"}}>\r\n                        <BlockSummary transactions={block.transactions as ITxLiteFull[]} translation={tr}/>\r\n                    </div>\r\n                </LayoutRowItem>\r\n            </LayoutRow>\r\n            : null }\r\n        </LayoutSection>;\r\n    }\r\n}\r\n","import { ITxLiteFull } from \"app/shared/data/tx/lite/ITxLiteFull\";\r\nimport { ITxLite } from \"app/shared/data/tx/lite/ITxLite\";\r\n\r\nexport function isFullTxLite(txLite: ITxLite): txLite is ITxLiteFull {\r\n    return (txLite as ITxLiteFull).type !== undefined;\r\n}\r\n"],"sourceRoot":""}