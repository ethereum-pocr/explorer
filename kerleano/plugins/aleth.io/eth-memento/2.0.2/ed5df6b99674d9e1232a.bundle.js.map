{"version":3,"sources":["webpack://__aleth_io__ethMemento/./app/eth-extended/module/block/blockTxs/BlockTxsState.ts","webpack://__aleth_io__ethMemento/./app/eth-extended/module/block/blockTxs/txHighlight/HighlightFieldKey.ts","webpack://__aleth_io__ethMemento/./app/eth-extended/module/block/blockTxs/txHighlight/HighlightFieldsFull.ts","webpack://__aleth_io__ethMemento/./app/eth-extended/module/block/blockTxs/BlockTxsStateFactory.ts","webpack://__aleth_io__ethMemento/./app/eth-memento/module/block/blockTxs/BlockTxsState.ts","webpack://__aleth_io__ethMemento/./app/eth-memento/module/block/blockTxs/txHighlight/HighlightFieldKey.ts","webpack://__aleth_io__ethMemento/./app/eth-memento/module/block/blockTxs/txHighlight/HighlightFieldsMemento.ts","webpack://__aleth_io__ethMemento/./app/eth-memento/module/block/blockTxs/BlockTxsStateFactory.ts","webpack://__aleth_io__ethMemento/./app/shared/module/block/blockTxs/component/TxTooltipContent.tsx","webpack://__aleth_io__ethMemento/./app/helper/logScale.ts","webpack://__aleth_io__ethMemento/./app/helper/minMaxLogScale.ts","webpack://__aleth_io__ethMemento/./app/shared/module/block/blockTxs/txsGrid/TxHighlight.tsx","webpack://__aleth_io__ethMemento/./app/eth-extended/module/block/blockTxs/txsGrid/TxHighlightRenderer.tsx","webpack://__aleth_io__ethMemento/./app/eth-extended/module/block/blockTxs/txsGrid/TxGridFields.tsx","webpack://__aleth_io__ethMemento/./app/eth-memento/module/block/blockTxs/txsGrid/TxHighlightRenderer.tsx","webpack://__aleth_io__ethMemento/./app/eth-memento/module/block/blockTxs/txsGrid/TxGridFields.tsx","webpack://__aleth_io__ethMemento/./app/shared/module/block/blockTxs/TxsGrid.tsx","webpack://__aleth_io__ethMemento/./app/shared/module/block/blockTxs/component/BlockTxs.tsx","webpack://__aleth_io__ethMemento/./app/shared/data/tx/lite/isFullTxLite.ts","webpack://__aleth_io__ethMemento/./app/shared/component/Grid.tsx"],"names":["BlockTxsState","[object Object]","txsViewMode","txsHighlightFields","txsGridSortingOptions","this","HighlightFieldKey","HighlightFieldsFull_HighlightFieldsFull","HighlightFields","super","fields","key","Value","getLabel","t","get","getData","tx","value","ContractMessageCount","contractMsgCount","GasUsed","gasUsed","GasPrice","gasPrice","GasLimit","gasLimit","ContractCreationCount","contractCreationCount","setSelectedField","BlockTxsStateFactory_BlockTxsStateFactory","TxsViewMode","GridSortingOptions","BlockTxsState_BlockTxsState","HighlightFieldKey_HighlightFieldKey","HighlightFieldsMemento_HighlightFieldsMemento","blockTxs_BlockTxsStateFactory_BlockTxsStateFactory","TxTooltipContent_TxTooltipContent","external_react_","translation","ethSymbol","props","TxTooltipContentWrapper","TxHashBox","variant","hash","Label","AddressHashBox","from","Object","isFullTxLite","type","TxType","Create","Icon","ContractIcon","to","style","paddingLeft","arrow","disabled","isZero","display","EthValueBox","wei","locale","symbol","latestEthPrice","UsdValueBox","multipliedBy","toNumber","logScale","x","maxValue","percent","dividedBy","Math","floor","log10","minMaxLogScale","values","defaultSize","length","min","BigNumber","minimum","max","maxSize","maximum","minus","map","v","TxHighlight","styled_components","withConfig","displayName","componentId","highlight","theme","colors","selectBoxBubble","TxHighlightRenderer_TxHighlightRenderer","f","ITxGridFieldKeys","TxGridFields_TxGridFields","GridFields","highlightFn","label","fieldKey","Type","isSortable","selected","getFieldValue","renderer","Hash","alwaysVisible","TxLinkRenderer","From","AccountLinkRenderer","To","%s","EthRenderer","Fee","txsGrid_TxHighlightRenderer_TxHighlightRenderer","GridLink","TxGridFields_ITxGridFieldKeys","txsGrid_TxGridFields_TxGridFields","TxsGridRoot","div","TxsGrid_TxsGrid","TxsGrid","data","percentLog","scaledHighlightValues","Error","highlightThreshold","transactions","gridFields","gridSortingOptions","prevProps","highlightValues","highlightDataSelector","computeScaledHighlightValues","rows","Grid","sortingOptions","Map","forEach","i","set","tslib_es6","external_mobx_","ref","external_mobx_react_","HIGHLIGHT_THRESHOLD","BlockTxs_BlockTxs","BlockTxs","external_react_default","a","Component","renderHeatMapTooltip","createElement","blockTxsState","uiStateContainer","txs","create","tr","Fragment","LayoutRow","minWidth","LayoutRowItem","TxCountBox","TxHighlightSelector","ViewSelectorBox","isHeatMapGrid","fullRow","autoHeight","maxWidth","TxsHeatMap","getSelectedField","scaleValuesFn","txTooltipThunk","Spacer","height","__webpack_require__","d","__webpack_exports__","txLite","undefined","react__WEBPACK_IMPORTED_MODULE_1__","_a","tslib__WEBPACK_IMPORTED_MODULE_0__","_alethio_ui_lib_control_grid_Grid__WEBPACK_IMPORTED_MODULE_2__","assign","noDataText","loadMoreText"],"mappings":"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","file":"ed5df6b99674d9e1232a.bundle.js","sourcesContent":["import { GridSortingOptions } from \"@alethio/ui/lib/control/grid/state/GridSortingOptions\";\r\nimport { ITxLite } from \"app/shared/data/tx/lite/ITxLite\";\r\nimport { TxsViewMode } from \"@alethio/explorer-ui/lib/blockTxs/TxsViewMode\";\r\nimport { HighlightFields } from \"@alethio/explorer-ui/lib/blockTxs/txHighlight/HighlightFields\";\r\nimport { HighlightFieldKey } from \"./txHighlight/HighlightFieldKey\";\r\n\r\nexport class BlockTxsState {\r\n    constructor(\r\n        public txsViewMode: TxsViewMode,\r\n        public txsHighlightFields: HighlightFields<ITxLite, HighlightFieldKey>,\r\n        public txsGridSortingOptions: GridSortingOptions\r\n    ) {\r\n\r\n    }\r\n}\r\n","export enum HighlightFieldKey {\n    Value = \"value\",\n    ContractMessageCount = \"cmcount\",\n    GasUsed = \"gasused\",\n    GasPrice = \"gasprice\",\n    GasLimit = \"gaslimit\",\n    ContractCreationCount = \"ccreationcount\"\n}\n","import { HighlightFields } from \"@alethio/explorer-ui/lib/blockTxs/txHighlight/HighlightFields\";\r\nimport { HighlightFieldKey } from \"./HighlightFieldKey\";\r\nimport { ITxLiteFull } from \"app/shared/data/tx/lite/ITxLiteFull\";\r\n\r\nexport class HighlightFieldsFull extends HighlightFields<ITxLiteFull, HighlightFieldKey> {\r\n    constructor() {\r\n        super();\r\n        this.fields = [{\r\n            key: HighlightFieldKey.Value,\r\n            getLabel: t => t.get(\"blockView.content.transactionsHighlight.value.label\"),\r\n            getData: tx => tx.value\r\n        }, {\r\n            key: HighlightFieldKey.ContractMessageCount,\r\n            getLabel: t => t.get(\"blockView.content.transactionsHighlight.contractMessageCount.label\"),\r\n            getData: tx => tx.contractMsgCount\r\n        }, {\r\n            key: HighlightFieldKey.GasUsed,\r\n            getLabel: t => t.get(\"general.gasUsed\"),\r\n            getData: tx => tx.gasUsed\r\n        }, {\r\n            key: HighlightFieldKey.GasPrice,\r\n            getLabel: t => t.get(\"general.gasPrice\"),\r\n            getData: tx => tx.gasPrice\r\n        }, {\r\n            key: HighlightFieldKey.GasLimit,\r\n            getLabel: t => t.get(\"general.gasLimit\"),\r\n            getData: tx => tx.gasLimit\r\n        }, {\r\n            key: HighlightFieldKey.ContractCreationCount,\r\n            getLabel: t => t.get(\"blockView.content.transactionsHighlight.contractCreationCount.label\"),\r\n            getData: tx => tx.contractCreationCount\r\n        }];\r\n        this.setSelectedField(HighlightFieldKey.Value);\r\n    }\r\n}\r\n","import { GridSortingOptions } from \"@alethio/ui/lib/control/grid/state/GridSortingOptions\";\r\nimport { BlockTxsState } from \"./BlockTxsState\";\r\nimport { TxsViewMode } from \"@alethio/explorer-ui/lib/blockTxs/TxsViewMode\";\r\nimport { HighlightFieldsFull } from \"app/eth-extended/module/block/blockTxs/txHighlight/HighlightFieldsFull\";\r\n\r\nexport class BlockTxsStateFactory {\r\n    create() {\r\n        return new BlockTxsState(\r\n            new TxsViewMode(),\r\n            new HighlightFieldsFull(),\r\n            new GridSortingOptions()\r\n        );\r\n    }\r\n}\r\n","import { GridSortingOptions } from \"@alethio/ui/lib/control/grid/state/GridSortingOptions\";\r\nimport { ITxLite } from \"app/shared/data/tx/lite/ITxLite\";\r\nimport { TxsViewMode } from \"@alethio/explorer-ui/lib/blockTxs/TxsViewMode\";\r\nimport { HighlightFields } from \"@alethio/explorer-ui/lib/blockTxs/txHighlight/HighlightFields\";\r\nimport { HighlightFieldKey } from \"./txHighlight/HighlightFieldKey\";\r\n\r\nexport class BlockTxsState {\r\n    constructor(\r\n        public txsViewMode: TxsViewMode,\r\n        public txsHighlightFields: HighlightFields<ITxLite, HighlightFieldKey>,\r\n        public txsGridSortingOptions: GridSortingOptions\r\n    ) {\r\n\r\n    }\r\n}\r\n","export enum HighlightFieldKey {\r\n    Value = \"value\",\r\n    GasUsed = \"gasused\",\r\n    GasPrice = \"gasprice\",\r\n    GasLimit = \"gaslimit\"\r\n}\r\n","import { HighlightFields } from \"@alethio/explorer-ui/lib/blockTxs/txHighlight/HighlightFields\";\r\nimport { HighlightFieldKey } from \"./HighlightFieldKey\";\r\nimport { ITxLiteBase } from \"app/shared/data/tx/lite/ITxLiteBase\";\r\n\r\nexport class HighlightFieldsMemento extends HighlightFields<ITxLiteBase, HighlightFieldKey> {\r\n    constructor() {\r\n        super();\r\n        this.fields = [{\r\n            key: HighlightFieldKey.Value,\r\n            getLabel: t => t.get(\"blockView.content.transactionsHighlight.value.label\"),\r\n            getData: tx => tx.value\r\n        }, {\r\n            key: HighlightFieldKey.GasUsed,\r\n            getLabel: t => t.get(\"general.gasUsed\"),\r\n            getData: tx => tx.gasUsed\r\n        }, {\r\n            key: HighlightFieldKey.GasPrice,\r\n            getLabel: t => t.get(\"general.gasPrice\"),\r\n            getData: tx => tx.gasPrice\r\n        }, {\r\n            key: HighlightFieldKey.GasLimit,\r\n            getLabel: t => t.get(\"general.gasLimit\"),\r\n            getData: tx => tx.gasLimit\r\n        }];\r\n        this.setSelectedField(HighlightFieldKey.Value);\r\n    }\r\n}\r\n","import { GridSortingOptions } from \"@alethio/ui/lib/control/grid/state/GridSortingOptions\";\r\nimport { BlockTxsState } from \"app/eth-memento/module/block/blockTxs/BlockTxsState\";\r\nimport { TxsViewMode } from \"@alethio/explorer-ui/lib/blockTxs/TxsViewMode\";\r\nimport { HighlightFieldsMemento } from \"app/eth-memento/module/block/blockTxs/txHighlight/HighlightFieldsMemento\";\r\n\r\nexport class BlockTxsStateFactory {\r\n    create() {\r\n        return new BlockTxsState(\r\n            new TxsViewMode(),\r\n            new HighlightFieldsMemento(),\r\n            new GridSortingOptions()\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { Label } from \"@alethio/ui/lib/data/Label\";\r\nimport { EthValueBox } from \"@alethio/ui/lib/data/box/EthValueBox\";\r\nimport { UsdValueBox } from \"@alethio/ui/lib/data/box/UsdValueBox\";\r\nimport { ContractIcon } from \"@alethio/ui/lib/icon/ContractIcon\";\r\nimport { ITxLite } from \"app/shared/data/tx/lite/ITxLite\";\r\nimport { TxHashBox } from \"@alethio/explorer-ui/lib/box/tx/TxHashBox\";\r\nimport { AddressHashBox } from \"@alethio/explorer-ui/lib/box/account/AddressHashBox\";\r\nimport { ITranslation } from \"plugin-api/ITranslation\";\r\nimport { TxType } from \"app/shared/data/tx/TxType\";\r\nimport { weiToEth } from \"app/util/wei\";\r\nimport { TxTooltipContentWrapper } from \"@alethio/explorer-ui/lib/blockTxs/TxTooltipContentWrapper\";\r\nimport { isFullTxLite } from \"app/shared/data/tx/lite/isFullTxLite\";\r\n\r\nexport interface ITxTooltipContentProps {\r\n    tx: ITxLite;\r\n    latestEthPrice: number | undefined;\r\n    translation: ITranslation;\r\n    locale: string;\r\n    ethSymbol: string;\r\n}\r\n\r\nexport class TxTooltipContent extends React.Component<ITxTooltipContentProps> {\r\n    render() {\r\n        let { tx, translation, ethSymbol } = this.props;\r\n        return (\r\n            <TxTooltipContentWrapper>\r\n                <TxHashBox variant=\"small\">{tx.hash}</TxHashBox>\r\n                <Label>{translation.get(\"general.from\")}</Label>\r\n                <AddressHashBox variant=\"small\">{tx.from}</AddressHashBox>\r\n                {isFullTxLite(tx) && tx.type === TxType.Create ?\r\n                <>\r\n                <Label>{translation.get(\"general.creates\")}</Label>\r\n                <AddressHashBox variant=\"small\" Icon={ContractIcon}>{tx.to}</AddressHashBox>\r\n                </>\r\n                :\r\n                <>\r\n                <Label>{translation.get(\"general.to\")}</Label>\r\n                <AddressHashBox variant=\"small\">{tx.to}</AddressHashBox>\r\n                </>\r\n                }\r\n                <div style={{paddingLeft: 8}}>\r\n                    <Label arrow disabled={tx.value.isZero()}>{translation.get(\"txTooltip.value.label\")}</Label>\r\n                </div>\r\n                <div style={{display: \"flex\"}}>\r\n                    <EthValueBox variant=\"smallThin\" wei={tx.value} locale={this.props.locale} symbol={ethSymbol} />\r\n                    { this.props.latestEthPrice ?\r\n                    <UsdValueBox variant=\"smallThin\"\r\n                        value={weiToEth(tx.value).multipliedBy(this.props.latestEthPrice).toNumber()}\r\n                        locale={this.props.locale} />\r\n                    : null }\r\n                </div>\r\n            </TxTooltipContentWrapper>\r\n        );\r\n    }\r\n}\r\n","import { BigNumber } from \"app/util/BigNumber\";\n\n/**\n * Produces scaled percentage values\n */\nexport function logScale(x: BigNumber, maxValue: BigNumber) {\n    // We can loose precision here\n    let percent = x.dividedBy(maxValue).multipliedBy(100).toNumber();\n    return Math.floor(Math.log10(100 * percent + 1) * 25);\n}\n","import { logScale } from \"./logScale\";\nimport { BigNumber } from \"app/util/BigNumber\";\n\n/**\n * Takes an array of values and scales the items between the array min and max values to a percentage, logarithmically\n * e.g. Transforms interval (min, max) to (0, 100)\n *\n * Logarithmic scale is especially useful for transaction values that differ by an order of magnitude\n *\n * @param values\n * @param defaultSize If all values are the same, fill the result with this default\n */\nexport function minMaxLogScale(values: (number | BigNumber)[], defaultSize = 50) {\n    if (!values.length) {\n        return [];\n    }\n\n    let min = BigNumber.minimum(...values);\n    let max = BigNumber.maximum(...values);\n\n    let maxSize = max.minus(min);\n\n    if (maxSize.isZero()) {\n        // All values are equal, just fill with default size\n        return values.map(v => defaultSize);\n    }\n\n    /*\n     * Array values between [min, max]:\n     * |---|----------------------|\n     * 0  min                    max\n     *     |----------------------|      ( x1 = x0 - min )\n     *     0                  max - min\n     *     |----------------------|      ( x2 = log(x1 * 100 / max) )\n     *     0                     100\n     */\n    return values\n        // translate(-min)\n        .map(v => new BigNumber(v).minus(min))\n        // scale to maxSize and apply log scale\n        .map(v => logScale(v, maxSize));\n}\n","import styled, { css } from \"@alethio/explorer-ui/lib/styled-components\";\r\n\r\ninterface ITxHighlightProps {\r\n    highlight: boolean;\r\n}\r\n\r\nexport const TxHighlight = styled<ITxHighlightProps, \"div\">(\"div\")`\r\n    ${({highlight}) => highlight ? css`\r\n        position: relative;\r\n        &:before {\r\n            content: \"\";\r\n            position: absolute;\r\n\r\n            border-radius: 50%;\r\n            background-color: ${props => props.theme.colors.selectBoxBubble};\r\n            width: 8px;\r\n            height: 8px;\r\n            top: 5px;\r\n            left: -15px;\r\n        }\r\n    ` : \"\"}\r\n`;\r\n","import * as React from \"react\";\r\nimport { IGridFieldRenderer } from \"@alethio/ui/lib/control/grid/state/IGridFieldRenderer\";\r\nimport { ITranslation } from \"plugin-api/ITranslation\";\r\nimport { TxType } from \"app/shared/data/tx/TxType\";\r\nimport { ITxLite } from \"app/shared/data/tx/lite/ITxLite\";\r\nimport { TxHighlight } from \"app/shared/module/block/blockTxs/txsGrid/TxHighlight\";\r\nimport { ITxLiteFull } from \"app/shared/data/tx/lite/ITxLiteFull\";\r\n\r\nexport class TxHighlightRenderer implements IGridFieldRenderer<ITxLiteFull> {\r\n    constructor(\r\n        private translation: ITranslation,\r\n        private highlight: (f: ITxLite) => boolean\r\n    ) {\r\n    }\r\n\r\n    render(f: ITxLiteFull) {\r\n        return (\r\n            <TxHighlight highlight={this.highlight(f)}>\r\n                { this.translation.get(\"general.tx.type.\" + TxType[f.type]) }\r\n            </TxHighlight>\r\n        );\r\n    }\r\n}\r\n","import { GridFields } from \"@alethio/ui/lib/control/grid/state/GridFields\";\r\nimport { EthRenderer } from \"@alethio/ui/lib/data/gridRenderer/EthRenderer\";\r\nimport { ITranslation } from \"plugin-api/ITranslation\";\r\nimport { TxType } from \"app/shared/data/tx/TxType\";\r\nimport { TxLinkRenderer } from \"@alethio/explorer-ui/lib/grid/dataRenderer/tx/TxLinkRenderer\";\r\nimport { AccountLinkRenderer } from \"@alethio/explorer-ui/lib/grid/dataRenderer/account/AccountLinkRenderer\";\r\nimport { IHighlightFn } from \"app/shared/module/block/blockTxs/TxsGrid\";\r\nimport { TxHighlightRenderer } from \"./TxHighlightRenderer\";\r\nimport { ITxLiteFull } from \"app/shared/data/tx/lite/ITxLiteFull\";\r\n\r\nexport enum ITxGridFieldKeys {\r\n    Type = \"type\",\r\n    Hash = \"hash\",\r\n    From = \"from\",\r\n    To = \"to\",\r\n    Value = \"value\",\r\n    Fee = \"fee\"\r\n}\r\n\r\nexport class TxGridFields extends GridFields<ITxLiteFull> {\r\n    constructor(t: ITranslation, locale: string, ethSymbol: string, highlightFn: IHighlightFn) {\r\n        super();\r\n        this.fields = [{\r\n            label: t.get(\"general.grid.header.type.label\"),\r\n            fieldKey: ITxGridFieldKeys.Type,\r\n            type: \"string\",\r\n            isSortable: true,\r\n            selected: true,\r\n            getFieldValue: f => TxType[f.type],\r\n            renderer: new TxHighlightRenderer(t, highlightFn)\r\n        }, {\r\n            label: t.get(\"general.hash\"),\r\n            fieldKey: ITxGridFieldKeys.Hash,\r\n            type: \"string\",\r\n            isSortable: true,\r\n            selected: true,\r\n            alwaysVisible: true,\r\n            getFieldValue: f => f.hash,\r\n            renderer: new TxLinkRenderer(f => f.hash)\r\n        }, {\r\n            label: t.get(\"general.from\"),\r\n            fieldKey: ITxGridFieldKeys.From,\r\n            type: \"string\",\r\n            isSortable: true,\r\n            selected: true,\r\n            getFieldValue: f => f.from,\r\n            renderer: new AccountLinkRenderer(f => f.from)\r\n        }, {\r\n            label: t.get(\"general.to\"),\r\n            fieldKey: ITxGridFieldKeys.To,\r\n            type: \"string\",\r\n            isSortable: true,\r\n            selected: true,\r\n            getFieldValue: f => f.to,\r\n            renderer: new AccountLinkRenderer(f => f.to)\r\n        }, {\r\n            label: t.get(\"general.valueEth\", {\"%s\": ethSymbol}),\r\n            fieldKey: ITxGridFieldKeys.Value,\r\n            type: \"number\",\r\n            isSortable: true,\r\n            selected: true,\r\n            getFieldValue: f => f.value,\r\n            renderer: new EthRenderer(\r\n                locale,\r\n                f => f.value\r\n            )\r\n        }, {\r\n            label: t.get(\"general.feeEth\", {\"%s\": ethSymbol}),\r\n            fieldKey: ITxGridFieldKeys.Fee,\r\n            type: \"number\",\r\n            isSortable: true,\r\n            selected: true,\r\n            getFieldValue: f => f.gasUsed.multipliedBy(f.gasPrice),\r\n            renderer: new EthRenderer(\r\n                locale,\r\n                f => f.gasUsed.multipliedBy(f.gasPrice)\r\n            )\r\n        }];\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { IGridFieldRenderer } from \"@alethio/ui/lib/control/grid/state/IGridFieldRenderer\";\r\nimport { ITxLite } from \"app/shared/data/tx/lite/ITxLite\";\r\nimport { ITxLiteBase } from \"app/shared/data/tx/lite/ITxLiteBase\";\r\nimport { Hash } from \"@alethio/ui/lib/data/Hash\";\r\nimport { GridLink } from \"@alethio/explorer-ui/src/grid/GridLink\";\r\nimport { TxHighlight } from \"app/shared/module/block/blockTxs/txsGrid/TxHighlight\";\r\n\r\nexport class TxHighlightRenderer implements IGridFieldRenderer<ITxLiteBase> {\r\n    constructor(\r\n        private highlight: (f: ITxLite) => boolean\r\n    ) {\r\n    }\r\n\r\n    render(f: ITxLiteBase) {\r\n        return (\r\n            <TxHighlight highlight={this.highlight(f)}>\r\n                <GridLink to={`page://aleth.io/tx?txHash=${f.hash}`} >\r\n                    <Hash>{ f.hash }</Hash>\r\n                </GridLink>\r\n            </TxHighlight>\r\n        );\r\n    }\r\n}\r\n","import { GridFields } from \"@alethio/ui/lib/control/grid/state/GridFields\";\r\nimport { EthRenderer } from \"@alethio/ui/lib/data/gridRenderer/EthRenderer\";\r\nimport { ITranslation } from \"plugin-api/ITranslation\";\r\nimport { AccountLinkRenderer } from \"@alethio/explorer-ui/lib/grid/dataRenderer/account/AccountLinkRenderer\";\r\nimport { ITxLiteBase } from \"app/shared/data/tx/lite/ITxLiteBase\";\r\nimport { TxHighlightRenderer } from \"app/eth-memento/module/block/blockTxs/txsGrid/TxHighlightRenderer\";\r\nimport { IHighlightFn } from \"app/shared/module/block/blockTxs/TxsGrid\";\r\n\r\nexport enum ITxGridFieldKeys {\r\n    Hash = \"hash\",\r\n    From = \"from\",\r\n    To = \"to\",\r\n    Value = \"value\",\r\n    Fee = \"fee\"\r\n}\r\n\r\nexport class TxGridFields extends GridFields<ITxLiteBase> {\r\n    constructor(t: ITranslation, locale: string, ethSymbol: string, highlightFn: IHighlightFn) {\r\n        super();\r\n        this.fields = [{\r\n            label: t.get(\"general.hash\"),\r\n            fieldKey: ITxGridFieldKeys.Hash,\r\n            type: \"string\",\r\n            isSortable: true,\r\n            selected: true,\r\n            alwaysVisible: true,\r\n            getFieldValue: f => f.hash,\r\n            renderer: new TxHighlightRenderer(highlightFn)\r\n        }, {\r\n            label: t.get(\"general.from\"),\r\n            fieldKey: ITxGridFieldKeys.From,\r\n            type: \"string\",\r\n            isSortable: true,\r\n            selected: true,\r\n            getFieldValue: f => f.from,\r\n            renderer: new AccountLinkRenderer(f => f.from)\r\n        }, {\r\n            label: t.get(\"general.to\"),\r\n            fieldKey: ITxGridFieldKeys.To,\r\n            type: \"string\",\r\n            isSortable: true,\r\n            selected: true,\r\n            getFieldValue: f => f.to,\r\n            renderer: new AccountLinkRenderer(f => f.to)\r\n        }, {\r\n            label: t.get(\"general.valueEth\", { \"%s\": ethSymbol }),\r\n            fieldKey: ITxGridFieldKeys.Value,\r\n            type: \"number\",\r\n            isSortable: true,\r\n            selected: true,\r\n            getFieldValue: f => f.value,\r\n            renderer: new EthRenderer(\r\n                locale,\r\n                f => f.value\r\n            )\r\n        }, {\r\n            label: t.get(\"general.feeEth\", { \"%s\": ethSymbol }),\r\n            fieldKey: ITxGridFieldKeys.Fee,\r\n            type: \"number\",\r\n            isSortable: true,\r\n            selected: true,\r\n            getFieldValue: f => f.gasUsed.multipliedBy(f.gasPrice),\r\n            renderer: new EthRenderer(\r\n                locale,\r\n                f => f.gasUsed.multipliedBy(f.gasPrice)\r\n            )\r\n        }];\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { action, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport styled from \"@alethio/explorer-ui/lib/styled-components\";\r\nimport { GridSortingOptions } from \"@alethio/ui/lib/control/grid/state/GridSortingOptions\";\r\nimport { GridFields } from \"@alethio/ui/lib/control/grid/state/GridFields\";\r\nimport { Grid } from \"app/shared/component/Grid\";\r\nimport { ITxLite } from \"app/shared/data/tx/lite/ITxLite\";\r\nimport { ITranslation } from \"plugin-api/ITranslation\";\r\nimport { minMaxLogScale } from \"app/helper/minMaxLogScale\";\r\nimport { BigNumber } from \"app/util/BigNumber\";\r\nimport { TxGridFields as FullTxGridFields } from \"app/eth-extended/module/block/blockTxs/txsGrid/TxGridFields\";\r\nimport { TxGridFields as MementoTxGridFields } from \"app/eth-memento/module/block/blockTxs/txsGrid/TxGridFields\";\r\nimport { isFullTxLite } from \"app/shared/data/tx/lite/isFullTxLite\";\r\n\r\nconst TxsGridRoot = styled.div`\r\n    margin-top: 16px;\r\n`;\r\n\r\nexport interface IHighlightFn {\r\n    (f: ITxLite): boolean;\r\n}\r\n\r\ninterface ITxGridProps {\r\n    transactions: ITxLite[];\r\n    locale: string;\r\n    translation: ITranslation;\r\n    ethSymbol: string;\r\n    gridSortingOptions: GridSortingOptions;\r\n    highlightThreshold: number;\r\n    highlightDataSelector(t: ITxLite): number | BigNumber;\r\n}\r\n\r\n@observer\r\nexport class TxsGrid extends React.Component<ITxGridProps> {\r\n    @observable.ref\r\n    private gridFields: GridFields<ITxLite>;\r\n    private gridSortingOptions: GridSortingOptions;\r\n    private scaledHighlightValues: Map<ITxLite, number>;\r\n\r\n    constructor(props: ITxGridProps) {\r\n        super(props);\r\n        if (this.props.transactions.length && isFullTxLite(this.props.transactions[0])) {\r\n            this.gridFields = new FullTxGridFields(props.translation, props.locale, props.ethSymbol, this.highlight);\r\n        } else {\r\n            this.gridFields = new MementoTxGridFields(props.translation, props.locale, props.ethSymbol, this.highlight);\r\n        }\r\n        this.gridSortingOptions = this.props.gridSortingOptions;\r\n    }\r\n\r\n    @action\r\n    componentDidUpdate(prevProps: ITxGridProps) {\r\n        if (this.props.translation !== prevProps.translation) {\r\n            if (this.props.transactions.length && isFullTxLite(this.props.transactions[0])) {\r\n                this.gridFields = new FullTxGridFields(this.props.translation, this.props.locale, this.props.ethSymbol,\r\n                    this.highlight);\r\n            } else {\r\n                this.gridFields = new MementoTxGridFields(this.props.translation, this.props.locale,\r\n                    this.props.ethSymbol, this.highlight);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let highlightValues = this.props.transactions.map(tx => this.props.highlightDataSelector(tx));\r\n        this.scaledHighlightValues = this.computeScaledHighlightValues(highlightValues);\r\n\r\n        const rows = this.props.transactions.map(tx => {\r\n            return {\r\n                key: tx.hash,\r\n                data: tx\r\n            };\r\n        });\r\n        return (\r\n            <TxsGridRoot>\r\n                <Grid<ITxLite>\r\n                    rows={rows}\r\n                    fields={this.gridFields}\r\n                    sortingOptions={this.gridSortingOptions}\r\n                    translation={this.props.translation}\r\n                />\r\n            </TxsGridRoot>\r\n        );\r\n    }\r\n\r\n    private computeScaledHighlightValues(values: (number | BigNumber)[]) {\r\n        // Creates a map of tx data objects to scaled values. We do this because the link between the data item and\r\n        // original array index is lost in rendering\r\n        let scaledHighlightValues = new Map<ITxLite, number>();\r\n\r\n        minMaxLogScale(values).forEach((v, i) => {\r\n            scaledHighlightValues.set(this.props.transactions[i], v);\r\n        });\r\n\r\n        return scaledHighlightValues;\r\n    }\r\n\r\n    private highlight = (data: ITxLite) => {\r\n        let percentLog = this.scaledHighlightValues.get(data);\r\n        if (percentLog === void 0) {\r\n            throw new Error(`Missing scaledHighlightValues for txHash \"${data.hash}\"`);\r\n        }\r\n        return percentLog > this.props.highlightThreshold;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport { LayoutRow } from \"@alethio/ui/lib/layout/content/LayoutRow\";\r\nimport { LayoutRowItem } from \"@alethio/ui/lib/layout/content/LayoutRowItem\";\r\nimport { Label } from \"@alethio/ui/lib/data/Label\";\r\nimport { Spacer } from \"@alethio/ui/lib/layout/Spacer\";\r\nimport { TxCountBox } from \"@alethio/explorer-ui/lib/box/block/TxCountBox\";\r\nimport { ITranslation } from \"plugin-api/ITranslation\";\r\nimport { TxHighlightSelector } from \"@alethio/explorer-ui/lib/blockTxs/txHighlight/TxHighlightSelector\";\r\nimport { ViewSelectorBox } from \"@alethio/explorer-ui/lib/blockTxs/ViewSelectorBox\";\r\nimport {\r\n    BlockTxsStateFactory as ExtendedBlockTxsStateFactory\r\n} from \"app/eth-extended/module/block/blockTxs/BlockTxsStateFactory\";\r\nimport {\r\n    BlockTxsStateFactory as MementoBlockTxsStateFactory\r\n} from \"app/eth-memento/module/block/blockTxs/BlockTxsStateFactory\";\r\nimport { BlockTxsState } from \"app/eth-extended/module/block/blockTxs/BlockTxsState\";\r\nimport { ITxLite } from \"app/shared/data/tx/lite/ITxLite\";\r\nimport { TxTooltipContent } from \"./TxTooltipContent\";\r\nimport { TxsHeatMap } from \"@alethio/explorer-ui/lib/blockTxs/txHeatMap/TxsHeatMap\";\r\nimport { TxsGrid } from \"app/shared/module/block/blockTxs/TxsGrid\";\r\nimport { minMaxLogScale } from \"app/helper/minMaxLogScale\";\r\nimport { isFullTxLite } from \"app/shared/data/tx/lite/isFullTxLite\";\r\n\r\nconst HIGHLIGHT_THRESHOLD = 80;\r\n\r\ninterface IGlobalState {\r\n    blockTxsState?: BlockTxsState;\r\n}\r\n\r\nexport interface IBlockTxsProps {\r\n    txs: ITxLite[];\r\n    latestEthPrice: number | undefined;\r\n    translation: ITranslation;\r\n    locale: string;\r\n    ethSymbol: string;\r\n    uiStateContainer: IGlobalState;\r\n}\r\n\r\n@observer\r\nexport class BlockTxs extends React.Component<IBlockTxsProps> {\r\n    constructor(props: IBlockTxsProps) {\r\n        super(props);\r\n\r\n        // TODO: encapsulation per module type\r\n        let blockTxsState = this.props.uiStateContainer.blockTxsState;\r\n        if (!blockTxsState) {\r\n            if (this.props.txs.length && isFullTxLite(this.props.txs[0])) {\r\n                blockTxsState = new ExtendedBlockTxsStateFactory().create();\r\n            } else {\r\n                blockTxsState = new MementoBlockTxsStateFactory().create();\r\n            }\r\n            this.props.uiStateContainer.blockTxsState = blockTxsState;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { translation: tr, txs, locale, uiStateContainer, ethSymbol } = this.props;\r\n        let {\r\n            txsGridSortingOptions, txsHighlightFields, txsViewMode\r\n        } = uiStateContainer.blockTxsState as BlockTxsState;\r\n\r\n        return <>\r\n            <LayoutRow minWidth={610}>\r\n                <LayoutRowItem>\r\n                    <Label>{tr.get(\"blockView.content.transactions.label\")}</Label>\r\n                    <TxCountBox>{txs.length}</TxCountBox>\r\n                </LayoutRowItem>\r\n                { txs.length ?\r\n                <LayoutRowItem>\r\n                    <Label>{tr.get(\"blockView.content.transactionsHighlight.label\")}</Label>\r\n                    <TxHighlightSelector fields={txsHighlightFields} translation={tr} />\r\n                    <ViewSelectorBox txsViewMode={txsViewMode} />\r\n                </LayoutRowItem>\r\n                : null }\r\n            </LayoutRow>\r\n            { txs.length ?\r\n            <>\r\n                { txsViewMode.isHeatMapGrid ?\r\n                <LayoutRow>\r\n                    <LayoutRowItem fullRow autoHeight>\r\n                        <div />\r\n                        <div style={{ maxWidth: 600 }}>\r\n                            <TxsHeatMap\r\n                                transactions={txs}\r\n                                highlightThreshold={HIGHLIGHT_THRESHOLD}\r\n                                highlightDataSelector={txsHighlightFields.getSelectedField().getData}\r\n                                scaleValuesFn={minMaxLogScale}\r\n                                txTooltipThunk={this.renderHeatMapTooltip}\r\n                            />\r\n                        </div>\r\n                    </LayoutRowItem>\r\n                </LayoutRow>\r\n                :\r\n                <TxsGrid\r\n                    transactions={txs}\r\n                    highlightThreshold={HIGHLIGHT_THRESHOLD}\r\n                    highlightDataSelector={txsHighlightFields.getSelectedField().getData}\r\n                    gridSortingOptions={txsGridSortingOptions}\r\n                    locale={locale}\r\n                    translation={tr}\r\n                    ethSymbol={ethSymbol}\r\n                />\r\n                }\r\n                <Spacer height=\"64px\" />\r\n            </>\r\n            : null }\r\n        </>;\r\n    }\r\n\r\n    private renderHeatMapTooltip = (tx: ITxLite) => {\r\n        return <TxTooltipContent\r\n            tx={tx}\r\n            latestEthPrice={this.props.latestEthPrice}\r\n            translation={this.props.translation}\r\n            locale={this.props.locale}\r\n            ethSymbol={this.props.ethSymbol}\r\n        />;\r\n    }\r\n}\r\n","import { ITxLiteFull } from \"app/shared/data/tx/lite/ITxLiteFull\";\r\nimport { ITxLite } from \"app/shared/data/tx/lite/ITxLite\";\r\n\r\nexport function isFullTxLite(txLite: ITxLite): txLite is ITxLiteFull {\r\n    return (txLite as ITxLiteFull).type !== undefined;\r\n}\r\n","import * as React from \"react\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\nimport { Grid as GridBase, IGridProps as IGridBaseProps } from \"@alethio/ui/lib/control/grid/Grid\";\n\nexport interface IGridProps<TData> {\n    rows: IGridBaseProps<TData>[\"rows\"];\n    limitRows?: boolean;\n    maxVisibleRows?: number;\n    fields: IGridBaseProps<TData>[\"fields\"];\n    sortingOptions: IGridBaseProps<TData>[\"sortingOptions\"];\n    translation: ITranslation;\n}\n\nexport class Grid<TData> extends React.Component<IGridProps<TData>> {\n    render() {\n        let { translation: tr, ...props} = this.props;\n\n        return <GridBase<TData>\n            {...props}\n            noDataText={tr.get(\"general.grid.footer.norowsavailable.label\")}\n            loadMoreText={tr.get(\"general.grid.footer.loadMore.label\")}\n        />;\n    }\n}\n"],"sourceRoot":""}