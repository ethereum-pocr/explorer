{"version":3,"sources":["webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/control/grid/state/GridSortingOptions.ts","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/control/grid/state/GridFields.ts","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/control/pagination/internal/NavButton.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/icon/PaginationPrevIcon.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/icon/PaginationNextIcon.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/control/pagination/internal/Cursor.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/ErrorHint.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/control/pagination/internal/CursorPaginationRoot.ts","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/control/pagination/internal/Spinner.ts","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/control/pagination/CursorInfinitePagination.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/explorer-ui/src/grid/dataRenderer/account/AccountLinkRenderer.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/explorer-ui/src/grid/dataRenderer/tx/TxLinkRenderer.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/explorer-ui/src/grid/GridLink.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/icon/ErrorSmallIcon.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/icon/CloseSmallIcon.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/control/ModalSelectBox.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/control/SelectBox.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/control/pagination/LoadStatus.ts","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/data/gridRenderer/DateTimeRenderer.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/control/accordion/AccordionVertical.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/control/grid/state/GridSortingOrder.ts","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/data/gridRenderer/EthRenderer.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/data/gridRenderer/HashRenderer.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/explorer-ui/src/grid/dataRenderer/account/AccountHashRenderer.ts","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/control/grid/internal/GridLayout.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/icon/CheckboxOnIcon.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/icon/CheckboxOffIcon.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/control/Checkbox.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/icon/AddIcon.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/control/grid/internal/header/GridColumnSelector.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/control/grid/internal/header/GridHeader.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/control/grid/internal/GridRow.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/control/grid/internal/header/GridHeaderItem.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/control/grid/internal/GridWrapper.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/control/grid/internal/GridData.ts","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/control/grid/Grid.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/icon/MsgCountOutSmallIcon.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/ui/src/icon/MsgCountInSmallIcon.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/explorer-ui/src/grid/dataRenderer/tx/TransferDirectionRenderer.tsx","webpack://__aleth_io__ethMemento/../node_modules/@alethio/explorer-ui/src/grid/dataRenderer/block/BlockLinkRenderer.tsx"],"names":["GridSortingOptions","[object Object]","field","this","_sortField","undefined","_sortOrder","_GridSortingOrder__WEBPACK_IMPORTED_MODULE_2__","Default","orderCycle","Ascending","Descending","order","defaultSortOrder","k","o","idx","indexOf","length","tslib__WEBPACK_IMPORTED_MODULE_0__","mobx__WEBPACK_IMPORTED_MODULE_1__","GridFields","gridFields","fields","selectedGridFields","filter","f","selected","key","select","find","fieldKey","defaultSortedField","BUTTON_SIZE","ICON_SIZE","BORDER_WIDTH","NavButtonRoot","Object","styled_components","withConfig","displayName","componentId","props","disabled","theme","colors","paginationBtnBorder","paginationBtnDisabledText","paginationBtnText","paginationBtnBg","paginationBtnHoverText","NavButton_NavButton","external_react_","onClick","Icon","PaginationPrevIcon_PaginationPrevIcon","SvgIcon","assign","stroke","strokeWidth","fill","fillRule","transform","points","PaginationNextIcon_PaginationNextIcon","BORDER_SIZE","Cursor","div","paginationCursorText","ErrorHint_ErrorHint","_a","children","tslib_es6","TooltipRegular","content","ErrorIcon","CursorPaginationRoot","sidebarBg","StyledSpinner","SpinnerRegular","__webpack_require__","d","__webpack_exports__","CursorInfinitePagination_CursorInfinitePagination","rangeStart","rangeEnd","isLastPage","isEndPage","loadStatus","errorText","locale","isBusy","LoadStatus","NotLoaded","onPrevPage","data_Number","value","onNextPage","DelayedRender","delay","Error","defaultProps","Loaded","AccountLinkRenderer","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_alethio_ui_lib_data_Hash__WEBPACK_IMPORTED_MODULE_1__","_GridLink__WEBPACK_IMPORTED_MODULE_2__","gridFieldDataGetter","hash","to","TxLinkRenderer","GridLink","plugin_api_component_Link__WEBPACK_IMPORTED_MODULE_0__","plugin_api_component_Link__WEBPACK_IMPORTED_MODULE_0___default","_alethio_ui_lib_styled_components__WEBPACK_IMPORTED_MODULE_1__","link","ErrorSmallIcon","_styled_components__WEBPACK_IMPORTED_MODULE_1__","_util_react_SvgIcon__WEBPACK_IMPORTED_MODULE_2__","ErrorSmallIconRoot","error","CloseSmallIcon_CloseSmallIcon","CloseButton","closeBtn","ModalSelectBoxWrapper","overlayBg","ModalSelectBox_ModalSelectBox","style","padding","onClose","Overlay","SelectBox_SelectBox","SelectBox","isOpened","openSelectBox","closeSelectBox","Manager","Reference","ref","cursor","external_react_dom_","Popper","modifiers","offset","left","top","flip","enabled","preventOverflow","hide","placement","data-placement","render","requestClose","document","body","external_mobx_","external_mobx_react_","DateTimeRenderer","_DateTime__WEBPACK_IMPORTED_MODULE_1__","timestamp","AccordionVertical","react__WEBPACK_IMPORTED_MODULE_1__","super","expanderEls","Map","handleContainerRef","containerOffsetLeft","offsetLeft","onExpanderResize","fixedExpanderWidth","destroyWidthWatch","setupWidthWatch","accordionState","_internal_AccordionState__WEBPACK_IMPORTED_MODULE_7__","onContentError","refreshDisposer","mobx__WEBPACK_IMPORTED_MODULE_2__","getItems","map","i","config","clear","equals","itemConfigs","prevItemConfigs","every","item","items","widthWatchDisposer","size","computeWidth","maxWidth","values","reduce","max","el","Math","offsetWidth","position","renderItems","_layout_content_LayoutRow__WEBPACK_IMPORTED_MODULE_4__","_layout_content_LayoutRowItem__WEBPACK_IMPORTED_MODULE_5__","_data_Label__WEBPACK_IMPORTED_MODULE_6__","label","noDataContent","activeItem","getActiveItem","responsive","ignoreFirstLabel","set","width","renderExpander","isFullWidth","isOpen","onResize","renderHeader","_fx_Height__WEBPACK_IMPORTED_MODULE_9__","duration","contentAnimSeconds","_internal_AccordionContentWrapper__WEBPACK_IMPORTED_MODULE_8__","status","contentStatus","arrowPosition","getContentArrowPosition","loadingDelay","loadingText","renderContent","expanderEl","next","childContextTypes","mobx_react__WEBPACK_IMPORTED_MODULE_3__","objectOrObservableObject","GridSortingOrder","EthRenderer","_EthValue__WEBPACK_IMPORTED_MODULE_1__","options","wei","showSymbol","decimals","HashRenderer_HashRenderer","Hash","AccountHashRenderer_AccountHashRenderer","accountAddress","hashRenderer","hashLinkRenderer","GridLayout","numberOfFields","repeatTimes","CheckboxOnIcon_CheckboxOnIcon","CheckboxOffIcon_CheckboxOffIcon","CheckboxWrapper","CheckboxLabel","checkboxLabel","CheckboxIconWrapper","checkboxIcon","Checkbox_Checkbox","onChange","event","checked","name","type","id","display","htmlFor","AddIcon_AddIcon","ColumnSelectorIconWrapper","gridColumnSelector","GridColumnSelector_GridColumnSelector","onCheckboxChange","_e","_value","shownItems","alwaysVisible","HeaderSpacer","gridBorder","gridEvenRowBg","HeaderSpacerLeft","HeaderSpacerRight","HeaderVertBorder","GridHeader_GridHeader","propsChildren","toArray","resultChildren","acc","c","push","onFieldsChange","extraElements","right","GRID_CELL_PADDING_X","GRID_CELL_PADDING_Y","Spacer","odd","gridOddRowBg","Item","VertBorder","GridRow_GridRow","GridHeaderHitBox","HeaderItem","isSortable","Label","gridHeaderHover","ArrowDown","selectBoxArrow","ArrowUp","NoArrow","GridHeaderItem_GridHeaderItem","GridHeaderItem","getHeaderSortArrow","sortingOptions","Wrapper","GridWrapper","GridData","dataType","LoadMoreRows","NoRowsAvailable","Grid_Grid","Grid","dataItemRenderer","row","renderer","data","getFieldValue","toString","changeSorting","setAscendingOrder","setNextOrder","setColumnSelect","loadMoreRows","visibleRows","rows","updateVisibleRows","prevProps","limitRows","maxVisibleRows","Number","POSITIVE_INFINITY","sortedRows","getSortedRows","extraHeaderElements","slice","loadMoreText","noDataText","sortOpts","sort","a","b","aValue","bValue","compResult","comparedTo","defaultComparator","MsgCountOutSmallIconRoot","msgCountOutIcon","MsgCountOutSmallIcon_MsgCountOutSmallIcon","MsgCountInSmallIconRoot","msgCountInIcon","MsgCountInSmallIcon_MsgCountInSmallIcon","TransferDirectionRenderer_TransferDirectionRenderer","DirectionWrapper","tr","directionOut","from","get","BlockLinkRenderer","_alethio_ui_lib_data_Number__WEBPACK_IMPORTED_MODULE_1__","blockNumber"],"mappings":"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","file":"305ec4e05bd03bb794c7.bundle.js","sourcesContent":["import { observable } from \"mobx\";\r\nimport { GridSortingOrder } from \"./GridSortingOrder\";\r\nimport { IGridFieldBase } from \"./IGridFieldBase\";\r\nimport { IGridSortingOptions } from \"./IGridSortingOptions\";\r\n\r\nexport class GridSortingOptions implements IGridSortingOptions {\r\n    @observable\r\n    private _sortField: IGridFieldBase | undefined = undefined;\r\n    @observable\r\n    private _sortOrder = GridSortingOrder.Default;\r\n\r\n    private orderCycle: GridSortingOrder[] = [\r\n        GridSortingOrder.Ascending,\r\n        GridSortingOrder.Descending,\r\n        GridSortingOrder.Default\r\n    ];\r\n\r\n    constructor(field?: IGridFieldBase | undefined) {\r\n        if (field) {\r\n            this.field = field;\r\n            this.order = field.defaultSortOrder ? field.defaultSortOrder : GridSortingOrder.Ascending;\r\n        }\r\n    }\r\n\r\n    public get field() {\r\n        return this._sortField;\r\n    }\r\n\r\n    public set field(k: IGridFieldBase | undefined) {\r\n        this._sortField = k;\r\n    }\r\n\r\n    public get order() {\r\n        return this._sortOrder;\r\n    }\r\n\r\n    public set order(o: GridSortingOrder) {\r\n        this._sortOrder = o;\r\n    }\r\n\r\n    public resetField() {\r\n        this._sortField = undefined;\r\n    }\r\n\r\n    public setAscendingOrder() {\r\n        this._sortOrder = GridSortingOrder.Ascending;\r\n    }\r\n    public setDescendingOrder() {\r\n        this._sortOrder = GridSortingOrder.Descending;\r\n    }\r\n\r\n    public setNextOrder() {\r\n        const idx = this.orderCycle.indexOf(this._sortOrder);\r\n        this._sortOrder = this.orderCycle[(idx + 1) % this.orderCycle.length];\r\n    }\r\n}\r\n","import { observable, computed, action } from \"mobx\";\r\nimport { IGridFieldBase } from \"./IGridFieldBase\";\r\nimport { IGridFieldRendererObjectOrFn } from \"./IGridFieldRenderer\";\r\nimport { BigNumber } from \"../../../util/BigNumber\";\r\n\r\nexport interface IGridField<T> extends IGridFieldBase {\r\n    renderer?: IGridFieldRendererObjectOrFn<T>;\r\n    getFieldValue(t: T): string | number | BigNumber;\r\n}\r\n\r\nexport class GridFields<TData> {\r\n    @observable\r\n    protected fields: IGridField<TData>[];\r\n\r\n    @computed\r\n    get gridFields() {\r\n        return this.fields;\r\n    }\r\n\r\n    @computed\r\n    get selectedGridFields() {\r\n        return this.fields.filter(f => f.selected);\r\n    }\r\n\r\n    @action\r\n    public setColumnSelect(key: string, select: boolean) {\r\n        const field = this.fields.find((f) => {\r\n            return key === f.fieldKey;\r\n        });\r\n        if (field) {\r\n            field.selected = select;\r\n        }\r\n    }\r\n\r\n    public get defaultSortedField(): IGridField<TData> | undefined {\r\n        return void 0;\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport styled, { css } from \"../../../styled-components\";\r\n\r\nconst BUTTON_SIZE = 36;\r\nconst ICON_SIZE = 24;\r\nconst BORDER_WIDTH = 1;\r\n\r\nconst NavButtonRoot = styled<INavButtonProps, \"div\">(\"div\")`\r\n    cursor: ${props => !props.disabled ? \"pointer\" : \"default\"};\r\n    padding: ${(BUTTON_SIZE - ICON_SIZE - 2 * BORDER_WIDTH) / 2}px;\r\n    border-radius: 4px;\r\n    border: ${BORDER_WIDTH}px solid ${props => props.theme.colors.paginationBtnBorder};\r\n    color: ${props => props.disabled ?\r\n        props.theme.colors.paginationBtnDisabledText :\r\n        props.theme.colors.paginationBtnText};\r\n    background-color: ${props => props.theme.colors.paginationBtnBg};\r\n    outline: 0;\r\n\r\n    ${props => !props.disabled ? css`\r\n    &:hover {\r\n        color: ${props.theme.colors.paginationBtnHoverText};\r\n    }\r\n    ` : ``};\r\n`;\r\n\r\ninterface IIconProps {\r\n    size?: number;\r\n}\r\n\r\n/** @internal */\r\nexport interface INavButtonProps {\r\n    Icon: React.ComponentClass<IIconProps> | React.StatelessComponent<IIconProps>;\r\n    disabled?: boolean;\r\n    onClick?(): void;\r\n}\r\n\r\n/** @internal */\r\nexport class NavButton extends React.Component<INavButtonProps> {\r\n    render() {\r\n        let { onClick, Icon, disabled } = this.props;\r\n\r\n        return (\r\n            <NavButtonRoot onClick={!disabled ? onClick : void 0} Icon={Icon} disabled={disabled}>\r\n                <Icon />\r\n            </NavButtonRoot>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SvgIcon, ISvgIconProps } from \"../util/react/SvgIcon\";\r\n\r\nexport interface IPaginationPrevIconProps extends ISvgIconProps {\r\n\r\n}\r\n\r\nexport class PaginationPrevIcon extends React.Component<IPaginationPrevIconProps> {\r\n    render() {\r\n        return (\r\n            <SvgIcon {...this.props}>\r\n                <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\r\n                    <g transform=\"translate(-6.000000, -6.000000)\" fill=\"currentColor\" fillRule=\"nonzero\">\r\n                        <g\r\n                            // tslint:disable-next-line:max-line-length\r\n                            transform=\"translate(18.000000, 18.000000) rotate(-270.000000) translate(-18.000000, -18.000000) translate(6.000000, 6.000000)\"\r\n                        >\r\n                            <polygon points=\"16.59 8.59 12 13.17 7.41 8.59 6 10 12 16 18 10\"></polygon>\r\n                        </g>\r\n                    </g>\r\n                </g>\r\n            </SvgIcon>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SvgIcon, ISvgIconProps } from \"../util/react/SvgIcon\";\r\n\r\nexport interface IPaginationNextIconProps extends ISvgIconProps {\r\n\r\n}\r\n\r\nexport class PaginationNextIcon extends React.Component<IPaginationNextIconProps> {\r\n    render() {\r\n        return (\r\n            <SvgIcon {...this.props}>\r\n                <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\r\n                    <g transform=\"translate(-258.000000, -6.000000)\" fill=\"currentColor\" fillRule=\"nonzero\">\r\n                        <g transform=\"translate(252.000000, 0.000000)\">\r\n                            <g\r\n                                // tslint:disable-next-line:max-line-length\r\n                                transform=\"translate(18.000000, 18.000000) scale(-1, 1) rotate(-270.000000) translate(-18.000000, -18.000000) translate(6.000000, 6.000000)\"\r\n                            >\r\n                                <polygon points=\"16.59 8.59 12 13.17 7.41 8.59 6 10 12 16 18 10\"></polygon>\r\n                            </g>\r\n                        </g>\r\n                    </g>\r\n                </g>\r\n            </SvgIcon>\r\n        );\r\n    }\r\n}\r\n","import styled from \"../../../styled-components\";\r\n\r\nconst BORDER_SIZE = 1;\r\n\r\n/** @internal */\r\nexport const Cursor = styled.div`\r\n    border-radius: 4px;\r\n    border: ${BORDER_SIZE}px solid ${props => props.theme.colors.paginationBtnBorder};\r\n    background-color: ${props => props.theme.colors.paginationBtnBg};\r\n    box-sizing: border-box;\r\n    user-select: none;\r\n    padding: ${10 - BORDER_SIZE}px ${20 - BORDER_SIZE}px ${12 - BORDER_SIZE}px ${20 - BORDER_SIZE}px;\r\n    color: ${props => props.theme.colors.paginationCursorText};\r\n    font-size: 12px;\r\n    line-height: 14px;\r\n    font-weight: 700;\r\n    text-align: center;\r\n    min-width: ${36 - 2 * BORDER_SIZE}px;\r\n`;\r\n","import * as React from \"react\";\r\nimport { TooltipRegular } from \"./overlay/tooltip/TooltipRegular\";\r\nimport { ErrorIcon, IErrorIconProps } from \"./icon/ErrorIcon\";\r\n\r\ninterface IErrorHintProps extends IErrorIconProps {\r\n}\r\n\r\n/** Shows an error icon with an error message as a tooltip */\r\nexport class ErrorHint extends React.Component<IErrorHintProps> {\r\n    render() {\r\n        let { children, ...props } = this.props;\r\n\r\n        return (\r\n            <TooltipRegular content={children}>\r\n                <ErrorIcon {...props} />\r\n            </TooltipRegular>\r\n        );\r\n    }\r\n}\r\n","import styled from \"../../../styled-components\";\r\n\r\n/** @internal */\r\nexport const CursorPaginationRoot = styled.div`\r\n    padding: 24px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background: ${props => props.theme.colors.sidebarBg};\r\n\r\n    & > *:not(:first-child) {\r\n        margin-left: 8px;\r\n    }\r\n`;\r\n","import styled from \"../../../styled-components\";\r\nimport { SpinnerRegular } from \"../../../fx/SpinnerRegular\";\r\n\r\n/** @internal */\r\nexport const StyledSpinner = styled(SpinnerRegular)`\r\n    margin-top: 0;\r\n`;\r\n","import * as React from \"react\";\r\nimport { NavButton } from \"./internal/NavButton\";\r\nimport { PaginationPrevIcon } from \"../../icon/PaginationPrevIcon\";\r\nimport { PaginationNextIcon } from \"../../icon/PaginationNextIcon\";\r\nimport { Number } from \"../../data/Number\";\r\nimport { DelayedRender } from \"../../util/react/DelayedRender\";\r\nimport { Cursor } from \"./internal/Cursor\";\r\nimport { ErrorHint } from \"../../ErrorHint\";\r\nimport { CursorPaginationRoot } from \"./internal/CursorPaginationRoot\";\r\nimport { StyledSpinner } from \"./internal/Spinner\";\r\nimport { LoadStatus } from \"./LoadStatus\";\r\nimport { ICursorPaginationBaseProps } from \"./internal/ICursorPaginationBaseProps\";\r\n\r\nexport interface ICursorInfinitePaginationProps extends ICursorPaginationBaseProps {\r\n    isLastPage: boolean;\r\n}\r\n\r\nexport class CursorInfinitePagination extends React.Component<ICursorInfinitePaginationProps> {\r\n    static defaultProps = {\r\n        loadStatus: LoadStatus.Loaded\r\n    };\r\n\r\n    render() {\r\n        let { rangeStart, rangeEnd, isLastPage: isEndPage, loadStatus, errorText, locale} = this.props;\r\n        let isBusy = loadStatus === LoadStatus.NotLoaded;\r\n\r\n        return (\r\n            <CursorPaginationRoot>\r\n                <NavButton\r\n                    Icon={PaginationPrevIcon}\r\n                    disabled={rangeStart === 1 || isBusy}\r\n                    onClick={() => this.props.onPrevPage()} />\r\n                <Cursor>\r\n                    <Number value={rangeStart} locale={locale} />-<Number value={rangeEnd} locale={locale} />\r\n                </Cursor>\r\n                <NavButton\r\n                    Icon={PaginationNextIcon}\r\n                    disabled={isEndPage || isBusy}\r\n                    onClick={() => this.props.onNextPage()}\r\n                />\r\n                { isBusy ?\r\n                <DelayedRender delay={1}>\r\n                    <StyledSpinner />\r\n                </DelayedRender>\r\n                : loadStatus === LoadStatus.Error ?\r\n                <ErrorHint>{errorText}</ErrorHint>\r\n                : null }\r\n            </CursorPaginationRoot>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\nimport { IGridFieldRenderer } from \"@alethio/ui/lib/control/grid/state/IGridFieldRenderer\";\nimport { Hash } from \"@alethio/ui/lib/data/Hash\";\nimport { GridLink } from \"../../GridLink\";\n\nexport class AccountLinkRenderer<T> implements IGridFieldRenderer<T> {\n    constructor(\n        private gridFieldDataGetter: (f: T) => string\n    ) {\n    }\n\n    render(f: T) {\n        let hash = this.gridFieldDataGetter(f);\n        return (\n            <GridLink to={`page://aleth.io/account?accountHash=${hash}`} >\n                <Hash>{ hash }</Hash>\n            </GridLink>\n        );\n    }\n}\n","import * as React from \"react\";\nimport { IGridFieldRenderer } from \"@alethio/ui/lib/control/grid/state/IGridFieldRenderer\";\nimport { Hash } from \"@alethio/ui/lib/data/Hash\";\nimport { GridLink } from \"../../GridLink\";\n\nexport class TxLinkRenderer<T> implements IGridFieldRenderer<T> {\n    constructor(\n        private gridFieldDataGetter: (f: T) => string\n    ) {\n    }\n\n    render(f: T) {\n        let hash = this.gridFieldDataGetter(f);\n        return (\n            <GridLink to={`page://aleth.io/tx?txHash=${hash}`} >\n                <Hash>{ hash }</Hash>\n            </GridLink>\n        );\n    }\n}\n","import { Link } from \"plugin-api/component/Link\";\nimport styled from \"@alethio/ui/lib/styled-components\";\n\nexport const GridLink = styled(Link)`\n    color: ${({theme}) => theme.colors.link};\n`;\n","import * as React from \"react\";\r\nimport styled from \"../styled-components\";\r\nimport { SvgIcon, ISvgIconProps } from \"../util/react/SvgIcon\";\r\n\r\nexport interface IErrorSmallIconProps extends ISvgIconProps {\r\n}\r\n\r\nconst ErrorSmallIconRoot = styled.div`\r\n    color: ${props => props.theme.colors.error};\r\n`;\r\n\r\nexport class ErrorSmallIcon extends React.PureComponent<IErrorSmallIconProps> {\r\n    render() {\r\n        return (\r\n            <ErrorSmallIconRoot>\r\n                <SvgIcon {...this.props}>\r\n                    <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\r\n                        <polygon points=\"0 0 24 0 24 24 0 24\"></polygon>\r\n                        <path d={\r\n                            // tslint:disable-next-line:max-line-length\r\n                            \"M12,5 C8.136,5 5,8.136 5,12 C5,15.864 8.136,19 12,19 C15.864,19 19,15.864 19,12 C19,8.136 15.864,5 12,5 Z M13,16 L11,16 L11,14 L13,14 L13,16 Z M13,13 L11,13 L11,8 L13,8 L13,13 Z\"\r\n                        } fill=\"currentColor\" fillRule=\"nonzero\"></path>\r\n                    </g>\r\n                </SvgIcon>\r\n            </ErrorSmallIconRoot>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SvgIcon, ISvgIconProps } from \"../util/react/SvgIcon\";\r\n\r\nexport interface ICloseSmallIconProps extends ISvgIconProps {\r\n}\r\n\r\nexport class CloseSmallIcon extends React.Component<ICloseSmallIconProps> {\r\n    render() {\r\n        return (\r\n            <SvgIcon {...this.props}>\r\n                <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\r\n                    <polygon points=\"0 0 24 0 24 24 0 24\"></polygon>\r\n                    <polygon fill=\"currentColor\" fillRule=\"nonzero\"\r\n                        // tslint:disable-next-line:max-line-length\r\n                        points=\"14.8284271 16.2426407 12 13.4142136 9.17157288 16.2426407 7.75735931 14.8284271 10.5857864 12 7.75735931 9.17157288 9.17157288 7.75735931 12 10.5857864 14.8284271 7.75735931 16.2426407 9.17157288 13.4142136 12 16.2426407 14.8284271\"\r\n                    ></polygon>\r\n                </g>\r\n            </SvgIcon>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport styled from \"../styled-components\";\r\nimport { CloseSmallIcon } from \"../icon/CloseSmallIcon\";\r\n\r\ninterface IModalSelectBox {\r\n    onClose(): void;\r\n}\r\n\r\nconst CloseButton = styled.div`\r\n    cursor: pointer;\r\n    line-height: 1;\r\n    color: ${({theme}) => theme.colors.closeBtn};\r\n`;\r\nconst ModalSelectBoxWrapper = styled.div`\r\n    padding: 16px;\r\n    border-radius: 8px;\r\n    background-color: ${props => props.theme.colors.overlayBg};\r\n    border: 1px solid #D0DEF2;\r\n    box-shadow: 0 2px 4px 0 rgba(51,69,100,0.07), 0 6px 16px 0 rgba(51,69,100,0.08);\r\n`;\r\n\r\nexport class ModalSelectBox extends React.Component<IModalSelectBox> {\r\n    render() {\r\n        return (\r\n            <ModalSelectBoxWrapper>\r\n                <div style={{padding: \"4px\"}}>\r\n                    <CloseButton onClick={this.props.onClose}>\r\n                        <CloseSmallIcon />\r\n                    </CloseButton>\r\n                </div>\r\n                { this.props.children }\r\n            </ModalSelectBoxWrapper>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport styled from \"../styled-components\";\r\nimport { Manager, Reference, Popper} from \"react-popper\";\r\nimport { observer } from \"mobx-react\";\r\nimport { observable } from \"mobx\";\r\nimport { ModalSelectBox } from \"./ModalSelectBox\";\r\n\r\nexport interface ISelectBoxOffset {\r\n    left: number;\r\n    top: number;\r\n}\r\n\r\ninterface ISelectBoxProps {\r\n    disabled?: boolean;\r\n    // string in format \"left, top\"\r\n    offset?: ISelectBoxOffset;\r\n    render(args: {requestClose(): void}): React.ReactNode;\r\n}\r\nconst Overlay = styled.div`\r\n    position: fixed;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n`;\r\n\r\n@observer\r\nexport class SelectBox extends React.Component<ISelectBoxProps> {\r\n\r\n    @observable\r\n    private isOpened = false;\r\n\r\n    render() {\r\n        let { disabled } = this.props;\r\n\r\n        return (\r\n            <Manager>\r\n                <Reference>\r\n                    {({ref}) =>\r\n                        <div ref={ref} onClick={!disabled ? this.openSelectBox : void 0} style={{\r\n                            cursor: !disabled ? \"pointer\" : \"default\"\r\n                        }}>\r\n                            { this.props.children }\r\n                        </div>\r\n                    }\r\n                </Reference>\r\n                {this.isOpened ?\r\n                ReactDOM.createPortal(\r\n                    <>\r\n                        <Overlay onClick={this.closeSelectBox} />\r\n                        <Popper modifiers={{\r\n                            offset: {\r\n                                offset: this.props.offset ?\r\n                                    this.props.offset.left + \"px, \" + this.props.offset.top + \"px\" :\r\n                                    \"auto\"\r\n                            },\r\n                            flip: {\r\n                                enabled: false\r\n                            },\r\n                            preventOverflow: {\r\n                                enabled: true\r\n                            },\r\n                            hide: {\r\n                                enabled: false\r\n                            }\r\n                        }} placement=\"bottom-start\">\r\n                            {({ref, placement, style}) => (\r\n                                <div ref={ref} data-placement={placement} style={style}>\r\n                                    <ModalSelectBox onClose={this.closeSelectBox}>\r\n                                        { this.props.render({requestClose: this.closeSelectBox}) }\r\n                                    </ModalSelectBox>\r\n                                </div>\r\n                            )}\r\n                        </Popper>\r\n                    </>,\r\n                    document.body\r\n                )\r\n                : null }\r\n            </Manager>\r\n        );\r\n    }\r\n\r\n    private openSelectBox = () => {\r\n        this.isOpened = true;\r\n    }\r\n\r\n    private closeSelectBox = () => {\r\n        this.isOpened = false;\r\n    }\r\n}\r\n","export enum LoadStatus {\r\n    NotLoaded,\r\n    Loaded,\r\n    Error\r\n}\r\n","import * as React from \"react\";\r\nimport { IGridFieldRenderer } from \"../../control/grid/state/IGridFieldRenderer\";\r\nimport { DateTime } from \"../DateTime\";\r\n\r\nexport class DateTimeRenderer<T> implements IGridFieldRenderer<T> {\r\n    constructor(\r\n        private locale: string,\r\n        private gridFieldDataGetter: (f: T) => number\r\n    ) {\r\n    }\r\n\r\n    render(f: T) {\r\n        return (\r\n            <DateTime timestamp={this.gridFieldDataGetter(f)} locale={this.locale} />\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\nimport { observable, IReactionDisposer, when, reaction, runInAction } from \"mobx\";\nimport { observer, PropTypes } from \"mobx-react\";\nimport { IAccordionItemConfig } from \"./IAccordionItemConfig\";\nimport { LayoutRow } from \"../../layout/content/LayoutRow\";\nimport { LayoutRowItem } from \"../../layout/content/LayoutRowItem\";\nimport { Label } from \"../../data/Label\";\nimport { AccordionState } from \"./internal/AccordionState\";\nimport { AccordionContentWrapper } from \"./internal/AccordionContentWrapper\";\nimport { Height } from \"../../fx/Height\";\nimport { AccordionItemState } from \"./AccordionItemState\";\nimport { AccordionItemContentStatus } from \"./AccordionItemContentStatus\";\n\nexport interface IAccordionVerticalProps<TItemConfig extends IAccordionItemConfig> {\n    label: string;\n    noDataContent: React.ReactElement<{}>;\n    loadingText: string;\n    errorText: string;\n    contentAnimSeconds?: number;\n    children?: React.ReactNode;\n    onContentError(e: any, item: AccordionItemState<TItemConfig>): void;\n    renderExpander(args: {\n        config: TItemConfig;\n        isOpen: boolean;\n        isFullWidth: boolean;\n        onClick(): void;\n        onResize(): void;\n    }): React.ReactElement<{}>;\n    renderHeader?(args: {\n        config: TItemConfig;\n        isOpen: boolean;\n    }): React.ReactNode;\n    renderContent?(args: {\n        content?: React.ReactElement<{}>;\n        status: AccordionItemContentStatus;\n        arrowPosition?: number;\n        config: TItemConfig;\n    }): React.ReactElement<{}>;\n}\n\n/**\n * Accordion with async loading that uses the standard LayoutRow/LayoutItem components to display its data\n *\n * Uses a vertical layout, calculating the width of the largest expander and sets all expanders to the same width\n *\n * For each accordion item, a corresponding <AccordionItem /> instance should be passed as a child\n * to the accordion instance. Passing arbitrary props to each item is possible and is reflected\n * in the TItemConfig generic type parameter:\n *\n * ```ts\n * import { IAccordionItemConfig } from \"@alethio/ui/lib/control/accordion/IAccordionItemConfig\";\n *\n * interface IItemData extends IAccordionItemConfig {\n *     foo: string;\n * }\n * <AccordionVertical<IItemData> ...>\n *     <AccordionItem<IItemData> foo=\"bar\" content={async () => <div>Test</div>} />\n * </AccordionVertical>\n * ```\n */\n@observer\nexport class AccordionVertical<TItemConfig extends IAccordionItemConfig>\nextends React.Component<IAccordionVerticalProps<TItemConfig>> {\n    static defaultProps: Pick<IAccordionVerticalProps<any>, \"contentAnimSeconds\"> = {\n        contentAnimSeconds: .2\n    };\n\n    // We use legacy context because the accordion and the children\n    // may be instantiated from different apps library instances and the createContext API won't work in this case\n    /** @internal */\n    static childContextTypes = {\n        // Just so we don't have to import react prop-types. We don't care about the shape anyway\n        accordionState: PropTypes.objectOrObservableObject\n    };\n    /** @internal */\n    private accordionState: AccordionState<TItemConfig>;\n\n    @observable\n    private expanderEls = new Map<number, HTMLElement>();\n    @observable\n    private fixedExpanderWidth: number | undefined;\n    private containerOffsetLeft: number | undefined;\n    private widthWatchDisposer: IReactionDisposer | undefined;\n    private refreshDisposer: IReactionDisposer | undefined;\n\n    constructor(props: IAccordionVerticalProps<TItemConfig>) {\n        super(props);\n\n        this.accordionState = new AccordionState<TItemConfig>(this.props.onContentError);\n\n        this.refreshDisposer = reaction(() => this.accordionState.getItems().map(i => i.config), () => {\n            // Reset width and recalculate\n            runInAction(() => {\n                this.fixedExpanderWidth = void 0;\n                this.expanderEls.clear();\n            });\n            this.destroyWidthWatch();\n            this.setupWidthWatch();\n        }, {\n            // HACK: The reaction triggers before re-render with new items resulting in incorrect width\n            // Debounce also helps with multiple triggers due to changes in each item\n            delay: 100,\n            equals: (itemConfigs: TItemConfig[], prevItemConfigs: TItemConfig[]) => {\n                if (itemConfigs.length !== prevItemConfigs.length) {\n                    return false;\n                }\n                return itemConfigs.every((item, idx) => item === prevItemConfigs[idx]);\n            }\n        });\n    }\n\n    /** @internal */\n    getChildContext() {\n        return { accordionState: this.accordionState };\n    }\n\n    componentDidMount() {\n        this.setupWidthWatch();\n    }\n\n    private setupWidthWatch() {\n        const items = this.accordionState.getItems();\n        if (items.length) {\n            this.widthWatchDisposer = when(() => this.expanderEls.size === items.length, () => {\n                this.computeWidth();\n            });\n        }\n    }\n\n    private destroyWidthWatch() {\n        if (this.widthWatchDisposer) {\n            this.widthWatchDisposer();\n            this.widthWatchDisposer = void 0;\n        }\n    }\n\n    componentWillUnmount() {\n        this.destroyWidthWatch();\n        if (this.refreshDisposer) {\n            this.refreshDisposer();\n            this.refreshDisposer = void 0;\n        }\n    }\n\n    private computeWidth() {\n        let maxWidth = [...this.expanderEls.values()].reduce((max, el) => Math.max(max, el.offsetWidth), 0);\n        // HACK: Add 1 to account for rounding errors (subpixel rendering)\n        this.fixedExpanderWidth = maxWidth + 1;\n    }\n\n    render() {\n        return <>\n            { /* Just make sure there wasn't something extra besides <AccordionItem>-s, which return null */ }\n            <div style={{ position: \"fixed\", top: -10000, left: -10000 }}>\n                { /* Children aren't actually visible, we just use this method as hook to add items dynamically */ }\n                { this.props.children }\n            </div>\n            { this.renderItems() }\n        </>;\n    }\n\n    private renderItems() {\n        if (!this.accordionState.getItems().length) {\n            return <LayoutRow>\n                <LayoutRowItem>\n                    <Label>{this.props.label}</Label>\n                    {this.props.noDataContent}\n                </LayoutRowItem>\n            </LayoutRow>;\n        }\n\n        let items = this.accordionState.getItems();\n        let activeItem = this.accordionState.getActiveItem();\n\n        return <div ref={this.handleContainerRef}>\n            { items.map((item, idx) => <React.Fragment key={idx}>\n                <LayoutRow responsive={{ignoreFirstLabel: \"forLowRes\"}}>\n                    <LayoutRowItem>\n                        <Label>{ !idx ? this.props.label : void 0}</Label>\n                        <div\n                            ref={ref => ref && this.expanderEls.set(idx, ref)}\n                            style={{ width: this.fixedExpanderWidth }}\n                        >\n                            { this.props.renderExpander({\n                                config: item.config,\n                                isFullWidth: !!this.fixedExpanderWidth,\n                                isOpen: item === activeItem,\n                                onClick: item.onClick,\n                                onResize: this.onExpanderResize\n                            }) }\n                        </div>\n                        { this.props.renderHeader && this.props.renderHeader({\n                            config: item.config,\n                            isOpen: item === activeItem\n                        }) }\n                    </LayoutRowItem>\n                </LayoutRow>\n                <Height duration={this.props.contentAnimSeconds!}>\n                    { item === activeItem && <AccordionContentWrapper<TItemConfig>\n                        content={item.content}\n                        config={item.config}\n                        status={item.contentStatus}\n                        arrowPosition={this.getContentArrowPosition()}\n                        loadingDelay={this.props.contentAnimSeconds!}\n                        errorText={this.props.errorText}\n                        loadingText={this.props.loadingText}\n                        renderContent={this.props.renderContent}\n                    />}\n                </Height>\n            </React.Fragment>) }\n        </div>;\n    }\n\n    private handleContainerRef = (ref: HTMLElement | null) => {\n        if (ref) {\n            this.containerOffsetLeft = ref.offsetLeft;\n        }\n    }\n\n    private getContentArrowPosition() {\n        if (this.expanderEls.size && this.containerOffsetLeft !== void 0 && this.fixedExpanderWidth) {\n            let expanderEl = this.expanderEls.values().next().value;\n            return expanderEl.offsetLeft - this.containerOffsetLeft + this.fixedExpanderWidth / 2;\n        }\n\n        return void 0;\n    }\n\n    private onExpanderResize = () => {\n        this.fixedExpanderWidth = void 0;\n        this.destroyWidthWatch();\n        this.setupWidthWatch();\n    }\n}\n","export enum GridSortingOrder {\r\n    Ascending,\r\n    Descending,\r\n    Default\r\n}\r\n","import * as React from \"react\";\r\nimport { IGridFieldRenderer } from \"../../control/grid/state/IGridFieldRenderer\";\r\nimport { EthValue } from \"../EthValue\";\r\nimport { BigNumber } from \"../../util/BigNumber\";\r\n\r\nexport class EthRenderer<T> implements IGridFieldRenderer<T> {\r\n    constructor(\r\n        private locale: string,\r\n        private gridFieldDataGetter: (f: T) => BigNumber,\r\n        private options: {decimals?: number} = {}\r\n    ) {\r\n    }\r\n\r\n    render(f: T) {\r\n        return (\r\n            <EthValue wei={this.gridFieldDataGetter(f)} locale={this.locale} showSymbol={false}\r\n                decimals={this.options.decimals} />\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { IGridFieldRenderer } from \"../../control/grid/state/IGridFieldRenderer\";\r\nimport { Hash } from \"../Hash\";\r\n\r\nexport class HashRenderer<T> implements IGridFieldRenderer<T> {\r\n    constructor(\r\n        private gridFieldDataGetter: (f: T) => string\r\n    ) {\r\n    }\r\n\r\n    render(f: T) {\r\n        let hash = this.gridFieldDataGetter(f);\r\n        return (\r\n            <Hash>{ hash }</Hash>\r\n        );\r\n    }\r\n}\r\n","import { IGridFieldRenderer } from \"@alethio/ui/lib/control/grid/state/IGridFieldRenderer\";\nimport { HashRenderer } from \"@alethio/ui/lib/data/gridRenderer/HashRenderer\";\nimport { AccountLinkRenderer } from \"./AccountLinkRenderer\";\n\nexport class AccountHashRenderer<T> implements IGridFieldRenderer<T> {\n    private hashRenderer: HashRenderer<T>;\n    private hashLinkRenderer: AccountLinkRenderer<T>;\n\n    constructor(\n        private accountAddress: string | undefined,\n        private gridFieldDataGetter: (f: T) => string\n    ) {\n        this.hashRenderer = new HashRenderer(gridFieldDataGetter);\n        this.hashLinkRenderer = new AccountLinkRenderer(gridFieldDataGetter);\n    }\n\n    render(f: T) {\n        let hash = this.gridFieldDataGetter(f);\n        return hash === this.accountAddress ? this.hashRenderer.render(f) : this.hashLinkRenderer.render(f);\n    }\n}\n","import styled from \"../../../styled-components\";\r\n\r\ninterface IGridLayoutProps {\r\n    numberOfFields: number;\r\n    className?: string;\r\n}\r\n\r\n/** @internal */\r\nexport const GridLayout = styled<IGridLayoutProps, \"div\">(\"div\")`\r\n    overflow-x: auto;\r\n    display: grid;\r\n    grid-template-columns: auto ${({ numberOfFields }) => {\r\n        if (numberOfFields === 0) {\r\n            return \"\";\r\n        }\r\n        if (numberOfFields === 1) {\r\n            return \"max-content\";\r\n        }\r\n        const repeatTimes = numberOfFields - 1;\r\n        return \"repeat( \" + repeatTimes + \", max-content 1px) max-content\";\r\n    }} auto;\r\n    font-size: 14px;\r\n    font-weight: 500;\r\n    letter-spacing: .2px;\r\n`;\r\n","import * as React from \"react\";\r\nimport { SvgIcon, ISvgIconProps } from \"../util/react/SvgIcon\";\r\n\r\nexport interface ICheckboxOnIconProps extends ISvgIconProps {\r\n\r\n}\r\n\r\nexport class CheckboxOnIcon extends React.Component<ICheckboxOnIconProps> {\r\n    render() {\r\n        return (\r\n            <SvgIcon {...this.props}>\r\n                <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\r\n                    <polygon points=\"0 0 24 0 24 24 0 24\"></polygon>\r\n                    <path d={\r\n                        // tslint:disable-next-line:max-line-length\r\n                        \"M9.1277704,4 L14.8722296,4 C16.6552671,4 17.3018396,4.18565122 17.9536914,4.53426541 C18.6055433,4.88287959 19.1171204,5.39445674 19.4657346,6.04630859 C19.8143488,6.69816044 20,7.34473292 20,9.1277704 L20,14.8722296 C20,16.6552671 19.8143488,17.3018396 19.4657346,17.9536914 C19.1171204,18.6055433 18.6055433,19.1171204 17.9536914,19.4657346 C17.3018396,19.8143488 16.6552671,20 14.8722296,20 L9.1277704,20 C7.34473292,20 6.69816044,19.8143488 6.04630859,19.4657346 C5.39445674,19.1171204 4.88287959,18.6055433 4.53426541,17.9536914 C4.18565122,17.3018396 4,16.6552671 4,14.8722296 L4,9.1277704 C4,7.34473292 4.18565122,6.69816044 4.53426541,6.04630859 C4.88287959,5.39445674 5.39445674,4.88287959 6.04630859,4.53426541 C6.69816044,4.18565122 7.34473292,4 9.1277704,4 Z M15,8.5 L10.51,13 L8.5,11 L7,12.5 L10.51,16 L16.5,10 L15,8.5 Z\"\r\n                    } fill=\"currentColor\" fillRule=\"nonzero\"></path>\r\n                </g>\r\n            </SvgIcon>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SvgIcon, ISvgIconProps } from \"../util/react/SvgIcon\";\r\n\r\nexport interface ICheckboxOffIconProps extends ISvgIconProps {\r\n\r\n}\r\n\r\nexport class CheckboxOffIcon extends React.Component<ICheckboxOffIconProps> {\r\n    render() {\r\n        return (\r\n            <SvgIcon {...this.props}>\r\n                <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\r\n                    <polygon points=\"0 0 24 0 24 24 0 24\"></polygon>\r\n                    <path d={\r\n                        // tslint:disable-next-line:max-line-length\r\n                        \"M9.1277704,4 L14.8722296,4 C16.6552671,4 17.3018396,4.18565122 17.9536914,4.53426541 C18.6055433,4.88287959 19.1171204,5.39445674 19.4657346,6.04630859 C19.8143488,6.69816044 20,7.34473292 20,9.1277704 L20,14.8722296 C20,16.6552671 19.8143488,17.3018396 19.4657346,17.9536914 C19.1171204,18.6055433 18.6055433,19.1171204 17.9536914,19.4657346 C17.3018396,19.8143488 16.6552671,20 14.8722296,20 L9.1277704,20 C7.34473292,20 6.69816044,19.8143488 6.04630859,19.4657346 C5.39445674,19.1171204 4.88287959,18.6055433 4.53426541,17.9536914 C4.18565122,17.3018396 4,16.6552671 4,14.8722296 L4,9.1277704 C4,7.34473292 4.18565122,6.69816044 4.53426541,6.04630859 C4.88287959,5.39445674 5.39445674,4.88287959 6.04630859,4.53426541 C6.69816044,4.18565122 7.34473292,4 9.1277704,4 Z M8.5638852,6 C7.67236646,6 7.34908022,6.09282561 7.0231543,6.2671327 C6.69722837,6.4414398 6.4414398,6.69722837 6.2671327,7.0231543 C6.09282561,7.34908022 6,7.67236646 6,8.5638852 L6,15.4361148 C6,16.3276335 6.09282561,16.6509198 6.2671327,16.9768457 C6.4414398,17.3027716 6.69722837,17.5585602 7.0231543,17.7328673 C7.34908022,17.9071744 7.67236646,18 8.5638852,18 L15.4361148,18 C16.3276335,18 16.6509198,17.9071744 16.9768457,17.7328673 C17.3027716,17.5585602 17.5585602,17.3027716 17.7328673,16.9768457 C17.9071744,16.6509198 18,16.3276335 18,15.4361148 L18,8.5638852 C18,7.67236646 17.9071744,7.34908022 17.7328673,7.0231543 C17.5585602,6.69722837 17.3027716,6.4414398 16.9768457,6.2671327 C16.6509198,6.09282561 16.3276335,6 15.4361148,6 L8.5638852,6 Z\"\r\n                    } fill=\"currentColor\"></path>\r\n                </g>\r\n            </SvgIcon>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport styled from \"../styled-components\";\r\nimport { CheckboxOnIcon } from \"../icon/CheckboxOnIcon\";\r\nimport { CheckboxOffIcon } from \"../icon/CheckboxOffIcon\";\r\n\r\nconst CheckboxWrapper = styled.div`\r\n    padding: 8px 8px 8px 32px;\r\n    position: relative;\r\n`;\r\nconst CheckboxLabel = styled.label`\r\n    text-transform: uppercase;\r\n    display: block;\r\n    font-size: 12px;\r\n    line-height: 16px;\r\n    font-weight: 600;\r\n    color: ${({theme}) => theme.colors.checkboxLabel};\r\n`;\r\nconst CheckboxIconWrapper = styled.div`\r\n    position: absolute;\r\n    top: 4px;\r\n    left: 4px;\r\n    color: ${({theme}) => theme.colors.checkboxIcon};\r\n`;\r\n\r\ninterface ICheckboxProps {\r\n    id: string;\r\n    name: string;\r\n    value?: string | number;\r\n    checked?: boolean;\r\n    onChange?(\r\n        event: React.ChangeEvent<HTMLInputElement>,\r\n        checked: boolean,\r\n        name: string,\r\n        value?: string | number\r\n    ): void;\r\n}\r\n\r\nexport class Checkbox extends React.PureComponent<ICheckboxProps> {\r\n    render() {\r\n        return (\r\n            <CheckboxWrapper>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    id={this.props.id}\r\n                    checked={this.props.checked || false}\r\n                    value={this.props.value}\r\n                    onChange={this.onChange}\r\n                    style={{display: \"none\"}}\r\n                />\r\n                <CheckboxLabel htmlFor={this.props.id}>\r\n                    <CheckboxIconWrapper>\r\n                        { this.props.checked ? <CheckboxOnIcon /> : <CheckboxOffIcon />}\r\n                    </CheckboxIconWrapper>\r\n                    {this.props.children}\r\n                </CheckboxLabel>\r\n            </CheckboxWrapper>\r\n        );\r\n    }\r\n\r\n    private onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (this.props.onChange) {\r\n            this.props.onChange(event, !this.props.checked, this.props.name, this.props.value);\r\n        }\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { SvgIcon, ISvgIconProps } from \"../util/react/SvgIcon\";\r\n\r\nexport interface IAddIconProps extends ISvgIconProps {\r\n\r\n}\r\n\r\nexport class AddIcon extends React.Component<IAddIconProps> {\r\n    render() {\r\n        return (\r\n            <SvgIcon {...this.props}>\r\n                <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\r\n                    <polygon points=\"0 0 24 0 24 24 0 24\"></polygon>\r\n                    <path d={\r\n                        \"M19,3 L5,3 C3.89,3 3,3.9 3,5 L3,19 C3,20.1 3.89,21 5,21 L19,21 \" +\r\n                        \"C20.1,21 21,20.1 21,19 L21,5 C21,3.9 20.1,3 19,3 Z \" +\r\n                        \"M17,13 L13,13 L13,17 L11,17 L11,13 L7,13 L7,11 \" +\r\n                        \"L11,11 L11,7 L13,7 L13,11 L17,11 L17,13 Z\"\r\n                    }\r\n                    fill=\"currentColor\" fillRule=\"nonzero\"></path>\r\n                </g>\r\n            </SvgIcon>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport styled from \"../../../../styled-components\";\r\nimport { Checkbox } from \"../../../Checkbox\";\r\nimport { IGridFieldBase } from \"../../state/IGridFieldBase\";\r\nimport { SelectBox } from \"../../../SelectBox\";\r\nimport { AddIcon } from \"../../../../icon/AddIcon\";\r\n\r\ninterface IGridColumnSelectorProps {\r\n    fields: IGridFieldBase[];\r\n    onChange(key: string, checked: boolean): void;\r\n}\r\n\r\nconst ColumnSelectorIconWrapper = styled.div`\r\n    color: ${({theme}) => theme.colors.gridColumnSelector};\r\n`;\r\n\r\n/** @internal */\r\nexport class GridColumnSelector extends React.PureComponent<IGridColumnSelectorProps> {\r\n    render() {\r\n        let shownItems = this.props.fields.filter((f) => !f.alwaysVisible);\r\n        if (shownItems.length === 0) {\r\n            return null;\r\n        }\r\n        return (\r\n            <div style={{padding: \"4px\"}}>\r\n                <SelectBox offset={{left: -21, top: -45}} render={() =>\r\n                    shownItems.map((f) => {\r\n                        return <Checkbox\r\n                            id={\"column_\" + f.fieldKey}\r\n                            key={f.fieldKey}\r\n                            name={f.fieldKey}\r\n                            value={f.fieldKey}\r\n                            checked={f.selected}\r\n                            onChange={this.onCheckboxChange}\r\n                        >{f.label}</Checkbox>;\r\n                    })\r\n                }>\r\n                    <ColumnSelectorIconWrapper>\r\n                        <AddIcon />\r\n                    </ColumnSelectorIconWrapper>\r\n                </SelectBox>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onCheckboxChange = (\r\n        _e: React.ChangeEvent<HTMLInputElement>,\r\n        checked: boolean,\r\n        name: string,\r\n        _value: string\r\n    ) => {\r\n        this.props.onChange(name, checked);\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport styled from \"../../../../styled-components\";\r\nimport { GridColumnSelector } from \"./GridColumnSelector\";\r\nimport { IGridFieldBase } from \"../../state/IGridFieldBase\";\r\n\r\nexport interface IGridHeaderExtraElements {\r\n    left?: React.ReactNode;\r\n    right?: React.ReactNode;\r\n}\r\ninterface IGridHeaderProps {\r\n    fields: IGridFieldBase[];\r\n    extraElements?: IGridHeaderExtraElements;\r\n    onFieldsChange(key: string, checked: boolean): void;\r\n}\r\n\r\nconst HeaderSpacer = styled.div`\r\n    border-bottom: 1px solid ${props => props.theme.colors.gridBorder};\r\n    background-color: ${props => props.theme.colors.gridEvenRowBg};\r\n    display: flex;\r\n`;\r\nconst HeaderSpacerLeft = styled(HeaderSpacer)``;\r\nconst HeaderSpacerRight = styled(HeaderSpacer)`\r\n    justify-content: flex-end;\r\n`;\r\nconst HeaderVertBorder = styled.div`\r\n    background-color: ${props => props.theme.colors.gridBorder};\r\n    height: 100%;\r\n    align-self: end;\r\n`;\r\n\r\n/** @internal */\r\nexport class GridHeader extends React.PureComponent<IGridHeaderProps> {\r\n    render() {\r\n        const propsChildren: React.ReactChild[] = React.Children.toArray(this.props.children);\r\n        const resultChildren = propsChildren.reduce((acc: React.ReactChild[], c, i) => {\r\n            acc.push(<span key={-i - 1}>{c}</span>);\r\n            if (i !== propsChildren.length - 1) {\r\n                acc.push(<HeaderVertBorder key={i + 1} />);\r\n            }\r\n            return acc;\r\n        }, [\r\n            <HeaderSpacerLeft key={0} >\r\n                <GridColumnSelector onChange={(key: string, checked: boolean) => {\r\n                    this.props.onFieldsChange(key, checked);\r\n                }} fields={this.props.fields} />\r\n                { this.props.extraElements && this.props.extraElements.left }\r\n            </HeaderSpacerLeft>\r\n        ]);\r\n        resultChildren.push(\r\n            <HeaderSpacerRight key={propsChildren.length + 1} >\r\n                { this.props.extraElements && this.props.extraElements.right }\r\n            </HeaderSpacerRight>\r\n        );\r\n\r\n        return resultChildren;\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport styled from \"../../../styled-components\";\r\n\r\nconst GRID_CELL_PADDING_X = 32;\r\nconst GRID_CELL_PADDING_Y = 8;\r\n\r\ninterface ISpacerProps {\r\n    odd?: boolean;\r\n    className?: string;\r\n}\r\nconst Spacer = styled<ISpacerProps, \"div\">(\"div\")`\r\n    background-color: ${({ odd, theme }) => odd ? theme.colors.gridOddRowBg : theme.colors.gridEvenRowBg};\r\n`;\r\n\r\ninterface IItemProps {\r\n    odd?: boolean;\r\n    className?: string;\r\n}\r\nconst Item = styled<IItemProps, \"div\">(\"div\")`\r\n    padding: ${GRID_CELL_PADDING_Y}px ${GRID_CELL_PADDING_X}px;\r\n    background-color: ${({ odd, theme }) => odd ? theme.colors.gridOddRowBg : theme.colors.gridEvenRowBg};\r\n`;\r\nconst VertBorder = styled.div`\r\n    background-color: ${props => props.theme.colors.gridBorder};\r\n`;\r\n\r\ninterface IGridRowProps {\r\n    odd?: boolean;\r\n}\r\n\r\n/** @internal */\r\nexport class GridRow extends React.PureComponent<IGridRowProps> {\r\n    render() {\r\n        const propsChildren: React.ReactChild[] = React.Children.toArray(this.props.children);\r\n        const resultChildren = propsChildren.reduce((acc: React.ReactChild[], c, i) => {\r\n            acc.push(<Item odd={this.props.odd} key={-i - 1}>{c}</Item>);\r\n            if (i !== propsChildren.length - 1) {\r\n                acc.push(<VertBorder key={i + 1} />);\r\n            }\r\n            return acc;\r\n        }, [\r\n            <Spacer odd={this.props.odd} key={0} />\r\n        ]);\r\n        resultChildren.push(<Spacer odd={this.props.odd} key={propsChildren.length + 1} />);\r\n\r\n        return resultChildren;\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport styled, { css } from \"../../../../styled-components\";\r\nimport { Label } from \"../../../../data/Label\";\r\nimport { IGridSortingOptions } from \"../../state/IGridSortingOptions\";\r\nimport { GridSortingOrder } from \"../../state/GridSortingOrder\";\r\nimport { IGridFieldBase } from \"../../state/IGridFieldBase\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nconst GridHeaderHitBox = styled.div`\r\n`;\r\n\r\ninterface IHeaderItemProps {\r\n    isSortable: boolean;\r\n    onClick(): void;\r\n}\r\nconst HeaderItem = styled<IHeaderItemProps, \"div\">(\"div\")`\r\n    background: ${props => props.theme.colors.gridEvenRowBg};\r\n    padding: 10px 8px 10px 32px;\r\n    border-bottom: 1px solid ${props => props.theme.colors.gridBorder};\r\n    cursor: ${props => props.isSortable ? \"pointer\" : \"default\"};\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n\r\n    ${props => props.isSortable ? css`\r\n        & ${Label} {\r\n            padding: 0;\r\n            ${GridHeaderHitBox}:hover & {\r\n                color: ${props.theme.colors.gridHeaderHover};\r\n            }\r\n        }\r\n    ` : css`\r\n        & ${Label} {\r\n            padding: 0;\r\n        }\r\n    `}\r\n`;\r\nconst ArrowDown = styled.div`\r\n    border-top: 5px solid ${props => props.theme.colors.selectBoxArrow};\r\n    border-left: 5px solid transparent;\r\n    border-right: 5px solid transparent;\r\n    margin: 0 7px;\r\n    ${GridHeaderHitBox}:hover & {\r\n        border-top-color: ${props => props.theme.colors.gridHeaderHover};;\r\n    }\r\n`;\r\nconst ArrowUp = styled.div`\r\n    border-bottom: 5px solid ${props => props.theme.colors.selectBoxArrow};\r\n    border-left: 5px solid transparent;\r\n    border-right: 5px solid transparent;\r\n    margin: 0 7px;\r\n    ${GridHeaderHitBox}:hover & {\r\n        border-bottom-color: ${props => props.theme.colors.gridHeaderHover};;\r\n    }\r\n`;\r\nconst NoArrow = styled.div`\r\n    width: 24px;\r\n`;\r\n\r\ninterface IGridHeaderItemProps {\r\n    field: IGridFieldBase;\r\n    sortingOptions?: IGridSortingOptions;\r\n    onClick?(field: IGridFieldBase): void;\r\n}\r\n\r\n/** @internal */\r\n@observer\r\nexport class GridHeaderItem extends React.Component<IGridHeaderItemProps> {\r\n    onClick = () => {\r\n        if (this.props.onClick) {\r\n            this.props.onClick(this.props.field);\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <GridHeaderHitBox>\r\n                <HeaderItem onClick={this.onClick} isSortable={this.props.field.isSortable}>\r\n                    <Label>{ this.props.children }</Label>\r\n                    { this.getHeaderSortArrow() }\r\n                </HeaderItem>\r\n            </GridHeaderHitBox>\r\n        );\r\n    }\r\n    private getHeaderSortArrow() {\r\n        if (!this.props.sortingOptions || this.props.sortingOptions.field !== this.props.field) {\r\n            return <NoArrow />;\r\n        }\r\n        if (this.props.sortingOptions.order === GridSortingOrder.Ascending) {\r\n            return <ArrowUp />;\r\n        }\r\n        if (this.props.sortingOptions.order === GridSortingOrder.Descending) {\r\n            return <ArrowDown />;\r\n        }\r\n        return <NoArrow />;\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport styled from \"../../../styled-components\";\r\n\r\nconst Wrapper = styled.div`\r\n    border-top: 1px solid ${props => props.theme.colors.gridBorder};\r\n    border-bottom: 1px solid ${props => props.theme.colors.gridBorder};\r\n`;\r\n\r\n/** @internal */\r\nexport const GridWrapper: React.StatelessComponent = ({ children }) => (\r\n    <Wrapper>\r\n        {children}\r\n    </Wrapper>\r\n);\r\n","import styled from \"../../../styled-components\";\r\n\r\ninterface IGridDataProps {\r\n    dataType: string;\r\n    className?: string;\r\n}\r\n\r\n/** @internal */\r\nexport const GridData = styled<IGridDataProps, \"div\">(\"div\")`\r\n    height: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: ${({ dataType }) => dataType === \"number\" ? \"flex-end\" : \"auto\"};\r\n`;\r\n","import * as React from \"react\";\r\nimport styled from \"../../styled-components\";\r\nimport { observer } from \"mobx-react\";\r\nimport { observable } from \"mobx\";\r\nimport { GridLayout } from \"./internal/GridLayout\";\r\nimport { IGridSortingOptions } from \"./state/IGridSortingOptions\";\r\nimport { GridSortingOrder } from \"./state/GridSortingOrder\";\r\nimport { IGridFieldBase } from \"./state/IGridFieldBase\";\r\nimport { GridHeader, IGridHeaderExtraElements } from \"./internal/header/GridHeader\";\r\nimport { GridRow } from \"./internal/GridRow\";\r\nimport { GridHeaderItem } from \"./internal/header/GridHeaderItem\";\r\nimport { GridWrapper } from \"./internal/GridWrapper\";\r\nimport { GridFields, IGridField } from \"./state/GridFields\";\r\nimport { GridData } from \"./internal/GridData\";\r\n\r\nconst LoadMoreRows = styled.div`\r\n    text-align: center;\r\n    font-size: 14px;\r\n    font-weight: 500;\r\n    padding: 8px;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst NoRowsAvailable = styled.div`\r\n    text-align: center;\r\n    font-size: 14px;\r\n    font-weight: 500;\r\n    padding: 8px;\r\n`;\r\n\r\nexport interface IGridDataRow<TData> {\r\n    key: string | number;\r\n    data: TData;\r\n}\r\n\r\nexport interface IGridProps<TData> {\r\n    rows: IGridDataRow<TData>[];\r\n    /** Show \"Load more\" when maxVisibleRows is exceeded (default true) */\r\n    limitRows?: boolean;\r\n    /** How many rows to show before \"Load more\" is shown (default 50) */\r\n    maxVisibleRows?: number;\r\n    fields: GridFields<TData>;\r\n    sortingOptions: IGridSortingOptions;\r\n    extraHeaderElements?: IGridHeaderExtraElements;\r\n    noDataText: string;\r\n    loadMoreText: string;\r\n}\r\n\r\n@observer\r\nexport class Grid<TData> extends React.Component<IGridProps<TData>> {\r\n    static defaultProps = {\r\n        maxVisibleRows: 50,\r\n        limitRows: true\r\n    };\r\n\r\n    @observable\r\n    private visibleRows: number;\r\n\r\n    constructor(props: IGridProps<TData>) {\r\n        super(props);\r\n\r\n        this.updateVisibleRows();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: IGridProps<TData>) {\r\n        if (this.props.limitRows !== prevProps.limitRows || this.props.maxVisibleRows !== prevProps.maxVisibleRows) {\r\n            this.updateVisibleRows();\r\n        }\r\n    }\r\n\r\n    private updateVisibleRows() {\r\n        this.visibleRows = this.props.limitRows ? this.props.maxVisibleRows! : Number.POSITIVE_INFINITY;\r\n    }\r\n\r\n    render() {\r\n        const sortedRows = this.getSortedRows();\r\n\r\n        return (\r\n            <>\r\n                <GridWrapper>\r\n                    <GridLayout numberOfFields={this.props.fields.selectedGridFields.length}>\r\n                        <GridHeader\r\n                            onFieldsChange={this.setColumnSelect}\r\n                            fields={this.props.fields.gridFields}\r\n                            extraElements={this.props.extraHeaderElements}\r\n                        >\r\n                            {\r\n                                this.props.fields.selectedGridFields.map((f: IGridFieldBase) => {\r\n                                    return (\r\n                                        <GridHeaderItem\r\n                                            key={f.fieldKey}\r\n                                            field={f}\r\n                                            onClick={f.isSortable ? this.changeSorting : undefined}\r\n                                            sortingOptions={this.props.sortingOptions}\r\n                                        >\r\n                                            {f.label}\r\n                                        </GridHeaderItem>\r\n                                    );\r\n                                })\r\n                            }\r\n                        </GridHeader>\r\n                        {\r\n                            sortedRows.slice(0, this.visibleRows).map((row: IGridDataRow<TData>, idx: number) => {\r\n                                return (\r\n                                    <GridRow odd={!(idx % 2)} key={row.key}>\r\n                                        {\r\n                                            this.props.fields.selectedGridFields.map((\r\n                                                f: IGridField<TData>\r\n                                            ) => {\r\n                                                return this.dataItemRenderer(f, row);\r\n                                            })\r\n                                        }\r\n                                    </GridRow>\r\n                                );\r\n                            })\r\n                        }\r\n                    </GridLayout>\r\n                </GridWrapper>\r\n                { this.visibleRows < this.props.rows.length ?\r\n                    <LoadMoreRows onClick={this.loadMoreRows} >\r\n                        { this.props.loadMoreText }\r\n                    </LoadMoreRows>\r\n                : null }\r\n                { this.props.rows.length === 0 ?\r\n                    <NoRowsAvailable>\r\n                        { this.props.noDataText }\r\n                    </NoRowsAvailable>\r\n                : null }\r\n            </>\r\n        );\r\n    }\r\n\r\n    private dataItemRenderer = (f: IGridField<TData>, row: IGridDataRow<TData>) => {\r\n        if (f.renderer) {\r\n            return (\r\n                <GridData key={f.fieldKey} dataType={f.type}>{\r\n                    typeof f.renderer === \"function\" ?\r\n                        f.renderer(row.data) :\r\n                        f.renderer.render(row.data)\r\n                }</GridData>\r\n            );\r\n        }\r\n        let data: React.ReactChild = f.getFieldValue(row.data).toString();\r\n        return (\r\n            <GridData key={f.fieldKey} dataType={f.type}>{data}</GridData>\r\n        );\r\n    }\r\n\r\n    private changeSorting = (field: IGridFieldBase) => {\r\n        if (this.props.sortingOptions.field !== field) {\r\n            this.props.sortingOptions.setAscendingOrder();\r\n        } else {\r\n            this.props.sortingOptions.setNextOrder();\r\n        }\r\n        if (field !== undefined) {\r\n            this.props.sortingOptions.field = field;\r\n        }\r\n    }\r\n\r\n    private setColumnSelect = (key: string, checked: boolean) => {\r\n        this.props.fields.setColumnSelect(key, checked);\r\n    }\r\n\r\n    private getSortedRows() {\r\n        const sortOpts = this.props.sortingOptions;\r\n        if (\r\n            sortOpts.field === undefined ||\r\n            sortOpts.order === GridSortingOrder.Default\r\n        ) {\r\n            return this.props.rows;\r\n        }\r\n        return [ ...this.props.rows ].sort((a, b) => {\r\n            if (\r\n                sortOpts.field === undefined ||\r\n                sortOpts.order === GridSortingOrder.Default\r\n            ) {\r\n                return -1;\r\n            }\r\n            const aValue = (sortOpts.field as IGridField<{}>).getFieldValue(a.data);\r\n            const bValue = (sortOpts.field as IGridField<{}>).getFieldValue(b.data);\r\n\r\n            const compResult = typeof aValue !== \"string\" && typeof aValue !== \"number\" ?\r\n                aValue.comparedTo(bValue) :\r\n                this.defaultComparator(aValue, bValue as string | number);\r\n            if (sortOpts.order === GridSortingOrder.Ascending) {\r\n                return compResult;\r\n            } else {\r\n                return compResult *  -1;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * default comparator only for strings or numbers\r\n     */\r\n    private defaultComparator<T extends string | number>(a: T, b: T) {\r\n        if (a === b) {\r\n            return 0;\r\n        }\r\n        if (a < b) {\r\n            return -1;\r\n        }\r\n        return 1;\r\n    }\r\n\r\n    private loadMoreRows = () => {\r\n        if (this.visibleRows < this.props.rows.length) {\r\n            this.visibleRows += 50;\r\n        }\r\n    }\r\n\r\n}\r\n","import * as React from \"react\";\r\nimport styled from \"../styled-components\";\r\nimport { SvgIcon, ISvgIconProps } from \"../util/react/SvgIcon\";\r\n\r\nexport interface IMsgCountOutSmallIconProps extends ISvgIconProps {\r\n\r\n}\r\n\r\nconst MsgCountOutSmallIconRoot = styled.div`\r\n    color: ${props => props.theme.colors.msgCountOutIcon};\r\n`;\r\n\r\nexport class MsgCountOutSmallIcon extends React.Component<IMsgCountOutSmallIconProps> {\r\n    render() {\r\n        return (\r\n            <MsgCountOutSmallIconRoot>\r\n                <SvgIcon {...this.props}>\r\n                    <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\r\n                        <polygon points=\"0 0 24 0 24 24 0 24\"></polygon>\r\n                        <path d={\r\n                            // tslint:disable-next-line:max-line-length\r\n                            \"M8,6 L10,6 C11.1,6 12,6.91 12,8.01 L8,7.99 L8,16 L12,16.01 C12,17.11 11.1,18 10,18 L8,18 C6.9,18 6,17.11 6,16.01 L6,8.01 C6,6.9 6.9,6 8,6 Z M13,16 L18,12 L13,8 L13,11 L10,11 L10,13 L13,13 L13,16 Z\"\r\n                        } fill=\"currentColor\" fillRule=\"nonzero\"\r\n                        transform={\r\n                            \"translate(12.000000, 12.000000) rotate(-90.000000) translate(-12.000000, -12.000000) \"\r\n                        }></path>\r\n                    </g>\r\n                </SvgIcon>\r\n            </MsgCountOutSmallIconRoot>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport styled from \"../styled-components\";\r\nimport { SvgIcon, ISvgIconProps } from \"../util/react/SvgIcon\";\r\n\r\nexport interface IMsgCountInSmallIconProps extends ISvgIconProps {\r\n\r\n}\r\n\r\nconst MsgCountInSmallIconRoot = styled.div`\r\n    color: ${props => props.theme.colors.msgCountInIcon};\r\n`;\r\n\r\nexport class MsgCountInSmallIcon extends React.Component<IMsgCountInSmallIconProps> {\r\n    render() {\r\n        return (\r\n            <MsgCountInSmallIconRoot>\r\n                <SvgIcon {...this.props}>\r\n                    <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\r\n                        <polygon points=\"0 0 24 0 24 24 0 24\"></polygon>\r\n                        <path d={\r\n                            // tslint:disable-next-line:max-line-length\r\n                            \"M16,6 L14,6 C12.9,6 12,6.9 12,8 L16,7.98 L16,16 L12,16 C12,17.1 12.9,18 14,18 L16,18 C17.1,18 18,17.1 18,16 L18,8 C18,6.89 17.1,6 16,6 Z M10,15.99 L15,11.99 L10,7.99 L10,10.99 L6,10.99 L6,12.99 L10,12.99 L10,15.99 Z\"\r\n                        } fill=\"currentColor\" fillRule=\"nonzero\"\r\n                        transform={\r\n                            \"translate(12.000000, 12.000000) rotate(-270.000000) translate(-12.000000, -12.000000) \"\r\n                        }></path>\r\n                    </g>\r\n                </SvgIcon>\r\n            </MsgCountInSmallIconRoot>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\nimport { IGridFieldRenderer } from \"@alethio/ui/lib/control/grid/state/IGridFieldRenderer\";\nimport styled from \"@alethio/ui/lib/styled-components\";\nimport { MsgCountOutSmallIcon } from \"@alethio/ui/lib/icon/MsgCountOutSmallIcon\";\nimport { MsgCountInSmallIcon } from \"@alethio/ui/lib/icon/MsgCountInSmallIcon\";\nimport { TooltipRegular } from \"@alethio/ui/lib/overlay/tooltip/TooltipRegular\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\n\nlet ICON_SIZE = 24;\n\n// TODO: make grid cell padding configurable to avoid this hack\nconst DirectionWrapper = styled.div`\n    position: relative;\n    margin-top: -2px;\n\n    > * {\n        position: absolute;\n        top: 0;\n        left: 0;\n        transform: translate(-50%, -50%);\n    }\n`;\n\ninterface IFromTo {\n    from: string;\n    to: string;\n}\n\nexport class TransferDirectionRenderer implements IGridFieldRenderer<IFromTo> {\n    constructor(private accountAddress: string, private tr: ITranslation) {\n    }\n\n    render(f: IFromTo) {\n        let directionOut = f.from === this.accountAddress;\n\n        return <DirectionWrapper>\n            { directionOut ?\n                <TooltipRegular\n                    content={this.tr.get(\"accountView.content.transferDirection.outgoing.tooltip\")}\n                >\n                    <MsgCountOutSmallIcon size={ICON_SIZE}/>\n                </TooltipRegular>\n                 :\n                <TooltipRegular\n                    content={this.tr.get(\"accountView.content.transferDirection.incoming.tooltip\")}\n                >\n                    <MsgCountInSmallIcon size={ICON_SIZE} />\n                </TooltipRegular>\n            }\n        </DirectionWrapper>;\n    }\n}\n","import * as React from \"react\";\nimport { IGridFieldRenderer } from \"@alethio/ui/lib/control/grid/state/IGridFieldRenderer\";\nimport { Number } from \"@alethio/ui/lib/data/Number\";\nimport { GridLink } from \"../../GridLink\";\n\nexport class BlockLinkRenderer<T> implements IGridFieldRenderer<T> {\n    constructor(\n        private locale: string,\n        private gridFieldDataGetter: (f: T) => number\n    ) {\n    }\n\n    render(f: T) {\n        let blockNumber = this.gridFieldDataGetter(f);\n        return (\n            <GridLink to={`page://aleth.io/block?blockNumber=${blockNumber}`}>\n                <Number locale={this.locale} value={blockNumber} />\n            </GridLink>\n        );\n    }\n}\n"],"sourceRoot":""}