{"version":3,"sources":["webpack://__aleth_io__ethLite/../node_modules/monaco-editor/esm/vs/language/json/workerManager.js","webpack://__aleth_io__ethLite/../node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-languageserver-types/main.js","webpack://__aleth_io__ethLite/../node_modules/monaco-editor/esm/vs/language/json/languageFeatures.js","webpack://__aleth_io__ethLite/../node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/scanner.js","webpack://__aleth_io__ethLite/../node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/format.js","webpack://__aleth_io__ethLite/../node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/parser.js","webpack://__aleth_io__ethLite/../node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/edit.js","webpack://__aleth_io__ethLite/../node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/main.js","webpack://__aleth_io__ethLite/../node_modules/monaco-editor/esm/vs/language/json/tokenization.js","webpack://__aleth_io__ethLite/../node_modules/monaco-editor/esm/vs/language/json/jsonMode.js"],"names":["STOP_WHEN_IDLE_FOR","WorkerManager","defaults","_this","this","_defaults","_worker","_idleCheckInterval","setInterval","_checkIfIdle","_lastUsedTime","_configChangeListener","onDidChange","_stopWorker","prototype","dispose","_client","clearInterval","timePassedSinceLastUsed","Date","now","_getClient","monaco","editor","createWebWorker","moduleId","label","languageId","createData","languageSettings","diagnosticsOptions","enableSchemaRequest","getProxy","getLanguageServiceWorker","resources","_i","arguments","length","then","client","_","withSyncedResources","Position","create","line","character","is","value","candidate","Is","objectLiteral","number","Range","one","two","three","four","start","end","Error","Location","uri","range","defined","string","undefined","Color","red","green","blue","alpha","ColorInformation","color","ColorPresentation","textEdit","additionalTextEdits","TextEdit","typedArray","FoldingRangeKind","FoldingRange","startLine","endLine","startCharacter","endCharacter","kind","result","DiagnosticRelatedInformation","location","message","DiagnosticSeverity","Warning","Information","Hint","Diagnostic","severity","code","source","relatedInformation","Command","title","command","args","replace","newText","insert","position","del","TextDocumentEdit","textDocument","edits","VersionedTextDocumentIdentifier","Array","isArray","WorkspaceEdit","changes","documentChanges","TextEditChangeImpl","push","delete","add","edit","all","clear","splice","WorkspaceChange","workspaceEdit","_textEditChanges","Object","_workspaceEdit","forEach","textDocumentEdit","textEditChange","keys","key","defineProperty","get","enumerable","configurable","getTextEditChange","TextDocumentIdentifier","version","TextDocumentItem","text","MarkupKind","PlainText","Markdown","MarkupContent","CompletionItemKind","Text","Method","Function","Constructor","Field","Variable","Class","Interface","Module","Property","Unit","Value","Enum","Keyword","Snippet","File","Reference","Folder","EnumMember","Constant","Struct","Event","Operator","TypeParameter","InsertTextFormat","CompletionItem","CompletionList","items","isIncomplete","MarkedString","fromPlainText","plainText","language","Hover","contents","ParameterInformation","documentation","SignatureInformation","parameters","DocumentHighlightKind","Read","Write","DocumentHighlight","SymbolKind","Namespace","Package","String","Number","Boolean","Key","Null","SymbolInformation","name","containerName","DocumentSymbol","detail","selectionRange","children","deprecated","boolean","CodeActionKind","QuickFix","Refactor","RefactorExtract","RefactorInline","RefactorRewrite","Source","SourceOrganizeImports","CodeActionContext","diagnostics","only","CodeAction","commandOrEdit","CodeLens","data","FormattingOptions","tabSize","insertSpaces","DocumentLink","target","EOL","TextDocument","content","FullTextDocument","lineCount","func","getText","positionAt","offsetAt","applyEdits","document","sortedEdits","mergeSort","a","b","diff","lastModifiedOffset","i","e","startOffset","endOffset","substring","compare","p","left","slice","right","leftIdx","rightIdx","ret","TextDocumentSaveReason","Manual","AfterDelay","FocusOut","_uri","_languageId","_version","_content","_lineOffsets","update","event","getLineOffsets","lineOffsets","isLineStart","ch","charAt","offset","Math","max","min","low","high","mid","floor","lineOffset","nextLineOffset","toString","call","check","every","Uri","languageFeatures_Range","DiagnosticsAdapter","_disposables","_listener","onModelAdd","model","modeId","getModeId","handle","onDidChangeContent","clearTimeout","setTimeout","_doValidate","onModelRemoved","setModelMarkers","uriStr","listener","onDidCreateModel","onWillDisposeModel","_resetSchema","onDidChangeModelLanguage","getModels","d","resource","worker","resetSchema","doValidation","markers","map","toDiagnostics","getModel","err","console","error","toSeverity","lsSeverity","MarkerSeverity","Info","diag","startLineNumber","startColumn","endLineNumber","endColumn","fromPosition","column","lineNumber","fromRange","toRange","toCompletionItemKind","mItemKind","languages","fromCompletionItemKind","toTextEdit","languageFeatures_CompletionAdapter","CompletionAdapter","provideCompletionItems","context","token","wordInfo","getWordUntilPosition","doComplete","info","entry","item","insertText","sortText","filterText","insertTextFormat","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet","suggestions","isMarkupContent","thing","toMarkdownString","toMarkedStringArray","HoverAdapter","provideHover","doHover","toLocation","parse","toSymbolKind","mKind","DocumentSymbolAdapter","provideDocumentSymbols","findDocumentSymbols","fromFormattingOptions","options","DocumentFormattingEditProvider","provideDocumentFormattingEdits","format","DocumentRangeFormattingEditProvider","provideDocumentRangeFormattingEdits","DocumentColorAdapter","provideDocumentColors","findDocumentColors","infos","provideColorPresentations","getColorPresentations","presentations","presentation","FoldingRangeAdapter","provideFoldingRanges","ranges","toFoldingRangeKind","Comment","Imports","Region","createScanner","ignoreTrivia","pos","len","tokenOffset","scanError","scanHexDigits","count","exact","digits","charCodeAt","setPosition","newPosition","scanNumber","isDigit","scanString","ch_1","fromCharCode","isLineBreak","scanNext","isWhiteSpace","commentClosed","isUnknownContentCharacter","scanNextNonTrivia","getPosition","scan","getToken","getTokenValue","getTokenOffset","getTokenLength","getTokenError","documentText","initialIndentLevel","formatText","formatTextStart","rangeStart","rangeEnd","isEOL","computeIndentLevel","eol","getEOL","lineBreak","indentLevel","indentValue","repeat","scanner","hasError","newLineAndIndent","editOperations","addEdit","firstToken","firstTokenStart","initialIndent","firstTokenEnd","secondToken","replaceContent","commentTokenStart","secondTokenStart","s","nChars","indexOf","getLocation","segments","earlyReturnException","previousNode","previousNodeInst","type","parent","isAtPropertyKey","setPreviousNode","colonOffset","visit","onObjectBegin","onObjectProperty","onObjectEnd","pop","onArrayBegin","onArrayEnd","onLiteralValue","getLiteralNodeType","onSeparator","sep","last","path","matches","pattern","k","errors","currentProperty","currentParent","previousParents","onValue","visitor","object","array","onError","parseTree","ensurePropertyComplete","valueNode","findNodeAtLocation","root","node","path_1","segment","found","_a","_b","propertyNode","index","getNodePath","getNodeValue","obj","prop","contains","includeRightBound","findNodeAtOffset","_scanner","toNoArgVisit","visitFunction","toOneArgVisit","arg","onComment","disallowComments","allowTrailingComma","handleError","skipUntilAfter","skipUntil","parseString","isValue","parseLiteral","JSON","parseProperty","parseValue","parseObject","needsComma","parseArray","stripComments","replaceCh","parts","join","removeProperty","formattingOptions","setProperty","originalPath","getInsertionIndex","lastSegment","existing","propertyIndex","removeBegin","removeEnd","previous","next","withFormatting","stringify","newProperty","insertIndex","removalIndex","toRemove","parentEndOffset","applyEdit","begin","edit_1","editLength","isWS","main_createScanner","main_getLocation","main_parse","main_parseTree","main_findNodeAtLocation","main_findNodeAtOffset","main_getNodePath","main_getNodeValue","main_visit","main_stripComments","main_format","modify","createTokenizationSupport","supportComments","getInitialState","JSONState","tokenize","state","offsetDelta","stopAtOffset","TOKEN_DELIM_OBJECT","TOKEN_DELIM_ARRAY","TOKEN_DELIM_COLON","TOKEN_DELIM_COMMA","TOKEN_VALUE_BOOLEAN","TOKEN_VALUE_NULL","TOKEN_VALUE_STRING","TOKEN_VALUE_NUMBER","TOKEN_PROPERTY_NAME","TOKEN_COMMENT_BLOCK","TOKEN_COMMENT_LINE","lastWasColon","_state","clone","equals","other","getStateData","setStateData","comments","numberOfInsertedCharacters","adjustOffset","tokens","endState","substr","startIndex","scopes","__webpack_require__","__webpack_exports__","setupMode","disposables","uris","apply","registerCompletionItemProvider","registerHoverProvider","registerDocumentSymbolProvider","registerDocumentFormattingEditProvider","registerDocumentRangeFormattingEditProvider","setTokensProvider","setLanguageConfiguration","richEditConfiguration","registerColorProvider","registerFoldingRangeProvider","wordPattern","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn"],"mappings":"0IAKA,IAAAA,EAAA,KACA,IAAAC,EAAA,WACA,SAAAA,EAAAC,GACA,IAAAC,EAAAC,KACAA,KAAAC,UAAAH,EACAE,KAAAE,QAAA,KACAF,KAAAG,mBAAAC,YAAA,WAA2D,OAAAL,EAAAM,gBAA+B,KAC1FL,KAAAM,cAAA,EACAN,KAAAO,sBAAAP,KAAAC,UAAAO,YAAA,WAA6E,OAAAT,EAAAU,gBAE7EZ,EAAAa,UAAAD,YAAA,WACA,GAAAT,KAAAE,QAAA,CACAF,KAAAE,QAAAS,UACAX,KAAAE,QAAA,KAEAF,KAAAY,QAAA,MAEAf,EAAAa,UAAAC,QAAA,WACAE,cAAAb,KAAAG,oBACAH,KAAAO,sBAAAI,UACAX,KAAAS,eAEAZ,EAAAa,UAAAL,aAAA,WACA,IAAAL,KAAAE,QACA,OAEA,IAAAY,EAAAC,KAAAC,MAAAhB,KAAAM,cA1BA,MA4BAN,KAAAS,eAGAZ,EAAAa,UAAAO,WAAA,WACAjB,KAAAM,cAAAS,KAAAC,MACA,IAAAhB,KAAAY,QAAA,CACAZ,KAAAE,QAAAgB,OAAAC,OAAAC,iBAEAC,SAAA,8BACAC,MAAAtB,KAAAC,UAAAsB,WAEAC,YACAC,iBAAAzB,KAAAC,UAAAyB,mBACAH,WAAAvB,KAAAC,UAAAsB,WACAI,oBAAA3B,KAAAC,UAAAyB,mBAAAC,uBAGA3B,KAAAY,QAAAZ,KAAAE,QAAA0B,WAEA,OAAA5B,KAAAY,SAEAf,EAAAa,UAAAmB,yBAAA,WACA,IAAA9B,EAAAC,KACA,IAAA8B,KACA,QAAAC,EAAA,EAAwBA,EAAAC,UAAAC,OAAuBF,IAC/CD,EAAAC,GAAAC,UAAAD,GAEA,IAAAnB,EACA,OAAAZ,KAAAiB,aAAAiB,KAAA,SAAAC,GACAvB,EAAAuB,IACSD,KAAA,SAAAE,GACT,OAAArC,EAAAG,QAAAmC,oBAAAP,KACSI,KAAA,SAAAE,GAAqB,OAAAxB,KAE9B,OAAAf,EA7DA,GCGO,IAAAyC,GACP,SAAAA,GAMA,SAAAC,EAAAC,EAAAC,GACA,OAAgBD,OAAAC,aAEhBH,EAAAC,SAIA,SAAAG,EAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAC,cAAAF,IAAAC,EAAAE,OAAAH,EAAAJ,OAAAK,EAAAE,OAAAH,EAAAH,WAEAH,EAAAI,KAjBA,CAkBCJ,WAKM,IAAAU,GACP,SAAAA,GACA,SAAAT,EAAAU,EAAAC,EAAAC,EAAAC,GACA,GAAAP,EAAAE,OAAAE,IAAAJ,EAAAE,OAAAG,IAAAL,EAAAE,OAAAI,IAAAN,EAAAE,OAAAK,GACA,OAAoBC,MAAAf,EAAAC,OAAAU,EAAAC,GAAAI,IAAAhB,EAAAC,OAAAY,EAAAC,IAEpB,GAAAd,EAAAI,GAAAO,IAAAX,EAAAI,GAAAQ,GACA,OAAoBG,MAAAJ,EAAAK,IAAAJ,GAGpB,UAAAK,MAAA,8CAAAN,EAAA,KAAAC,EAAA,KAAAC,EAAA,KAAAC,EAAA,KAGAJ,EAAAT,SAIA,SAAAG,EAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAC,cAAAF,IAAAN,EAAAI,GAAAE,EAAAS,QAAAf,EAAAI,GAAAE,EAAAU,KAEAN,EAAAN,KApBA,CAqBCM,WAKM,IAAAQ,GACP,SAAAA,GAMA,SAAAjB,EAAAkB,EAAAC,GACA,OAAgBD,MAAAC,SAEhBF,EAAAjB,SAIA,SAAAG,EAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAc,QAAAf,IAAAI,EAAAN,GAAAE,EAAAc,SAAAb,EAAAe,OAAAhB,EAAAa,MAAAZ,EAAAgB,UAAAjB,EAAAa,MAEAD,EAAAd,KAjBA,CAkBCc,WAKM,IAAAM,GACP,SAAAA,GAIA,SAAAvB,EAAAwB,EAAAC,EAAAC,EAAAC,GACA,OACAH,MACAC,QACAC,OACAC,SAGAJ,EAAAvB,SAIA,SAAAG,EAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAE,OAAAH,EAAAmB,MACAlB,EAAAE,OAAAH,EAAAoB,QACAnB,EAAAE,OAAAH,EAAAqB,OACApB,EAAAE,OAAAH,EAAAsB,OAEAJ,EAAApB,KAvBA,CAwBCoB,WAKM,IAAAK,GACP,SAAAA,GAIA,SAAA5B,EAAAmB,EAAAU,GACA,OACAV,QACAU,SAGAD,EAAA5B,SAIA,SAAAG,EAAAC,GACA,IAAAC,EAAAD,EACA,OAAAK,EAAAN,GAAAE,EAAAc,QAAAI,EAAApB,GAAAE,EAAAwB,OAEAD,EAAAzB,KAlBA,CAmBCyB,WAKM,IAAAE,GACP,SAAAA,GAIA,SAAA9B,EAAAjB,EAAAgD,EAAAC,GACA,OACAjD,QACAgD,WACAC,uBAGAF,EAAA9B,SAIA,SAAAG,EAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAe,OAAAhB,EAAAtB,SACAuB,EAAAgB,UAAAjB,EAAA0B,WAAAE,EAAA9B,GAAAE,MACAC,EAAAgB,UAAAjB,EAAA2B,sBAAA1B,EAAA4B,WAAA7B,EAAA2B,oBAAAC,EAAA9B,KAEA2B,EAAA3B,KArBA,CAsBC2B,WAIM,IAAAK,GACP,SAAAA,GAIAA,EAAA,qBAIAA,EAAA,qBAIAA,EAAA,mBAZA,CAaCA,WAKM,IAAAC,GACP,SAAAA,GAIA,SAAApC,EAAAqC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,GACAL,YACAC,WAEAhC,EAAAc,QAAAmB,KACAG,EAAAH,kBAEAjC,EAAAc,QAAAoB,KACAE,EAAAF,gBAEAlC,EAAAc,QAAAqB,KACAC,EAAAD,QAEA,OAAAC,EAEAN,EAAApC,SAIA,SAAAG,EAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAE,OAAAH,EAAAgC,YAAA/B,EAAAE,OAAAH,EAAAgC,aACA/B,EAAAgB,UAAAjB,EAAAkC,iBAAAjC,EAAAE,OAAAH,EAAAkC,mBACAjC,EAAAgB,UAAAjB,EAAAmC,eAAAlC,EAAAE,OAAAH,EAAAmC,iBACAlC,EAAAgB,UAAAjB,EAAAoC,OAAAnC,EAAAe,OAAAhB,EAAAoC,OAEAL,EAAAjC,KA/BA,CAgCCiC,WAKM,IAAAO,GACP,SAAAA,GAIA,SAAA3C,EAAA4C,EAAAC,GACA,OACAD,WACAC,WAGAF,EAAA3C,SAIA,SAAAG,EAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAc,QAAAf,IAAAY,EAAAd,GAAAE,EAAAuC,WAAAtC,EAAAe,OAAAhB,EAAAwC,SAEAF,EAAAxC,KAlBA,CAmBCwC,WAIM,IAAAG,GACP,SAAAA,GAIAA,EAAA9B,MAAA,EAIA8B,EAAAC,QAAA,EAIAD,EAAAE,YAAA,EAIAF,EAAAG,KAAA,EAhBA,CAiBCH,WAKM,IAAAI,GACP,SAAAA,GAIA,SAAAlD,EAAAmB,EAAA0B,EAAAM,EAAAC,EAAAC,EAAAC,GACA,IAAAZ,GAAsBvB,QAAA0B,WACtBvC,EAAAc,QAAA+B,KACAT,EAAAS,YAEA7C,EAAAc,QAAAgC,KACAV,EAAAU,QAEA9C,EAAAc,QAAAiC,KACAX,EAAAW,UAEA/C,EAAAc,QAAAkC,KACAZ,EAAAY,sBAEA,OAAAZ,EAEAQ,EAAAlD,SAIA,SAAAG,EAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAc,QAAAf,IACAI,EAAAN,GAAAE,EAAAc,QACAb,EAAAe,OAAAhB,EAAAwC,WACAvC,EAAAE,OAAAH,EAAA8C,WAAA7C,EAAAgB,UAAAjB,EAAA8C,aACA7C,EAAAE,OAAAH,EAAA+C,OAAA9C,EAAAe,OAAAhB,EAAA+C,OAAA9C,EAAAgB,UAAAjB,EAAA+C,SACA9C,EAAAe,OAAAhB,EAAAgD,SAAA/C,EAAAgB,UAAAjB,EAAAgD,WACA/C,EAAAgB,UAAAjB,EAAAiD,qBAAAhD,EAAA4B,WAAA7B,EAAAiD,mBAAAX,EAAAxC,KAEA+C,EAAA/C,KAlCA,CAmCC+C,WAKM,IAAAK,GACP,SAAAA,GAIA,SAAAvD,EAAAwD,EAAAC,GACA,IAAAC,KACA,QAAAlE,EAAA,EAAwBA,EAAAC,UAAAC,OAAuBF,IAC/CkE,EAAAlE,EAAA,GAAAC,UAAAD,GAEA,IAAAkD,GAAsBc,QAAAC,WACtBnD,EAAAc,QAAAsC,MAAAhE,OAAA,IACAgD,EAAAjD,UAAAiE,GAEA,OAAAhB,EAEAa,EAAAvD,SAIA,SAAAG,EAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAc,QAAAf,IAAAC,EAAAe,OAAAhB,EAAAmD,QAAAlD,EAAAe,OAAAhB,EAAAoD,SAEAF,EAAApD,KAvBA,CAwBCoD,WAKM,IAAAtB,GACP,SAAAA,GAMA,SAAA0B,EAAAxC,EAAAyC,GACA,OAAgBzC,QAAAyC,WAEhB3B,EAAA0B,UAMA,SAAAE,EAAAC,EAAAF,GACA,OAAgBzC,OAASL,MAAAgD,EAAA/C,IAAA+C,GAAiCF,WAE1D3B,EAAA4B,SAKA,SAAAE,EAAA5C,GACA,OAAgBA,QAAAyC,QAAA,IAEhB3B,EAAA8B,MACA,SAAA5D,EAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAC,cAAAF,IACAC,EAAAe,OAAAhB,EAAAuD,UACAnD,EAAAN,GAAAE,EAAAc,OAEAc,EAAA9B,KAjCA,CAkCC8B,WAKM,IAAA+B,GACP,SAAAA,GAIA,SAAAhE,EAAAiE,EAAAC,GACA,OAAgBD,eAAAC,SAEhBF,EAAAhE,SACA,SAAAG,EAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAc,QAAAf,IACA8D,EAAAhE,GAAAE,EAAA4D,eACAG,MAAAC,QAAAhE,EAAA6D,OAEAF,EAAA7D,KAdA,CAeC6D,WACM,IAAAM,GACP,SAAAA,GACA,SAAAnE,EAAAC,GACA,IAAAC,EAAAD,EACA,OAAAC,SACA,IAAAA,EAAAkE,cAAA,IAAAlE,EAAAmE,wBACA,IAAAnE,EAAAmE,iBAAAlE,EAAA4B,WAAA7B,EAAAmE,gBAAAR,EAAA7D,KAEAmE,EAAAnE,KAPA,CAQCmE,WACD,IAAAG,EAAA,WACA,SAAAA,EAAAP,GACAzG,KAAAyG,QAEAO,EAAAtG,UAAA0F,OAAA,SAAAC,EAAAF,GACAnG,KAAAyG,MAAAQ,KAAAzC,EAAA4B,OAAAC,EAAAF,KAEAa,EAAAtG,UAAAwF,QAAA,SAAAxC,EAAAyC,GACAnG,KAAAyG,MAAAQ,KAAAzC,EAAA0B,QAAAxC,EAAAyC,KAEAa,EAAAtG,UAAAwG,OAAA,SAAAxD,GACA1D,KAAAyG,MAAAQ,KAAAzC,EAAA8B,IAAA5C,KAEAsD,EAAAtG,UAAAyG,IAAA,SAAAC,GACApH,KAAAyG,MAAAQ,KAAAG,IAEAJ,EAAAtG,UAAA2G,IAAA,WACA,OAAArH,KAAAyG,OAEAO,EAAAtG,UAAA4G,MAAA,WACAtH,KAAAyG,MAAAc,OAAA,EAAAvH,KAAAyG,MAAAxE,SAEA,OAAA+E,EAtBA,GA2BA,IAAAQ,EAAA,WACA,SAAAA,EAAAC,GACA,IAAA1H,EAAAC,KACAA,KAAA0H,iBAAAC,OAAApF,OAAA,MACA,GAAAkF,EAAA,CACAzH,KAAA4H,eAAAH,EACAA,EAAAV,gBACAU,EAAAV,gBAAAc,QAAA,SAAAC,GACA,IAAAC,EAAA,IAAAf,EAAAc,EAAArB,OACA1G,EAAA2H,iBAAAI,EAAAtB,aAAA/C,KAAAsE,IAGAN,EAAAX,SACAa,OAAAK,KAAAP,EAAAX,SAAAe,QAAA,SAAAI,GACA,IAAAF,EAAA,IAAAf,EAAAS,EAAAX,QAAAmB,IACAlI,EAAA2H,iBAAAO,GAAAF,KAKAJ,OAAAO,eAAAV,EAAA9G,UAAA,QAKAyH,IAAA,WACA,OAAAnI,KAAA4H,gBAEAQ,YAAA,EACAC,cAAA,IAEAb,EAAA9G,UAAA4H,kBAAA,SAAAL,GACA,GAAAvB,EAAAhE,GAAAuF,GAAA,CACAjI,KAAA4H,iBACA5H,KAAA4H,gBACAb,qBAGA,IAAA/G,KAAA4H,eAAAb,gBACA,UAAAxD,MAAA,oEAEA,IAAAiD,EAAAyB,EACA,IAAAhD,EACA,KADAA,EAAAjF,KAAA0H,iBAAAlB,EAAA/C,MACA,CACA,IAAAgD,EACA,IAAAqB,GACAtB,eACAC,MAHAA,MAKAzG,KAAA4H,eAAAb,gBAAAE,KAAAa,GACA7C,EAAA,IAAA+B,EAAAP,GACAzG,KAAA0H,iBAAAlB,EAAA/C,KAAAwB,EAEA,OAAAA,EAGAjF,KAAA4H,iBACA5H,KAAA4H,gBACAd,QAAAa,OAAApF,OAAA,QAGA,IAAAvC,KAAA4H,eAAAd,QACA,UAAAvD,MAAA,kEAEA,IAAA0B,EACA,KADAA,EAAAjF,KAAA0H,iBAAAO,IACA,CACA,IAAAxB,KACAzG,KAAA4H,eAAAd,QAAAmB,GAAAxB,EACAxB,EAAA,IAAA+B,EAAAP,GACAzG,KAAA0H,iBAAAO,GAAAhD,EAEA,OAAAA,GAGA,OAAAuC,EA1EA,GAiFO,IAAAe,GACP,SAAAA,GAKA,SAAAhG,EAAAkB,GACA,OAAgBA,OAEhB8E,EAAAhG,SAIA,SAAAG,EAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAc,QAAAf,IAAAC,EAAAe,OAAAhB,EAAAa,KAEA8E,EAAA7F,KAhBA,CAiBC6F,WAKM,IAAA7B,GACP,SAAAA,GAMA,SAAAnE,EAAAkB,EAAA+E,GACA,OAAgB/E,MAAA+E,WAEhB9B,EAAAnE,SAIA,SAAAG,EAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAc,QAAAf,IAAAC,EAAAe,OAAAhB,EAAAa,MAAAZ,EAAAE,OAAAH,EAAA4F,SAEA9B,EAAAhE,KAjBA,CAkBCgE,WAKM,IAAA+B,GACP,SAAAA,GAQA,SAAAlG,EAAAkB,EAAAlC,EAAAiH,EAAAE,GACA,OAAgBjF,MAAAlC,aAAAiH,UAAAE,QAEhBD,EAAAlG,SAIA,SAAAG,EAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAc,QAAAf,IAAAC,EAAAe,OAAAhB,EAAAa,MAAAZ,EAAAe,OAAAhB,EAAArB,aAAAsB,EAAAE,OAAAH,EAAA4F,UAAA3F,EAAAe,OAAAhB,EAAA8F,MAEAD,EAAA/F,KAnBA,CAoBC+F,WAQM,IAAAE,GACP,SAAAA,GAIAA,EAAAC,UAAA,YAIAD,EAAAE,SAAA,WARA,CASCF,YACD,SAAAA,GAIA,SAAAjG,EAAAC,GACA,IAAAC,EAAAD,EACA,OAAAC,IAAA+F,EAAAC,WAAAhG,IAAA+F,EAAAE,SAEAF,EAAAjG,KARA,CASCiG,WACM,IAAAG,GACP,SAAAA,GAIA,SAAApG,EAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAC,cAAAH,IAAAgG,EAAAjG,GAAAE,EAAAoC,OAAAnC,EAAAe,OAAAhB,EAAAD,OAEAmG,EAAApG,KARA,CASCoG,WAIM,IAAAC,GACP,SAAAA,GACAA,EAAAC,KAAA,EACAD,EAAAE,OAAA,EACAF,EAAAG,SAAA,EACAH,EAAAI,YAAA,EACAJ,EAAAK,MAAA,EACAL,EAAAM,SAAA,EACAN,EAAAO,MAAA,EACAP,EAAAQ,UAAA,EACAR,EAAAS,OAAA,EACAT,EAAAU,SAAA,GACAV,EAAAW,KAAA,GACAX,EAAAY,MAAA,GACAZ,EAAAa,KAAA,GACAb,EAAAc,QAAA,GACAd,EAAAe,QAAA,GACAf,EAAAjF,MAAA,GACAiF,EAAAgB,KAAA,GACAhB,EAAAiB,UAAA,GACAjB,EAAAkB,OAAA,GACAlB,EAAAmB,WAAA,GACAnB,EAAAoB,SAAA,GACApB,EAAAqB,OAAA,GACArB,EAAAsB,MAAA,GACAtB,EAAAuB,SAAA,GACAvB,EAAAwB,cAAA,GAzBA,CA0BCxB,WAKM,IAAAyB,GACP,SAAAA,GAIAA,EAAA5B,UAAA,EAWA4B,EAAAV,QAAA,EAfA,CAgBCU,WAKM,IAAAC,GACP,SAAAA,GAKA,SAAAlI,EAAAjB,GACA,OAAgBA,SAEhBmJ,EAAAlI,SARA,CASCkI,WAKM,IAAAC,GACP,SAAAA,GAOA,SAAAnI,EAAAoI,EAAAC,GACA,OAAgBD,YAAAC,kBAEhBF,EAAAnI,SAVA,CAWCmI,WACM,IAAAG,GACP,SAAAA,GAMA,SAAAC,EAAAC,GACA,OAAAA,EAAA7E,QAAA,wBAA0C,QAE1C2E,EAAAC,gBAIA,SAAApI,EAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAe,OAAAhB,IAAAC,EAAAC,cAAAF,IAAAC,EAAAe,OAAAhB,EAAAoI,WAAAnI,EAAAe,OAAAhB,EAAAD,OAEAkI,EAAAnI,KAjBA,CAkBCmI,WACM,IAAAI,GACP,SAAAA,GAIA,SAAAvI,EAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAC,cAAAF,KAAAkG,EAAApG,GAAAE,EAAAsI,WACAL,EAAAnI,GAAAE,EAAAsI,WACArI,EAAA4B,WAAA7B,EAAAsI,SAAAL,EAAAnI,YAAA,IAAAC,EAAAe,OAAAV,EAAAN,GAAAC,EAAAe,QAEAuH,EAAAvI,KAVA,CAWCuI,WAKM,IAAAE,GACP,SAAAA,GAOA,SAAA5I,EAAAjB,EAAA8J,GACA,OAAAA,GAAgC9J,QAAA8J,kBAAiD9J,SAEjF6J,EAAA5I,SAVA,CAYC4I,WAKM,IAAAE,GACP,SAAAA,GACA,SAAA9I,EAAAjB,EAAA8J,GACA,IAAAE,KACA,QAAAvJ,EAAA,EAAwBA,EAAAC,UAAAC,OAAuBF,IAC/CuJ,EAAAvJ,EAAA,GAAAC,UAAAD,GAEA,IAAAkD,GAAsB3D,SACtBuB,EAAAc,QAAAyH,KACAnG,EAAAmG,iBAEAvI,EAAAc,QAAA2H,GACArG,EAAAqG,aAGArG,EAAAqG,cAEA,OAAArG,EAEAoG,EAAA9I,SAlBA,CAmBC8I,WAIM,IAAAE,GACP,SAAAA,GAIAA,EAAAvC,KAAA,EAIAuC,EAAAC,KAAA,EAIAD,EAAAE,MAAA,EAZA,CAaCF,WAKM,IAAAG,GACP,SAAAA,GAKA,SAAAnJ,EAAAmB,EAAAsB,GACA,IAAAC,GAAsBvB,SACtBb,EAAAE,OAAAiC,KACAC,EAAAD,QAEA,OAAAC,EAEAyG,EAAAnJ,SAZA,CAaCmJ,WAIM,IAAAC,GACP,SAAAA,GACAA,EAAA5B,KAAA,EACA4B,EAAAnC,OAAA,EACAmC,EAAAC,UAAA,EACAD,EAAAE,QAAA,EACAF,EAAArC,MAAA,EACAqC,EAAA1C,OAAA,EACA0C,EAAAlC,SAAA,EACAkC,EAAAvC,MAAA,EACAuC,EAAAxC,YAAA,EACAwC,EAAA/B,KAAA,GACA+B,EAAApC,UAAA,GACAoC,EAAAzC,SAAA,GACAyC,EAAAtC,SAAA,GACAsC,EAAAxB,SAAA,GACAwB,EAAAG,OAAA,GACAH,EAAAI,OAAA,GACAJ,EAAAK,QAAA,GACAL,EAAAhF,MAAA,GACAgF,EAAAhE,OAAA,GACAgE,EAAAM,IAAA,GACAN,EAAAO,KAAA,GACAP,EAAAzB,WAAA,GACAyB,EAAAvB,OAAA,GACAuB,EAAAtB,MAAA,GACAsB,EAAArB,SAAA,GACAqB,EAAApB,cAAA,GA1BA,CA2BCoB,WACM,IAAAQ,GACP,SAAAA,GAUA,SAAA5J,EAAA6J,EAAApH,EAAAtB,EAAAD,EAAA4I,GACA,IAAApH,GACAmH,OACApH,OACAG,UAAuB1B,MAAAC,UAEvB2I,IACApH,EAAAoH,iBAEA,OAAApH,EAEAkH,EAAA5J,SArBA,CAsBC4J,WAOD,IAAAG,EAAA,WACA,SAAAA,KAEA,OAAAA,EAHA,IAMA,SAAAA,GAWA,SAAA/J,EAAA6J,EAAAG,EAAAvH,EAAAtB,EAAA8I,EAAAC,GACA,IAAAxH,GACAmH,OACAG,SACAvH,OACAtB,QACA8I,uBAEA,IAAAC,IACAxH,EAAAwH,YAEA,OAAAxH,EAEAqH,EAAA/J,SAIA,SAAAG,EAAAC,GACA,IAAAC,EAAAD,EACA,OAAAC,GACAC,EAAAe,OAAAhB,EAAAwJ,OAAAvJ,EAAAE,OAAAH,EAAAoC,OACAhC,EAAAN,GAAAE,EAAAc,QAAAV,EAAAN,GAAAE,EAAA4J,uBACA,IAAA5J,EAAA2J,QAAA1J,EAAAe,OAAAhB,EAAA2J,gBACA,IAAA3J,EAAA8J,YAAA7J,EAAA8J,QAAA/J,EAAA8J,oBACA,IAAA9J,EAAA6J,UAAA9F,MAAAC,QAAAhE,EAAA6J,WAEAH,EAAA5J,KArCA,CAsCC4J,WAIM,IAAAM,GACP,SAAAA,GAIAA,EAAAC,SAAA,WAIAD,EAAAE,SAAA,WAYAF,EAAAG,gBAAA,mBAWAH,EAAAI,eAAA,kBAaAJ,EAAAK,gBAAA,mBAMAL,EAAAM,OAAA,SAIAN,EAAAO,sBAAA,yBAtDA,CAuDCP,WAKM,IAAAQ,GACP,SAAAA,GAIA,SAAA7K,EAAA8K,EAAAC,GACA,IAAArI,GAAsBoI,oBACtB,IAAAC,GAAA,OAAAA,IACArI,EAAAqI,QAEA,OAAArI,EAEAmI,EAAA7K,SAIA,SAAAG,EAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAc,QAAAf,IAAAC,EAAA4B,WAAA7B,EAAAyK,YAAA5H,EAAA/C,WAAA,IAAAE,EAAA0K,MAAAzK,EAAA4B,WAAA7B,EAAA0K,KAAAzK,EAAAe,SAEAwJ,EAAA1K,KAnBA,CAoBC0K,WACM,IAAAG,GACP,SAAAA,GACA,SAAAhL,EAAAwD,EAAAyH,EAAAxI,GACA,IAAAC,GAAsBc,SACtBD,EAAApD,GAAA8K,GACAvI,EAAAe,QAAAwH,EAGAvI,EAAAmC,KAAAoG,OAEA,IAAAxI,IACAC,EAAAD,QAEA,OAAAC,EAEAsI,EAAAhL,SACA,SAAAG,EAAAC,GACA,IAAAC,EAAAD,EACA,OAAAC,GAAAC,EAAAe,OAAAhB,EAAAmD,cACA,IAAAnD,EAAAyK,aAAAxK,EAAA4B,WAAA7B,EAAAyK,YAAA5H,EAAA/C,YACA,IAAAE,EAAAoC,MAAAnC,EAAAe,OAAAhB,EAAAoC,cACA,IAAApC,EAAAwE,WAAA,IAAAxE,EAAAoD,gBACA,IAAApD,EAAAoD,SAAAF,EAAApD,GAAAE,EAAAoD,iBACA,IAAApD,EAAAwE,MAAAP,EAAAnE,GAAAE,EAAAwE,OAEAmG,EAAA7K,KAxBA,CAyBC6K,WAKM,IAAAE,GACP,SAAAA,GAIA,SAAAlL,EAAAmB,EAAAgK,GACA,IAAAzI,GAAsBvB,SACtBb,EAAAc,QAAA+J,KACAzI,EAAAyI,QACA,OAAAzI,EAEAwI,EAAAlL,SAIA,SAAAG,EAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAc,QAAAf,IAAAI,EAAAN,GAAAE,EAAAc,SAAAb,EAAAgB,UAAAjB,EAAAoD,UAAAF,EAAApD,GAAAE,EAAAoD,UAEAyH,EAAA/K,KAlBA,CAmBC+K,WAKM,IAAAE,GACP,SAAAA,GAIA,SAAApL,EAAAqL,EAAAC,GACA,OAAgBD,UAAAC,gBAEhBF,EAAApL,SAIA,SAAAG,EAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAc,QAAAf,IAAAC,EAAAE,OAAAH,EAAAgL,UAAA/K,EAAA8J,QAAA/J,EAAAiL,cAEAF,EAAAjL,KAfA,CAgBCiL,WAKD,IAAAG,EAAA,WACA,SAAAA,KAEA,OAAAA,EAHA,IAUA,SAAAA,GAIA,SAAAvL,EAAAmB,EAAAqK,EAAAL,GACA,OAAgBhK,QAAAqK,SAAAL,QAEhBI,EAAAvL,SAIA,SAAAG,EAAAC,GACA,IAAAC,EAAAD,EACA,OAAAE,EAAAc,QAAAf,IAAAI,EAAAN,GAAAE,EAAAc,SAAAb,EAAAgB,UAAAjB,EAAAmL,SAAAlL,EAAAe,OAAAhB,EAAAmL,SAEAD,EAAApL,KAfA,CAgBCoL,WACM,IAAAE,GAAA,kBACA,IAAAC,GACP,SAAAA,GAOA,SAAA1L,EAAAkB,EAAAlC,EAAAiH,EAAA0F,GACA,WAAAC,EAAA1K,EAAAlC,EAAAiH,EAAA0F,GAEAD,EAAA1L,SAIA,SAAAG,EAAAC,GACA,IAAAC,EAAAD,EACA,SAAAE,EAAAc,QAAAf,IAAAC,EAAAe,OAAAhB,EAAAa,OAAAZ,EAAAgB,UAAAjB,EAAArB,aAAAsB,EAAAe,OAAAhB,EAAArB,cAAAsB,EAAAE,OAAAH,EAAAwL,YACAvL,EAAAwL,KAAAzL,EAAA0L,UAAAzL,EAAAwL,KAAAzL,EAAA2L,aAAA1L,EAAAwL,KAAAzL,EAAA4L,WAEAP,EAAAvL,KACA,SAAA+L,EAAAC,EAAAjI,GACA,IAAAiC,EAAAgG,EAAAJ,UACA,IAAAK,EAAAC,EAAAnI,EAAA,SAAAoI,EAAAC,GACA,IAAAC,EAAAF,EAAAnL,MAAAL,MAAAb,KAAAsM,EAAApL,MAAAL,MAAAb,KACA,OAAAuM,EACA,OAAAF,EAAAnL,MAAAL,MAAAZ,UAAAqM,EAAApL,MAAAL,MAAAZ,UAEA,OAAAsM,IAEA,IAAAC,EAAAtG,EAAAzG,OACA,QAAAgN,EAAAN,EAAA1M,OAAA,EAA4CgN,GAAA,EAAQA,IAAA,CACpD,IAAAC,EAAAP,EAAAM,GACA,IAAAE,EAAAT,EAAAF,SAAAU,EAAAxL,MAAAL,OACA,IAAA+L,EAAAV,EAAAF,SAAAU,EAAAxL,MAAAJ,KACA,KAAA8L,GAAAJ,GAIA,UAAAzL,MAAA,mBAHAmF,IAAA2G,UAAA,EAAAF,GAAAD,EAAA/I,QAAAuC,EAAA2G,UAAAD,EAAA1G,EAAAzG,QAKA+M,EAAAG,EAEA,OAAAzG,EAEAuF,EAAAQ,aACA,SAAAG,EAAAlB,EAAA4B,GACA,GAAA5B,EAAAzL,QAAA,EAEA,OAAAyL,EAEA,IAAA6B,EAAA7B,EAAAzL,OAAA,IACA,IAAAuN,EAAA9B,EAAA+B,MAAA,EAAAF,GACA,IAAAG,EAAAhC,EAAA+B,MAAAF,GACAX,EAAAY,EAAAF,GACAV,EAAAc,EAAAJ,GACA,IAAAK,EAAA,EACA,IAAAC,EAAA,EACA,IAAAX,EAAA,EACA,KAAAU,EAAAH,EAAAvN,QAAA2N,EAAAF,EAAAzN,QAAA,CACA,IAAA4N,EAAAP,EAAAE,EAAAG,GAAAD,EAAAE,IAGAlC,EAAAuB,KAFAY,GAAA,EAEAL,EAAAG,KAIAD,EAAAE,KAGA,KAAAD,EAAAH,EAAAvN,QACAyL,EAAAuB,KAAAO,EAAAG,KAEA,KAAAC,EAAAF,EAAAzN,QACAyL,EAAAuB,KAAAS,EAAAE,KAEA,OAAAlC,GA3EA,CA6ECO,WAIM,IAAA6B,GACP,SAAAA,GAKAA,EAAAC,OAAA,EAIAD,EAAAE,WAAA,EAIAF,EAAAG,SAAA,EAbA,CAcCH,WACD,IAAA3B,EAAA,WACA,SAAAA,EAAA1K,EAAAlC,EAAAiH,EAAA0F,GACAlO,KAAAkQ,KAAAzM,EACAzD,KAAAmQ,YAAA5O,EACAvB,KAAAoQ,SAAA5H,EACAxI,KAAAqQ,SAAAnC,EACAlO,KAAAsQ,aAAA,KAEA3I,OAAAO,eAAAiG,EAAAzN,UAAA,OACAyH,IAAA,WACA,OAAAnI,KAAAkQ,MAEA9H,YAAA,EACAC,cAAA,IAEAV,OAAAO,eAAAiG,EAAAzN,UAAA,cACAyH,IAAA,WACA,OAAAnI,KAAAmQ,aAEA/H,YAAA,EACAC,cAAA,IAEAV,OAAAO,eAAAiG,EAAAzN,UAAA,WACAyH,IAAA,WACA,OAAAnI,KAAAoQ,UAEAhI,YAAA,EACAC,cAAA,IAEA8F,EAAAzN,UAAA4N,QAAA,SAAA5K,GACA,GAAAA,EAAA,CACA,IAAAL,EAAArD,KAAAwO,SAAA9K,EAAAL,OACA,IAAAC,EAAAtD,KAAAwO,SAAA9K,EAAAJ,KACA,OAAAtD,KAAAqQ,SAAAhB,UAAAhM,EAAAC,GAEA,OAAAtD,KAAAqQ,UAEAlC,EAAAzN,UAAA6P,OAAA,SAAAC,EAAAhI,GACAxI,KAAAqQ,SAAAG,EAAA9H,KACA1I,KAAAoQ,SAAA5H,EACAxI,KAAAsQ,aAAA,MAEAnC,EAAAzN,UAAA+P,eAAA,WACA,UAAAzQ,KAAAsQ,aAAA,CACA,IAAAI,KACA,IAAAhI,EAAA1I,KAAAqQ,SACA,IAAAM,GAAA,EACA,QAAA1B,EAAA,EAA2BA,EAAAvG,EAAAzG,OAAiBgN,IAAA,CAC5C,GAAA0B,EAAA,CACAD,EAAAzJ,KAAAgI,GACA0B,GAAA,EAEA,IAAAC,EAAAlI,EAAAmI,OAAA5B,GACA0B,EAAA,OAAAC,GAAA,OAAAA,EACA,OAAAA,GAAA3B,EAAA,EAAAvG,EAAAzG,QAAA,OAAAyG,EAAAmI,OAAA5B,EAAA,IACAA,IAGA0B,GAAAjI,EAAAzG,OAAA,GACAyO,EAAAzJ,KAAAyB,EAAAzG,QAEAjC,KAAAsQ,aAAAI,EAEA,OAAA1Q,KAAAsQ,cAEAnC,EAAAzN,UAAA6N,WAAA,SAAAuC,GACAA,EAAAC,KAAAC,IAAAD,KAAAE,IAAAH,EAAA9Q,KAAAqQ,SAAApO,QAAA,GACA,IAAAyO,EAAA1Q,KAAAyQ,iBACA,IAAAS,EAAA,EAAAC,EAAAT,EAAAzO,OACA,OAAAkP,EACA,OAAA7O,EAAAC,OAAA,EAAAuO,GAEA,KAAAI,EAAAC,GAAA,CACA,IAAAC,EAAAL,KAAAM,OAAAH,EAAAC,GAAA,GACAT,EAAAU,GAAAN,EACAK,EAAAC,EAGAF,EAAAE,EAAA,EAKA,IAAA5O,EAAA0O,EAAA,EACA,OAAA5O,EAAAC,OAAAC,EAAAsO,EAAAJ,EAAAlO,KAEA2L,EAAAzN,UAAA8N,SAAA,SAAAnI,GACA,IAAAqK,EAAA1Q,KAAAyQ,iBACA,GAAApK,EAAA7D,MAAAkO,EAAAzO,OACA,OAAAjC,KAAAqQ,SAAApO,OAEA,GAAAoE,EAAA7D,KAAA,EACA,SAEA,IAAA8O,EAAAZ,EAAArK,EAAA7D,MACA,IAAA+O,EAAAlL,EAAA7D,KAAA,EAAAkO,EAAAzO,OAAAyO,EAAArK,EAAA7D,KAAA,GAAAxC,KAAAqQ,SAAApO,OACA,OAAA8O,KAAAC,IAAAD,KAAAE,IAAAK,EAAAjL,EAAA5D,UAAA8O,GAAAD,IAEA3J,OAAAO,eAAAiG,EAAAzN,UAAA,aACAyH,IAAA,WACA,OAAAnI,KAAAyQ,iBAAAxO,QAEAmG,YAAA,EACAC,cAAA,IAEA,OAAA8F,EAzGA,GA2GA,IAAAtL,GACA,SAAAA,GACA,IAAA2O,EAAA7J,OAAAjH,UAAA8Q,SACA,SAAA7N,EAAAhB,GACA,gBAAAA,EAEAE,EAAAc,UACA,SAAAE,EAAAlB,GACA,gBAAAA,EAEAE,EAAAgB,YACA,SAAA8I,EAAAhK,GACA,WAAAA,IAAA,IAAAA,EAEAE,EAAA8J,UACA,SAAA/I,EAAAjB,GACA,0BAAA6O,EAAAC,KAAA9O,GAEAE,EAAAe,SACA,SAAAb,EAAAJ,GACA,0BAAA6O,EAAAC,KAAA9O,GAEAE,EAAAE,SACA,SAAAsL,EAAA1L,GACA,4BAAA6O,EAAAC,KAAA9O,GAEAE,EAAAwL,OACA,SAAAvL,EAAAH,GAIA,cAAAA,GAAA,iBAAAA,EAEAE,EAAAC,gBACA,SAAA2B,EAAA9B,EAAA+O,GACA,OAAA/K,MAAAC,QAAAjE,MAAAgP,MAAAD,GAEA7O,EAAA4B,aApCA,CAqCC5B,WC90CD,IAAA+O,EAAA1Q,OAAA0Q,IACA,IAAIC,EAAK3Q,OAAA8B,MAET,IAAA8O,EAAA,WACA,SAAAA,EAAA3B,EAAAjQ,EAAAJ,GACA,IAAAC,EAAAC,KACAA,KAAAmQ,cACAnQ,KAAAE,UACAF,KAAA+R,gBACA/R,KAAAgS,UAAArK,OAAApF,OAAA,MACA,IAAA0P,EAAA,SAAAC,GACA,IAAAC,EAAAD,EAAAE,YACA,GAAAD,IAAApS,EAAAoQ,YACA,OAEA,IAAAkC,EACAtS,EAAAiS,UAAAE,EAAAzO,IAAA+N,YAAAU,EAAAI,mBAAA,WACAC,aAAAF,GACAA,EAAAG,WAAA,WAAiD,OAAAzS,EAAA0S,YAAAP,EAAAzO,IAAA0O,IAA+C,OAEhGpS,EAAA0S,YAAAP,EAAAzO,IAAA0O,IAEA,IAAAO,EAAA,SAAAR,GACAhR,OAAAC,OAAAwR,gBAAAT,EAAAnS,EAAAoQ,gBACA,IAAAyC,EAAAV,EAAAzO,IAAA+N,WACA,IAAAqB,EAAA9S,EAAAiS,UAAAY,GACA,GAAAC,EAAA,CACAA,EAAAlS,iBACAZ,EAAAiS,UAAAY,KAGA5S,KAAA+R,aAAA9K,KAAA/F,OAAAC,OAAA2R,iBAAAb,IACAjS,KAAA+R,aAAA9K,KAAA/F,OAAAC,OAAA4R,mBAAA,SAAAb,GACAQ,EAAAR,GACAnS,EAAAiT,aAAAd,EAAAzO,QAEAzD,KAAA+R,aAAA9K,KAAA/F,OAAAC,OAAA8R,yBAAA,SAAAzC,GACAkC,EAAAlC,EAAA0B,OACAD,EAAAzB,EAAA0B,OACAnS,EAAAiT,aAAAxC,EAAA0B,MAAAzO,QAEAzD,KAAA+R,aAAA9K,KAAAnH,EAAAU,YAAA,SAAA4B,GACAlB,OAAAC,OAAA+R,YAAArL,QAAA,SAAAqK,GACA,GAAAA,EAAAE,cAAArS,EAAAoQ,YAAA,CACAuC,EAAAR,GACAD,EAAAC,SAIAlS,KAAA+R,aAAA9K,MACAtG,QAAA,WACAO,OAAAC,OAAA+R,YAAArL,QAAA6K,GACA,QAAAzK,KAAAlI,EAAAiS,UACAjS,EAAAiS,UAAA/J,GAAAtH,aAIAO,OAAAC,OAAA+R,YAAArL,QAAAoK,GAEAH,EAAApR,UAAAC,QAAA,WACAX,KAAA+R,aAAAlK,QAAA,SAAAsL,GAAgD,OAAAA,KAAAxS,YAChDX,KAAA+R,iBAEAD,EAAApR,UAAAsS,aAAA,SAAAI,GACApT,KAAAE,UAAAgC,KAAA,SAAAmR,GACAA,EAAAC,YAAAF,EAAA5B,eAGAM,EAAApR,UAAA+R,YAAA,SAAAW,EAAA7R,GACAvB,KAAAE,QAAAkT,GAAAlR,KAAA,SAAAmR,GACA,OAAAA,EAAAE,aAAAH,EAAA5B,YAAAtP,KAAA,SAAAmL,GACA,IAAAmG,EAAAnG,EAAAoG,IAAA,SAAAN,GAA4D,OAAAO,GAAAN,EAAAD,KAC5D,IAAAjB,EAAAhR,OAAAC,OAAAwS,SAAAP,GACAlB,EAAAE,cAAA7Q,GACAL,OAAAC,OAAAwR,gBAAAT,EAAA3Q,EAAAiS,OAGStR,UAAA2B,EAAA,SAAA+P,GACTC,QAAAC,MAAAF,MAGA,OAAA9B,EA9EA,GAiFA,SAAAiC,GAAAC,GACA,OAAAA,GACA,KAAa3O,EAAqB9B,MAAA,OAAArC,OAAA+S,eAAA1Q,MAClC,KAAa8B,EAAqBC,QAAA,OAAApE,OAAA+S,eAAA3O,QAClC,KAAaD,EAAqBE,YAAA,OAAArE,OAAA+S,eAAAC,KAClC,KAAa7O,EAAqBG,KAAA,OAAAtE,OAAA+S,eAAAzO,KAClC,QACA,OAAAtE,OAAA+S,eAAAC,MAGA,SAAAR,GAAAN,EAAAe,GACA,IAAAxO,EAAA,iBAAAwO,EAAAxO,KAAAmG,OAAAqI,EAAAxO,MAAAwO,EAAAxO,KACA,OACAD,SAAAqO,GAAAI,EAAAzO,UACA0O,gBAAAD,EAAAzQ,MAAAL,MAAAb,KAAA,EACA6R,YAAAF,EAAAzQ,MAAAL,MAAAZ,UAAA,EACA6R,cAAAH,EAAAzQ,MAAAJ,IAAAd,KAAA,EACA+R,UAAAJ,EAAAzQ,MAAAJ,IAAAb,UAAA,EACA2C,QAAA+O,EAAA/O,QACAO,OACAC,OAAAuO,EAAAvO,QAIA,SAAA4O,GAAAnO,GACA,IAAAA,EACA,OAEA,OAAY5D,UAAA4D,EAAAoO,OAAA,EAAAjS,KAAA6D,EAAAqO,WAAA,GAEZ,SAAAC,GAAAjR,GACA,IAAAA,EACA,OAEA,OAAYL,OAASb,KAAAkB,EAAA0Q,gBAAA,EAAA3R,UAAAiB,EAAA2Q,YAAA,GAAoE/Q,KAAQd,KAAAkB,EAAA4Q,cAAA,EAAA7R,UAAAiB,EAAA6Q,UAAA,IAEjG,SAAAK,GAAAlR,GACA,IAAAA,EACA,OAEA,WAAemO,EAAKnO,EAAAL,MAAAb,KAAA,EAAAkB,EAAAL,MAAAZ,UAAA,EAAAiB,EAAAJ,IAAAd,KAAA,EAAAkB,EAAAJ,IAAAb,UAAA,GAEpB,SAAAoS,GAAA7P,GACA,IAAA8P,EAAA5T,OAAA6T,UAAAhM,mBACA,OAAA/D,GACA,KAAa+D,EAAqBC,KAAA,OAAA8L,EAAA9L,KAClC,KAAaD,EAAqBE,OAAA,OAAA6L,EAAA7L,OAClC,KAAaF,EAAqBG,SAAA,OAAA4L,EAAA5L,SAClC,KAAaH,EAAqBI,YAAA,OAAA2L,EAAA3L,YAClC,KAAaJ,EAAqBK,MAAA,OAAA0L,EAAA1L,MAClC,KAAaL,EAAqBM,SAAA,OAAAyL,EAAAzL,SAClC,KAAaN,EAAqBO,MAAA,OAAAwL,EAAAxL,MAClC,KAAaP,EAAqBQ,UAAA,OAAAuL,EAAAvL,UAClC,KAAaR,EAAqBS,OAAA,OAAAsL,EAAAtL,OAClC,KAAaT,EAAqBU,SAAA,OAAAqL,EAAArL,SAClC,KAAaV,EAAqBW,KAAA,OAAAoL,EAAApL,KAClC,KAAaX,EAAqBY,MAAA,OAAAmL,EAAAnL,MAClC,KAAaZ,EAAqBa,KAAA,OAAAkL,EAAAlL,KAClC,KAAab,EAAqBc,QAAA,OAAAiL,EAAAjL,QAClC,KAAad,EAAqBe,QAAA,OAAAgL,EAAAhL,QAClC,KAAaf,EAAqBjF,MAAA,OAAAgR,EAAAhR,MAClC,KAAaiF,EAAqBgB,KAAA,OAAA+K,EAAA/K,KAClC,KAAahB,EAAqBiB,UAAA,OAAA8K,EAAA9K,UAElC,OAAA8K,EAAArL,SAEA,SAAAuL,GAAAhQ,GACA,IAAA8P,EAAA5T,OAAA6T,UAAAhM,mBACA,OAAA/D,GACA,KAAA8P,EAAA9L,KAAA,OAAoCD,EAAqBC,KACzD,KAAA8L,EAAA7L,OAAA,OAAsCF,EAAqBE,OAC3D,KAAA6L,EAAA5L,SAAA,OAAwCH,EAAqBG,SAC7D,KAAA4L,EAAA3L,YAAA,OAA2CJ,EAAqBI,YAChE,KAAA2L,EAAA1L,MAAA,OAAqCL,EAAqBK,MAC1D,KAAA0L,EAAAzL,SAAA,OAAwCN,EAAqBM,SAC7D,KAAAyL,EAAAxL,MAAA,OAAqCP,EAAqBO,MAC1D,KAAAwL,EAAAvL,UAAA,OAAyCR,EAAqBQ,UAC9D,KAAAuL,EAAAtL,OAAA,OAAsCT,EAAqBS,OAC3D,KAAAsL,EAAArL,SAAA,OAAwCV,EAAqBU,SAC7D,KAAAqL,EAAApL,KAAA,OAAoCX,EAAqBW,KACzD,KAAAoL,EAAAnL,MAAA,OAAqCZ,EAAqBY,MAC1D,KAAAmL,EAAAlL,KAAA,OAAoCb,EAAqBa,KACzD,KAAAkL,EAAAjL,QAAA,OAAuCd,EAAqBc,QAC5D,KAAAiL,EAAAhL,QAAA,OAAuCf,EAAqBe,QAC5D,KAAAgL,EAAAhR,MAAA,OAAqCiF,EAAqBjF,MAC1D,KAAAgR,EAAA/K,KAAA,OAAoChB,EAAqBgB,KACzD,KAAA+K,EAAA9K,UAAA,OAAyCjB,EAAqBiB,UAE9D,OAAWjB,EAAqBU,SAEhC,SAAAwL,GAAA3Q,GACA,IAAAA,EACA,OAEA,OACAZ,MAAAkR,GAAAtQ,EAAAZ,OACAgF,KAAApE,EAAA6B,SAGA,IAAI+O,GAAiB,WACrB,SAAAC,EAAAjV,GACAF,KAAAE,UAEAyH,OAAAO,eAAAiN,EAAAzU,UAAA,qBACAyH,IAAA,WACA,iBAEAC,YAAA,EACAC,cAAA,IAEA8M,EAAAzU,UAAA0U,uBAAA,SAAAlD,EAAA7L,EAAAgP,EAAAC,GACA,IAAAC,EAAArD,EAAAsD,qBAAAnP,GACA,IAAA+M,EAAAlB,EAAAzO,IACA,OAAAzD,KAAAE,QAAAkT,GAAAlR,KAAA,SAAAmR,GACA,OAAAA,EAAAoC,WAAArC,EAAA5B,WAAAgD,GAAAnO,MACSnE,KAAA,SAAAwT,GACT,IAAAA,EACA,OAEA,IAAA/K,EAAA+K,EAAA/K,MAAA8I,IAAA,SAAAkC,GACA,IAAAC,GACAtU,MAAAqU,EAAArU,MACAuU,WAAAF,EAAAE,YAAAF,EAAArU,MACAwU,SAAAH,EAAAG,SACAC,WAAAJ,EAAAI,WACA3K,cAAAuK,EAAAvK,cACAmB,OAAAoJ,EAAApJ,OACAvH,KAAA6P,GAAAc,EAAA3Q,OAEA,GAAA2Q,EAAArR,SAAA,CACAsR,EAAAlS,MAAAkR,GAAAe,EAAArR,SAAAZ,OACAkS,EAAAC,WAAAF,EAAArR,SAAA6B,QAEAwP,EAAApR,sBACAqR,EAAArR,oBAAAoR,EAAApR,oBAAAkP,IAAAwB,KAEAU,EAAAK,mBAA+CxL,EAAmBV,UAClE8L,EAAAK,gBAAA/U,OAAA6T,UAAAmB,6BAAAC,iBAEA,OAAAP,IAEA,OACAhL,aAAA8K,EAAA9K,aACAwL,YAAAzL,MAIA,OAAAwK,EAhDqB,GAmDrB,SAAAkB,GAAAC,GACA,OAAAA,GAAA,iBAAAA,GAAA,iBAAAA,EAAAtR,KAEA,SAAAuR,GAAAZ,GACA,oBAAAA,EACA,OACAhT,MAAAgT,GAGA,GAAAU,GAAAV,GAAA,CACA,iBAAAA,EAAA3Q,KACA,OACArC,MAAAgT,EAAAhT,MAAAuD,QAAA,wBAAoD,SAGpD,OACAvD,MAAAgT,EAAAhT,OAGA,OAAYA,MAAA,MAAAgT,EAAA3K,SAAA,KAAA2K,EAAAhT,MAAA,WAEZ,SAAA6T,GAAAtL,GACA,IAAAA,EACA,OAEA,GAAAvE,MAAAC,QAAAsE,GACA,OAAAA,EAAAuI,IAAA8C,IAEA,OAAAA,GAAArL,IAGA,IAAAuL,GAAA,WACA,SAAAA,EAAAvW,GACAF,KAAAE,UAEAuW,EAAA/V,UAAAgW,aAAA,SAAAxE,EAAA7L,EAAAiP,GACA,IAAAlC,EAAAlB,EAAAzO,IACA,OAAAzD,KAAAE,QAAAkT,GAAAlR,KAAA,SAAAmR,GACA,OAAAA,EAAAsD,QAAAvD,EAAA5B,WAAAgD,GAAAnO,MACSnE,KAAA,SAAAwT,GACT,IAAAA,EACA,OAEA,OACAhS,MAAAkR,GAAAc,EAAAhS,OACAwH,SAAAsL,GAAAd,EAAAxK,cAIA,OAAAuL,EAlBA,GAsBA,SAAAG,GAAAzR,GACA,OACA1B,IAAAmO,EAAAiF,MAAA1R,EAAA1B,KACAC,MAAAkR,GAAAzP,EAAAzB,QAIA,SAAAoT,GAAA9R,GACA,IAAA+R,EAAA7V,OAAA6T,UAAApJ,WACA,OAAA3G,GACA,KAAa2G,EAAa5B,KAAA,OAAAgN,EAAApQ,MAC1B,KAAagF,EAAanC,OAAA,OAAAuN,EAAAvN,OAC1B,KAAamC,EAAaC,UAAA,OAAAmL,EAAAnL,UAC1B,KAAaD,EAAaE,QAAA,OAAAkL,EAAAlL,QAC1B,KAAaF,EAAarC,MAAA,OAAAyN,EAAAzN,MAC1B,KAAaqC,EAAa1C,OAAA,OAAA8N,EAAA9N,OAC1B,KAAa0C,EAAalC,SAAA,OAAAsN,EAAAtN,SAC1B,KAAakC,EAAavC,MAAA,OAAA2N,EAAA3N,MAC1B,KAAauC,EAAaxC,YAAA,OAAA4N,EAAA5N,YAC1B,KAAawC,EAAa/B,KAAA,OAAAmN,EAAAnN,KAC1B,KAAa+B,EAAapC,UAAA,OAAAwN,EAAAxN,UAC1B,KAAaoC,EAAazC,SAAA,OAAA6N,EAAA7N,SAC1B,KAAayC,EAAatC,SAAA,OAAA0N,EAAA1N,SAC1B,KAAasC,EAAaxB,SAAA,OAAA4M,EAAA5M,SAC1B,KAAawB,EAAaG,OAAA,OAAAiL,EAAAjL,OAC1B,KAAaH,EAAaI,OAAA,OAAAgL,EAAAhL,OAC1B,KAAaJ,EAAaK,QAAA,OAAA+K,EAAA/K,QAC1B,KAAaL,EAAahF,MAAA,OAAAoQ,EAAApQ,MAE1B,OAAAoQ,EAAA7N,SAEA,IAAA8N,GAAA,WACA,SAAAA,EAAA9W,GACAF,KAAAE,UAEA8W,EAAAtW,UAAAuW,uBAAA,SAAA/E,EAAAoD,GACA,IAAAlC,EAAAlB,EAAAzO,IACA,OAAAzD,KAAAE,QAAAkT,GAAAlR,KAAA,SAAAmR,GAA8D,OAAAA,EAAA6D,oBAAA9D,EAAA5B,cAA0DtP,KAAA,SAAAyI,GACxH,IAAAA,EACA,OAEA,OAAAA,EAAA8I,IAAA,SAAAmC,GAA8C,OAC9CxJ,KAAAwJ,EAAAxJ,KACAG,OAAA,GACAF,cAAAuJ,EAAAvJ,cACArH,KAAA8R,GAAAlB,EAAA5Q,MACAtB,MAAAkR,GAAAgB,EAAAzQ,SAAAzB,OACA8I,eAAAoI,GAAAgB,EAAAzQ,SAAAzB,aAIA,OAAAsT,EApBA,GAuBA,SAAAG,GAAAC,GACA,OACAxJ,QAAAwJ,EAAAxJ,QACAC,aAAAuJ,EAAAvJ,cAGA,IAAAwJ,GAAA,WACA,SAAAA,EAAAnX,GACAF,KAAAE,UAEAmX,EAAA3W,UAAA4W,+BAAA,SAAApF,EAAAkF,EAAA9B,GACA,IAAAlC,EAAAlB,EAAAzO,IACA,OAAAzD,KAAAE,QAAAkT,GAAAlR,KAAA,SAAAmR,GACA,OAAAA,EAAAkE,OAAAnE,EAAA5B,WAAA,KAAA2F,GAAAC,IAAAlV,KAAA,SAAAuE,GACA,IAAAA,GAAA,IAAAA,EAAAxE,OACA,OAEA,OAAAwE,EAAAgN,IAAAwB,SAIA,OAAAoC,EAfA,GAkBA,IAAAG,GAAA,WACA,SAAAA,EAAAtX,GACAF,KAAAE,UAEAsX,EAAA9W,UAAA+W,oCAAA,SAAAvF,EAAAxO,EAAA0T,EAAA9B,GACA,IAAAlC,EAAAlB,EAAAzO,IACA,OAAAzD,KAAAE,QAAAkT,GAAAlR,KAAA,SAAAmR,GACA,OAAAA,EAAAkE,OAAAnE,EAAA5B,WAAAmD,GAAAjR,GAAAyT,GAAAC,IAAAlV,KAAA,SAAAuE,GACA,IAAAA,GAAA,IAAAA,EAAAxE,OACA,OAEA,OAAAwE,EAAAgN,IAAAwB,SAIA,OAAAuC,EAfA,GAkBA,IAAAE,GAAA,WACA,SAAAA,EAAAxX,GACAF,KAAAE,UAEAwX,EAAAhX,UAAAiX,sBAAA,SAAAzF,EAAAoD,GACA,IAAAlC,EAAAlB,EAAAzO,IACA,OAAAzD,KAAAE,QAAAkT,GAAAlR,KAAA,SAAAmR,GAA8D,OAAAA,EAAAuE,mBAAAxE,EAAA5B,cAAyDtP,KAAA,SAAA2V,GACvH,IAAAA,EACA,OAEA,OAAAA,EAAApE,IAAA,SAAAmC,GAA8C,OAC9CxR,MAAAwR,EAAAxR,MACAV,MAAAkR,GAAAgB,EAAAlS,aAIAgU,EAAAhX,UAAAoX,0BAAA,SAAA5F,EAAAwD,EAAAJ,GACA,IAAAlC,EAAAlB,EAAAzO,IACA,OAAAzD,KAAAE,QAAAkT,GAAAlR,KAAA,SAAAmR,GAA8D,OAAAA,EAAA0E,sBAAA3E,EAAA5B,WAAAkE,EAAAtR,MAAAuQ,GAAAe,EAAAhS,UAA+FxB,KAAA,SAAA8V,GAC7J,IAAAA,EACA,OAEA,OAAAA,EAAAvE,IAAA,SAAAwE,GACA,IAAArC,GACAtU,MAAA2W,EAAA3W,OAEA2W,EAAA3T,WACAsR,EAAAtR,SAAA2Q,GAAAgD,EAAA3T,WAEA2T,EAAA1T,sBACAqR,EAAArR,oBAAA0T,EAAA1T,oBAAAkP,IAAAwB,KAEA,OAAAW,OAIA,OAAA8B,EApCA,GAuCA,IAAAQ,GAAA,WACA,SAAAA,EAAAhY,GACAF,KAAAE,UAEAgY,EAAAxX,UAAAyX,qBAAA,SAAAjG,EAAAmD,EAAAC,GACA,IAAAlC,EAAAlB,EAAAzO,IACA,OAAAzD,KAAAE,QAAAkT,GAAAlR,KAAA,SAAAmR,GAA8D,OAAAA,EAAA8E,qBAAA/E,EAAA5B,WAAA6D,KAAoEnT,KAAA,SAAAkW,GAClI,IAAAA,EACA,OAEA,OAAAA,EAAA3E,IAAA,SAAA/P,GACA,IAAAuB,GACA5B,MAAAK,EAAAkB,UAAA,EACAtB,IAAAI,EAAAmB,QAAA,QAEA,IAAAnB,EAAAsB,OACAC,EAAAD,KAAAqT,GAAA3U,EAAAsB,OAEA,OAAAC,OAIA,OAAAiT,EAtBA,GAyBA,SAAAG,GAAArT,GACA,OAAAA,GACA,KAAaN,EAAmB4T,QAAA,OAAApX,OAAA6T,UAAArQ,iBAAA4T,QAChC,KAAa5T,EAAmB6T,QAAA,OAAArX,OAAA6T,UAAArQ,iBAAA6T,QAChC,KAAa7T,EAAmB8T,OAAA,OAAAtX,OAAA6T,UAAArQ,iBAAA8T,OAEhC,OClcO,SAAAC,GAAA/P,EAAAgQ,QACP,IAAAA,IAAkCA,GAAA,GAClC,IAAAC,EAAA,EAAAC,EAAAlQ,EAAAzG,OAAAU,EAAA,GAAAkW,EAAA,EAAAvD,EAAA,GAAAwD,EAAA,EACA,SAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAA,EACA,IAAAvW,EAAA,EACA,KAAAuW,EAAAF,IAAAC,GAAA,CACA,IAAArI,EAAAlI,EAAAyQ,WAAAR,GACA,GAAA/H,GAAA,IAAAA,GAAA,GACAjO,EAAA,GAAAA,EAAAiO,EAAA,QAEA,GAAAA,GAAA,IAAAA,GAAA,GACAjO,EAAA,GAAAA,EAAAiO,EAAA,UAEA,MAAAA,GAAA,IAAAA,GAAA,KAIA,MAHAjO,EAAA,GAAAA,EAAAiO,EAAA,MAKA+H,IACAO,IAEAA,EAAAF,IACArW,GAAA,GAEA,OAAAA,EAEA,SAAAyW,EAAAC,GACAV,EAAAU,EACA1W,EAAA,GACAkW,EAAA,EACAvD,EAAA,GACAwD,EAAA,EAEA,SAAAQ,IACA,IAAAjW,EAAAsV,EACA,QAAAjQ,EAAAyQ,WAAAR,GACAA,QAEA,CACAA,IACA,KAAAA,EAAAjQ,EAAAzG,QAAAsX,GAAA7Q,EAAAyQ,WAAAR,KACAA,IAGA,GAAAA,EAAAjQ,EAAAzG,QAAA,KAAAyG,EAAAyQ,WAAAR,GAAA,CAEA,OADAA,EACAjQ,EAAAzG,QAAAsX,GAAA7Q,EAAAyQ,WAAAR,KAMA,CACAG,EAAA,EACA,OAAApQ,EAAA2G,UAAAhM,EAAAsV,GAPAA,IACA,KAAAA,EAAAjQ,EAAAzG,QAAAsX,GAAA7Q,EAAAyQ,WAAAR,KACAA,IAQA,IAAArV,EAAAqV,EACA,GAAAA,EAAAjQ,EAAAzG,SAAA,KAAAyG,EAAAyQ,WAAAR,IAAA,MAAAjQ,EAAAyQ,WAAAR,IAAA,IACAA,EACAjQ,EAAAzG,QAAA,KAAAyG,EAAAyQ,WAAAR,IAAA,KAAAjQ,EAAAyQ,WAAAR,KACAA,IAEA,GAAAA,EAAAjQ,EAAAzG,QAAAsX,GAAA7Q,EAAAyQ,WAAAR,IAAA,CACAA,IACA,KAAAA,EAAAjQ,EAAAzG,QAAAsX,GAAA7Q,EAAAyQ,WAAAR,KACAA,IAEArV,EAAAqV,OAGAG,EAAA,EAGA,OAAApQ,EAAA2G,UAAAhM,EAAAC,GAEA,SAAAkW,IACA,IAAAvU,EAAA,GAAA5B,EAAAsV,EACA,QACA,GAAAA,GAAAC,EAAA,CACA3T,GAAAyD,EAAA2G,UAAAhM,EAAAsV,GACAG,EAAA,EACA,MAEA,IAAAlI,EAAAlI,EAAAyQ,WAAAR,GACA,QAAA/H,EAAA,CACA3L,GAAAyD,EAAA2G,UAAAhM,EAAAsV,GACAA,IACA,MAEA,QAAA/H,EAAA,CACA3L,GAAAyD,EAAA2G,UAAAhM,EAAAsV,GAEA,KADAA,GACAC,EAAA,CACAE,EAAA,EACA,MAGA,OADAlI,EAAAlI,EAAAyQ,WAAAR,MAEA,QACA1T,GAAA,IACA,MACA,QACAA,GAAA,KACA,MACA,QACAA,GAAA,IACA,MACA,QACAA,GAAA,KACA,MACA,SACAA,GAAA,KACA,MACA,SACAA,GAAA,KACA,MACA,SACAA,GAAA,KACA,MACA,SACAA,GAAA,KACA,MACA,SACA,IAAAwU,EAAAV,EAAA,MACAU,GAAA,EACAxU,GAAA6G,OAAA4N,aAAAD,GAGAX,EAAA,EAEA,MACA,QACAA,EAAA,EAEAzV,EAAAsV,EACA,SAEA,GAAA/H,GAAA,GAAAA,GAAA,IACA,GAAA+I,GAAA/I,GAAA,CACA3L,GAAAyD,EAAA2G,UAAAhM,EAAAsV,GACAG,EAAA,EACA,MAGAA,EAAA,EAIAH,IAEA,OAAA1T,EAEA,SAAA2U,IACAjX,EAAA,GACAmW,EAAA,EACAD,EAAAF,EACA,GAAAA,GAAAC,EAAA,CAEAC,EAAAD,EACA,OAAAtD,EAAA,GAEA,IAAA3P,EAAA+C,EAAAyQ,WAAAR,GAEA,GAAAkB,GAAAlU,GAAA,CACA,GACAgT,IACAhW,GAAAmJ,OAAA4N,aAAA/T,GACAA,EAAA+C,EAAAyQ,WAAAR,SACakB,GAAAlU,IACb,OAAA2P,EAAA,GAGA,GAAAqE,GAAAhU,GAAA,CACAgT,IACAhW,GAAAmJ,OAAA4N,aAAA/T,GACA,QAAAA,GAAA,KAAA+C,EAAAyQ,WAAAR,GAAA,CACAA,IACAhW,GAAA,KAEA,OAAA2S,EAAA,GAEA,OAAA3P,GAEA,SACAgT,IACA,OAAArD,EAAA,EACA,SACAqD,IACA,OAAArD,EAAA,EACA,QACAqD,IACA,OAAArD,EAAA,EACA,QACAqD,IACA,OAAArD,EAAA,EACA,QACAqD,IACA,OAAArD,EAAA,EACA,QACAqD,IACA,OAAArD,EAAA,EAEA,QACAqD,IACAhW,EAAA6W,IACA,OAAAlE,EAAA,GAEA,QACA,IAAAjS,EAAAsV,EAAA,EAEA,QAAAjQ,EAAAyQ,WAAAR,EAAA,IACAA,GAAA,EACA,KAAAA,EAAAC,IACAe,GAAAjR,EAAAyQ,WAAAR,KAGAA,IAEAhW,EAAA+F,EAAA2G,UAAAhM,EAAAsV,GACA,OAAArD,EAAA,GAGA,QAAA5M,EAAAyQ,WAAAR,EAAA,IACAA,GAAA,EACA,IAAAmB,GAAA,EACA,KAAAnB,EAAAC,GAAA,CACA,IAAAhI,EACA,QADAlI,EAAAyQ,WAAAR,IACAA,EAAA,EAAAC,GAAA,KAAAlQ,EAAAyQ,WAAAR,EAAA,IACAA,GAAA,EACAmB,GAAA,EACA,MAEAnB,IAEA,IAAAmB,EAAA,CACAnB,IACAG,EAAA,EAEAnW,EAAA+F,EAAA2G,UAAAhM,EAAAsV,GACA,OAAArD,EAAA,GAGA3S,GAAAmJ,OAAA4N,aAAA/T,GACAgT,IACA,OAAArD,EAAA,GAEA,QACA3S,GAAAmJ,OAAA4N,aAAA/T,GAEA,KADAgT,IACAC,IAAAW,GAAA7Q,EAAAyQ,WAAAR,IACA,OAAArD,EAAA,GAKA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA3S,GAAA2W,IACA,OAAAhE,EAAA,GAEA,QAEA,KAAAqD,EAAAC,GAAAmB,EAAApU,IAAA,CACAgT,IACAhT,EAAA+C,EAAAyQ,WAAAR,GAEA,GAAAE,IAAAF,EAAA,CAGA,OAFAhW,EAAA+F,EAAA2G,UAAAwJ,EAAAF,IAGA,kBAAArD,EAAA,EACA,mBAAAA,EAAA,EACA,kBAAAA,EAAA,EAEA,OAAAA,EAAA,GAGA3S,GAAAmJ,OAAA4N,aAAA/T,GACAgT,IACA,OAAArD,EAAA,IAGA,SAAAyE,EAAApU,GACA,GAAAkU,GAAAlU,IAAAgU,GAAAhU,GACA,SAEA,OAAAA,GACA,SACA,QACA,SACA,QACA,QACA,QACA,QACA,QACA,SAEA,SAEA,SAAAqU,IACA,IAAA/U,EACA,GACAA,EAAA2U,UACS3U,GAAA,IAAAA,GAAA,IACT,OAAAA,EAEA,OACAmU,cACAa,YAAA,WAAkC,OAAAtB,GAClCuB,KAAAxB,EAAAsB,EAAAJ,EACAO,SAAA,WAA+B,OAAA7E,GAC/B8E,cAAA,WAAoC,OAAAzX,GACpC0X,eAAA,WAAqC,OAAAxB,GACrCyB,eAAA,WAAqC,OAAA3B,EAAAE,GACrC0B,cAAA,WAAoC,OAAAzB,IAGpC,SAAAe,GAAAjJ,GACA,YAAAA,GAAA,IAAAA,GAAA,KAAAA,GAAA,KAAAA,GACA,MAAAA,GAAA,OAAAA,MAAA,MAAAA,GAAA,MACA,OAAAA,GAAA,OAAAA,GAAA,QAAAA,GAAA,QAAAA,EAEA,SAAA+I,GAAA/I,GACA,YAAAA,GAAA,KAAAA,GAAA,OAAAA,GAAA,OAAAA,EAEA,SAAA2I,GAAA3I,GACA,OAAAA,GAAA,IAAAA,GAAA,GCpVO,SAAA2G,GAAAiD,EAAA9W,EAAA0T,GACP,IAAAqD,EACA,IAAAC,EACA,IAAAC,EACA,IAAAC,EACA,IAAAC,EACA,GAAAnX,EAAA,CACAkX,EAAAlX,EAAAoN,OACA+J,EAAAD,EAAAlX,EAAAzB,OACA0Y,EAAAC,EACA,KAAAD,EAAA,IAAAG,GAAAN,EAAAG,EAAA,IACAA,IAEA,IAAAvL,EAAAyL,EACA,KAAAzL,EAAAoL,EAAAvY,SAAA6Y,GAAAN,EAAApL,IACAA,IAEAsL,EAAAF,EAAAnL,UAAAsL,EAAAvL,GACAqL,EAAAM,GAAAL,EAAAtD,OAEA,CACAsD,EAAAF,EACAC,EAAA,EACAE,EAAA,EACAC,EAAA,EACAC,EAAAL,EAAAvY,OAEA,IAAA+Y,EAAAC,GAAA7D,EAAAoD,GACA,IAAAU,GAAA,EACA,IAAAC,EAAA,EACA,IAAAC,EAEAA,EADAhE,EAAAvJ,aACAwN,GAAA,IAAAjE,EAAAxJ,SAAA,GAGA,KAEA,IAAA0N,EAAkB7C,GAAaiC,GAAA,GAC/B,IAAAa,GAAA,EACA,SAAAC,IACA,OAAAR,EAAAK,GAAAD,EAAAX,EAAAU,GAEA,SAAAvB,IACA,IAAAtE,EAAAgG,EAAApB,OACAgB,GAAA,EACA,UAAA5F,GAAA,KAAAA,GAAA,CACA4F,KAAA,KAAA5F,EACAA,EAAAgG,EAAApB,OAEAqB,EAAA,KAAAjG,GAAA,IAAAgG,EAAAf,gBACA,OAAAjF,EAEA,IAAAmG,KACA,SAAAC,EAAAhT,EAAAyG,EAAAC,IACAmM,GAAApM,EAAA0L,GAAAzL,EAAAwL,GAAAJ,EAAAnL,UAAAF,EAAAC,KAAA1G,GACA+S,EAAAxU,MAAiC6J,OAAA3B,EAAAlN,OAAAmN,EAAAD,EAAAjB,QAAAxF,IAGjC,IAAAiT,EAAA/B,IACA,QAAA+B,EAAA,CACA,IAAAC,EAAAN,EAAAjB,iBAAAM,EACA,IAAAkB,EACAH,EADAL,GAAAD,EAAAX,GACAE,EAAAiB,GAEA,UAAAD,GAAA,CACA,IAAAG,EAAAR,EAAAjB,iBAAAiB,EAAAhB,iBAAAK,EACA,IAAAoB,EAAAnC,IACA,IAAAoC,EAAA,GACA,MAAAd,IAAA,KAAAa,GAAA,KAAAA,IAAA,CAEA,IAAAE,EACAP,EAAA,IAAAI,EADAR,EAAAjB,iBAAAM,GAEAmB,EAAAR,EAAAjB,iBAAAiB,EAAAhB,iBAAAK,EACAqB,EAAA,KAAAD,EAAAP,IAAA,GACAO,EAAAnC,IAEA,OAAAmC,GACA,OAAAJ,EAAA,CACAR,IACAa,EAAAR,UAGA,OAAAO,GACA,OAAAJ,EAAA,CACAR,IACAa,EAAAR,SAGA,CACA,OAAAG,GACA,OACA,OACAR,IACAa,EAAAR,IACA,MACA,OACA,QACAQ,EAAAR,IACA,MACA,QAEAQ,EADAd,EACAM,IAIA,IAEA,MACA,OACAQ,EAAA,IACA,MACA,QACA,OAAAD,EAAA,CACAC,EAAA,GACA,MAGA,OACA,OACA,OACA,QACA,OACA,OACA,KAAAD,GAAA,KAAAA,EACAC,EAAA,IAEA,IAAAD,GAAA,KAAAA,IACAR,GAAA,GAEA,MACA,QACAA,GAAA,GAGAL,GAAA,KAAAa,GAAA,KAAAA,IACAC,EAAAR,KAGA,IAAAU,EACAR,EAAAM,EAAAF,EADAR,EAAAjB,iBAAAM,GAEAgB,EAAAI,EAEA,OAAAN,EAEA,SAAAJ,GAAAc,EAAAnD,GACA,IAAA/T,EAAA,GACA,QAAAgK,EAAA,EAAmBA,EAAA+J,EAAW/J,IAC9BhK,GAAAkX,EAEA,OAAAlX,EAEA,SAAA8V,GAAA7M,EAAAkJ,GACA,IAAAnI,EAAA,EACA,IAAAmN,EAAA,EACA,IAAAxO,EAAAwJ,EAAAxJ,SAAA,EACA,KAAAqB,EAAAf,EAAAjM,QAAA,CACA,IAAA2O,EAAA1C,EAAA2C,OAAA5B,GACA,SAAA2B,EACAwL,QAEA,WAAAxL,EAIA,MAHAwL,GAAAxO,EAKAqB,IAEA,OAAA8B,KAAAM,MAAA+K,EAAAxO,GAEA,SAAAqN,GAAA7D,EAAA1O,GACA,QAAAuG,EAAA,EAAmBA,EAAAvG,EAAAzG,OAAiBgN,IAAA,CACpC,IAAA2B,EAAAlI,EAAAmI,OAAA5B,GACA,UAAA2B,EAAA,CACA,GAAA3B,EAAA,EAAAvG,EAAAzG,QAAA,OAAAyG,EAAAmI,OAAA5B,EAAA,GACA,aAEA,WAEA,UAAA2B,EACA,WAGA,OAAAwG,KAAA4D,KAAA,KAEO,SAAAF,GAAApS,EAAAoI,GACP,kBAAAuL,QAAA3T,EAAAmI,OAAAC,ICvLO,SAAAwL,GAAA5T,EAAArC,GACP,IAAAkW,KACA,IAAAC,EAAA,IAAA7U,OACA,IAAA8U,OAAA,EACA,IAAAC,GACA/Z,SACAmO,OAAA,EACA7O,OAAA,EACA0a,KAAA,SACAC,YAAA,GAEA,IAAAC,GAAA,EACA,SAAAC,EAAAna,EAAAmO,EAAA7O,EAAA0a,GACAD,EAAA/Z,QACA+Z,EAAA5L,SACA4L,EAAAza,SACAya,EAAAC,OACAD,EAAAK,iBAAA,EACAN,EAAAC,EAEA,IACAM,GAAAtU,GACAuU,cAAA,SAAAnM,EAAA7O,GACA,GAAAoE,GAAAyK,EACA,MAAA0L,EAEAC,OAAA,EACAI,EAAAxW,EAAAyK,EACAyL,EAAAtV,KAAA,KAEAiW,iBAAA,SAAA9Q,EAAA0E,EAAA7O,GACA,GAAAoE,EAAAyK,EACA,MAAA0L,EAEAM,EAAA1Q,EAAA0E,EAAA7O,EAAA,YACAsa,IAAAta,OAAA,GAAAmK,EACA,GAAA/F,GAAAyK,EAAA7O,EACA,MAAAua,GAGAW,YAAA,SAAArM,EAAA7O,GACA,GAAAoE,GAAAyK,EACA,MAAA0L,EAEAC,OAAA,EACAF,EAAAa,OAEAC,aAAA,SAAAvM,EAAA7O,GACA,GAAAoE,GAAAyK,EACA,MAAA0L,EAEAC,OAAA,EACAF,EAAAtV,KAAA,IAEAqW,WAAA,SAAAxM,EAAA7O,GACA,GAAAoE,GAAAyK,EACA,MAAA0L,EAEAC,OAAA,EACAF,EAAAa,OAEAG,eAAA,SAAA5a,EAAAmO,EAAA7O,GACA,GAAAoE,EAAAyK,EACA,MAAA0L,EAEAM,EAAAna,EAAAmO,EAAA7O,EAAAub,GAAA7a,IACA,GAAA0D,GAAAyK,EAAA7O,EACA,MAAAua,GAGAiB,YAAA,SAAAC,EAAA5M,EAAA7O,GACA,GAAAoE,GAAAyK,EACA,MAAA0L,EAEA,SAAAkB,GAAAjB,GAAA,aAAAA,EAAAE,KAAA,CACAF,EAAAM,YAAAjM,EACA+L,GAAA,EACAJ,OAAA,OAEA,SAAAiB,EAAA,CACA,IAAAC,EAAApB,IAAAta,OAAA,GACA,oBAAA0b,EACApB,IAAAta,OAAA,GAAA0b,EAAA,MAEA,CACAd,GAAA,EACAN,IAAAta,OAAA,MAEAwa,OAAA,MAKA,MAAAvN,GACA,GAAAA,IAAAsN,EACA,MAAAtN,EAGA,OACA0O,KAAArB,EACAE,eACAI,kBACAgB,QAAA,SAAAC,GACA,IAAAC,EAAA,EACA,QAAA9O,EAAA,EAA2B8O,EAAAD,EAAA7b,QAAAgN,EAAAsN,EAAAta,OAA2CgN,IACtE,GAAA6O,EAAAC,KAAAxB,EAAAtN,IAAA,MAAA6O,EAAAC,GACAA,SAEA,UAAAD,EAAAC,GACA,SAGA,OAAAA,IAAAD,EAAA7b,SAQO,SAAA4U,GAAAnO,EAAAsV,EAAA5G,QACP,IAAA4G,IAA4BA,MAC5B,IAAAC,EAAA,KACA,IAAAC,KACA,IAAAC,KACA,SAAAC,EAAAzb,GACAgE,MAAAC,QAAAsX,GACAA,EAAAjX,KAAAtE,GAEAsb,IACAC,EAAAD,GAAAtb,GAGA,IAAA0b,EA6BArB,GAAAtU,GA5BAuU,cAAA,WACA,IAAAqB,KACAF,EAAAE,GACAH,EAAAlX,KAAAiX,GACAA,EAAAI,EACAL,EAAA,MAEAf,iBAAA,SAAA9Q,GACA6R,EAAA7R,GAEA+Q,YAAA,WACAe,EAAAC,EAAAf,OAEAC,aAAA,WACA,IAAAkB,KACAH,EAAAG,GACAJ,EAAAlX,KAAAiX,GACAA,EAAAK,EACAN,EAAA,MAEAX,WAAA,WACAY,EAAAC,EAAAf,OAEAG,eAAAa,EACAI,QAAA,SAAA1K,EAAAhD,EAAA7O,GACA+b,EAAA/W,MAAyB6M,QAAAhD,SAAA7O,aAGzBmV,GACA,OAAA8G,EAAA,GAKO,SAAAO,GAAA/V,EAAAsV,EAAA5G,QACP,IAAA4G,IAA4BA,MAC5B,IAAAE,GAAyBvB,KAAA,QAAA7L,QAAA,EAAA7O,QAAA,EAAAwK,YAAAmQ,YAAA,GACzB,SAAA8B,EAAAtP,GACA,gBAAA8O,EAAAvB,KAAA,CACAuB,EAAAjc,OAAAmN,EAAA8O,EAAApN,OACAoN,IAAAtB,QAGA,SAAAwB,EAAAO,GACAT,EAAAzR,SAAAxF,KAAA0X,GACA,OAAAA,EAEA,IAAAN,EAuCArB,GAAAtU,GAtCAuU,cAAA,SAAAnM,GACAoN,EAAAE,GAAqCzB,KAAA,SAAA7L,SAAA7O,QAAA,EAAA2a,OAAAsB,EAAAzR,eAErCyQ,iBAAA,SAAA9Q,EAAA0E,EAAA7O,IACAic,EAAAE,GAAqCzB,KAAA,WAAA7L,SAAA7O,QAAA,EAAA2a,OAAAsB,EAAAzR,eACrCA,SAAAxF,MAAyC0V,KAAA,SAAAha,MAAAyJ,EAAA0E,SAAA7O,SAAA2a,OAAAsB,KAEzCf,YAAA,SAAArM,EAAA7O,GACAic,EAAAjc,OAAA6O,EAAA7O,EAAAic,EAAApN,OACAoN,IAAAtB,OACA8B,EAAA5N,EAAA7O,IAEAob,aAAA,SAAAvM,EAAA7O,GACAic,EAAAE,GAAqCzB,KAAA,QAAA7L,SAAA7O,QAAA,EAAA2a,OAAAsB,EAAAzR,eAErC6Q,WAAA,SAAAxM,EAAA7O,GACAic,EAAAjc,OAAA6O,EAAA7O,EAAAic,EAAApN,OACAoN,IAAAtB,OACA8B,EAAA5N,EAAA7O,IAEAsb,eAAA,SAAA5a,EAAAmO,EAAA7O,GACAmc,GAAqBzB,KAAAa,GAAA7a,GAAAmO,SAAA7O,SAAA2a,OAAAsB,EAAAvb,UACrB+b,EAAA5N,EAAA7O,IAEAwb,YAAA,SAAAC,EAAA5M,EAAA7O,GACA,aAAAic,EAAAvB,OACA,MAAAe,EACAQ,EAAAnB,YAAAjM,EAEA,MAAA4M,GACAgB,EAAA5N,KAIA0N,QAAA,SAAA1K,EAAAhD,EAAA7O,GACA+b,EAAA/W,MAAyB6M,QAAAhD,SAAA7O,aAGzBmV,GACA,IAAAnS,EAAAiZ,EAAAzR,SAAA,GACAxH,UACAA,EAAA2X,OAEA,OAAA3X,EAKO,SAAA2Z,GAAAC,EAAAjB,GACP,IAAAiB,EACA,OAEA,IAAAC,EAAAD,EACA,QAAA9c,EAAA,EAAAgd,EAAAnB,EAAmC7b,EAAAgd,EAAA9c,OAAoBF,IAAA,CACvD,IAAAid,EAAAD,EAAAhd,GACA,oBAAAid,EAAA,CACA,cAAAF,EAAAnC,OAAAhW,MAAAC,QAAAkY,EAAArS,UACA,OAEA,IAAAwS,GAAA,EACA,QAAAC,EAAA,EAAAC,EAAAL,EAAArS,SAAgDyS,EAAAC,EAAAld,OAAgBid,IAAA,CAChE,IAAAE,EAAAD,EAAAD,GACA,GAAAvY,MAAAC,QAAAwY,EAAA3S,WAAA2S,EAAA3S,SAAA,GAAA9J,QAAAqc,EAAA,CACAF,EAAAM,EAAA3S,SAAA,GACAwS,GAAA,EACA,OAGA,IAAAA,EACA,WAGA,CACA,IAAAI,EAAAL,EACA,aAAAF,EAAAnC,MAAA0C,EAAA,IAAA1Y,MAAAC,QAAAkY,EAAArS,WAAA4S,GAAAP,EAAArS,SAAAxK,OACA,OAEA6c,IAAArS,SAAA4S,IAGA,OAAAP,EAKO,SAAAQ,GAAAR,GACP,IAAAA,EAAAlC,SAAAkC,EAAAlC,OAAAnQ,SACA,SAEA,IAAAmR,EAAA0B,GAAAR,EAAAlC,QACA,gBAAAkC,EAAAlC,OAAAD,KAAA,CACA,IAAA1U,EAAA6W,EAAAlC,OAAAnQ,SAAA,GAAA9J,MACAib,EAAA3W,KAAAgB,QAEA,aAAA6W,EAAAlC,OAAAD,KAAA,CACA,IAAA0C,EAAAP,EAAAlC,OAAAnQ,SAAA4P,QAAAyC,IACA,IAAAO,GACAzB,EAAA3W,KAAAoY,GAGA,OAAAzB,EAKO,SAAA2B,GAAAT,GACP,OAAAA,EAAAnC,MACA,YACA,OAAAmC,EAAArS,SAAAgH,IAAA8L,IACA,aACA,IAAAC,EAAA7X,OAAApF,OAAA,MACA,QAAAR,EAAA,EAAAmd,EAAAJ,EAAArS,SAAgD1K,EAAAmd,EAAAjd,OAAgBF,IAAA,CAChE,IAAA0d,EAAAP,EAAAnd,GACA,IAAA4c,EAAAc,EAAAhT,SAAA,GACAkS,IACAa,EAAAC,EAAAhT,SAAA,GAAA9J,OAAA4c,GAAAZ,IAGA,OAAAa,EACA,WACA,aACA,aACA,cACA,OAAAV,EAAAnc,MACA,QACA,QAGO,SAAA+c,GAAAZ,EAAAhO,EAAA6O,QACP,IAAAA,IAAuCA,GAAA,GACvC,OAAA7O,GAAAgO,EAAAhO,UAAAgO,EAAAhO,OAAAgO,EAAA7c,QAAA0d,GAAA7O,IAAAgO,EAAAhO,OAAAgO,EAAA7c,OAKO,SAAA2d,GAAAd,EAAAhO,EAAA6O,QACP,IAAAA,IAAuCA,GAAA,GACvC,GAAAD,GAAAZ,EAAAhO,EAAA6O,GAAA,CACA,IAAAlT,EAAAqS,EAAArS,SACA,GAAA9F,MAAAC,QAAA6F,GACA,QAAAwC,EAAA,EAA2BA,EAAAxC,EAAAxK,QAAAwK,EAAAwC,GAAA6B,UAAqD7B,IAAA,CAChF,IAAA2G,EAAAgK,GAAAnT,EAAAwC,GAAA6B,EAAA6O,GACA,GAAA/J,EACA,OAAAA,EAIA,OAAAkJ,EAEA,OAKO,SAAA9B,GAAAtU,EAAA2V,EAAAjH,GACP,IAAAyI,EAAmBpH,GAAa/P,GAAA,GAChC,SAAAoX,EAAAC,GACA,OAAAA,EAAA,WAA4C,OAAAA,EAAAF,EAAAxF,iBAAAwF,EAAAvF,mBAA8E,WAAgB,UAE1I,SAAA0F,EAAAD,GACA,OAAAA,EAAA,SAAAE,GAA+C,OAAAF,EAAAE,EAAAJ,EAAAxF,iBAAAwF,EAAAvF,mBAAmF,WAAgB,UAElJ,IAAA2C,EAAA6C,EAAAzB,EAAApB,eAAAC,EAAA8C,EAAA3B,EAAAnB,kBAAAC,EAAA2C,EAAAzB,EAAAlB,aAAAE,EAAAyC,EAAAzB,EAAAhB,cAAAC,EAAAwC,EAAAzB,EAAAf,YAAAC,EAAAyC,EAAA3B,EAAAd,gBAAAE,EAAAuC,EAAA3B,EAAAZ,aAAAyC,EAAAJ,EAAAzB,EAAA6B,WAAA1B,EAAAwB,EAAA3B,EAAAG,SACA,IAAA2B,EAAA/I,KAAA+I,iBACA,IAAAC,EAAAhJ,KAAAgJ,mBACA,SAAAxG,IACA,QACA,IAAAtE,EAAAuK,EAAA3F,OACA,OAAA2F,EAAAtF,iBACA,OACA8F,EAAA,IACA,MACA,OACAA,EAAA,IACA,MACA,OACAA,EAAA,IACA,MACA,OACAF,GACAE,EAAA,IAEA,MACA,OACAA,EAAA,IACA,MACA,OACAA,EAAA,IAGA,OAAA/K,GACA,QACA,QACA6K,EACAE,EAAA,IAGAH,IAEA,MACA,QACAG,EAAA,GACA,MACA,QACA,QACA,MACA,QACA,OAAA/K,IAIA,SAAA+K,EAAAvM,EAAAwM,EAAAC,QACA,IAAAD,IAAwCA,WACxC,IAAAC,IAAmCA,MACnC/B,EAAA1K,GACA,GAAAwM,EAAAre,OAAAse,EAAAte,OAAA,GACA,IAAAqT,EAAAuK,EAAA1F,WACA,UAAA7E,GAAA,CACA,QAAAgL,EAAAjE,QAAA/G,GAAA,CACAsE,IACA,MAEA,QAAA2G,EAAAlE,QAAA/G,GACA,MAEAA,EAAAsE,MAIA,SAAA4G,EAAAC,GACA,IAAA9d,EAAAkd,EAAAzF,gBACAqG,EACAlD,EAAA5a,GAGAua,EAAAva,GAEAiX,IACA,SAEA,SAAA8G,IACA,OAAAb,EAAA1F,YACA,QACA,IAAAxX,EAAA,EACA,IAEA,oBADAA,EAAAge,KAAA9J,MAAAgJ,EAAAzF,kBACA,CACAiG,EAAA,GACA1d,EAAA,GAGA,MAAAuM,GACAmR,EAAA,GAEA9C,EAAA5a,GACA,MACA,OACA4a,EAAA,MACA,MACA,OACAA,GAAA,GACA,MACA,OACAA,GAAA,GACA,MACA,QACA,SAEA3D,IACA,SAEA,SAAAgH,IACA,QAAAf,EAAA1F,WAAA,CACAkG,EAAA,YACA,SAEAG,GAAA,GACA,OAAAX,EAAA1F,WAAA,CACAsD,EAAA,KACA7D,IACAiH,KACAR,EAAA,iBAIAA,EAAA,YAEA,SAEA,SAAAS,IACA7D,IACArD,IACA,IAAAmH,GAAA,EACA,SAAAlB,EAAA1F,YAAA,KAAA0F,EAAA1F,YAAA,CACA,OAAA0F,EAAA1F,WAAA,CACA4G,GACAV,EAAA,SAEA5C,EAAA,KACA7D,IACA,OAAAiG,EAAA1F,YAAAiG,EACA,WAGAW,GACAV,EAAA,SAEAO,KACAP,EAAA,YAEAU,GAAA,EAEA5D,IACA,IAAA0C,EAAA1F,WACAkG,EAAA,UAGAzG,IAEA,SAEA,SAAAoH,IACA3D,IACAzD,IACA,IAAAmH,GAAA,EACA,SAAAlB,EAAA1F,YAAA,KAAA0F,EAAA1F,YAAA,CACA,OAAA0F,EAAA1F,WAAA,CACA4G,GACAV,EAAA,SAEA5C,EAAA,KACA7D,IACA,OAAAiG,EAAA1F,YAAAiG,EACA,WAGAW,GACAV,EAAA,SAEAQ,KACAR,EAAA,YAEAU,GAAA,EAEAzD,IACA,IAAAuC,EAAA1F,WACAkG,EAAA,UAGAzG,IAEA,SAEA,SAAAiH,IACA,OAAAhB,EAAA1F,YACA,OACA,OAAA6G,IACA,OACA,OAAAF,IACA,QACA,OAAAN,GAAA,GACA,QACA,OAAAE,KAGA9G,IACA,QAAAiG,EAAA1F,WACA,SAEA,IAAA0G,IAAA,CACAR,EAAA,SACA,SAEA,KAAAR,EAAA1F,YACAkG,EAAA,SAEA,SAOO,SAAAY,GAAAvY,EAAAwY,GACP,IAAArB,EAAmBpH,GAAa/P,GAAAyY,KAAAnc,EAAA8L,EAAA,EAAA6H,EAChC,GACAA,EAAAkH,EAAA5F,cAEA,OADAjV,EAAA6a,EAAA3F,QAEA,QACA,QACA,QACApJ,IAAA6H,GACAwI,EAAAla,KAAAyB,EAAA2G,UAAAyB,EAAA6H,SAEA,IAAAuI,GACAC,EAAAla,KAAA4Y,EAAAzF,gBAAAlU,QAAA,WAAAgb,IAEApQ,EAAA+O,EAAA5F,qBAGK,KAAAjV,GACL,OAAAmc,EAAAC,KAAA,IAEA,SAAA5D,GAAA7a,GACA,cAAAA,GACA,8BACA,4BACA,4BACA,sBCjlBO,SAAA0e,GAAA3Y,EAAAkV,EAAA0D,GACP,OAAAC,GAAA7Y,EAAAkV,OAAA,EAAA0D,GAEO,SAAAC,GAAA7Y,EAAA8Y,EAAA7e,EAAA2e,EAAAG,GACP,IAAA7D,EAAA4D,EAAA/R,QACA,IAAAuO,EACA,IAAAa,EAAeJ,GAAS/V,MACxB,IAAAkU,OAAA,EACA,IAAA8E,OAAA,EACA,KAAA9D,EAAA3b,OAAA,IACAyf,EAAA9D,EAAAR,MAEA,aADAR,EAAiBgC,GAAkBC,EAAAjB,UACnC,IAAAjb,EASA,MAPAA,EADA,iBAAA+e,IACAxC,MAAgCwC,GAAA/e,EAAAuc,IAGhCvc,GAOA,GAAAia,EAOA,eAAAA,EAAAD,MAAA,iBAAA+E,GAAA/a,MAAAC,QAAAgW,EAAAnQ,UAAA,CACA,IAAAkV,EAAuB/C,GAAkBhC,GAAA8E,IACzC,YAAAC,EAAA,CACA,YAAAhf,EAAA,CACA,IAAAgf,EAAA/E,OACA,UAAArZ,MAAA,iBAEA,IAAAqe,EAAAhF,EAAAnQ,SAAA4P,QAAAsF,EAAA/E,QACA,IAAAiF,OAAA,EACA,IAAAC,EAAAH,EAAA/E,OAAA9L,OAAA6Q,EAAA/E,OAAA3a,OACA,GAAA2f,EAAA,GAEA,IAAAG,EACAF,GADAE,EAAAnF,EAAAnQ,SAAAmV,EAAA,IACA9Q,OAAAiR,EAAA9f,WAEA,CACA4f,EAAAjF,EAAA9L,OAAA,EACA,GAAA8L,EAAAnQ,SAAAxK,OAAA,GAEA,IAAA+f,EACAF,EADAlF,EAAAnQ,SAAA,GACAqE,QAGA,OAAAmR,GAAAvZ,GAA6CoI,OAAA+Q,EAAA5f,OAAA6f,EAAAD,EAAA3T,QAAA,IAAoEoT,GAIjH,OAAAW,GAAAvZ,GAA6CoI,OAAA6Q,EAAA7Q,OAAA7O,OAAA0f,EAAA1f,OAAAiM,QAAAyS,KAAAuB,UAAAvf,IAAmF2e,GAIhI,YAAA3e,EACA,SAEA,IAAAwf,EAAAxB,KAAAuB,UAAAR,GAAA,KAAAf,KAAAuB,UAAAvf,GACA,IAAA0c,EAAAoC,IAAA7E,EAAAnQ,SAAAgH,IAAA,SAAAlE,GAAgG,OAAAA,EAAA9C,SAAA,GAAA9J,SAA8Bia,EAAAnQ,SAAAxK,OAC9H,IAAAmF,OAAA,EACA,GAAAiY,EAAA,GACA,IAAA0C,EACA3a,GAAwB0J,QADxBiR,EAAAnF,EAAAnQ,SAAA4S,EAAA,IACwBvO,OAAAiR,EAAA9f,cAAA,EAAAiM,QAAA,IAAAiU,QAGxB/a,EADA,IAAAwV,EAAAnQ,SAAAxK,QACwB6O,OAAA8L,EAAA9L,OAAA,EAAA7O,OAAA,EAAAiM,QAAAiU,IAGArR,OAAA8L,EAAA9L,OAAA,EAAA7O,OAAA,EAAAiM,QAAAiU,EAAA,KAExB,OAAAF,GAAAvZ,EAAAtB,EAAAka,GAGA,aAAA1E,EAAAD,MAAA,iBAAA+E,GAAA/a,MAAAC,QAAAgW,EAAAnQ,UAAA,CACA,IAAA2V,EACA,QADAV,EACA,CAEA,IAAAS,EAAA,GAAAxB,KAAAuB,UAAAvf,GACA,IAAAyE,OAAA,EACA,OAAAwV,EAAAnQ,SAAAxK,OACAmF,GAAwB0J,OAAA8L,EAAA9L,OAAA,EAAA7O,OAAA,EAAAiM,QAAAiU,OAExB,CACA,IAAAJ,EACA3a,GAAwB0J,QADxBiR,EAAAnF,EAAAnQ,SAAAmQ,EAAAnQ,SAAAxK,OAAA,IACwB6O,OAAAiR,EAAA9f,cAAA,EAAAiM,QAAA,IAAAiU,GAExB,OAAAF,GAAAvZ,EAAAtB,EAAAka,GAGA,YAAA3e,GAAAia,EAAAnQ,SAAAxK,QAAA,GAEA,IAAAogB,EAAAX,EACA,IAAAY,EAAA1F,EAAAnQ,SAAA4V,GACA,IAAAjb,OAAA,EACA,OAAAwV,EAAAnQ,SAAAxK,OAEAmF,GAA4B0J,OAAA8L,EAAA9L,OAAA,EAAA7O,OAAA2a,EAAA3a,OAAA,EAAAiM,QAAA,SAE5B,GAAA0O,EAAAnQ,SAAAxK,OAAA,IAAAogB,EAAA,CAEA,IAAAN,EACA,IAAAjR,GADAiR,EAAAnF,EAAAnQ,SAAA4V,EAAA,IACAvR,OAAAiR,EAAA9f,OACA,IAAAsgB,EACAnb,GAA4B0J,SAAA7O,OAD5B2a,EAAA9L,OAAA8L,EAAA3a,OAC4B,EAAA6O,EAAA5C,QAAA,SAG5B9G,GAA4B0J,OAAAwR,EAAAxR,OAAA7O,OAAA2a,EAAAnQ,SAAA4V,EAAA,GAAAvR,OAAAwR,EAAAxR,OAAA5C,QAAA,IAE5B,OAAA+T,GAAAvZ,EAAAtB,EAAAka,GAGA,UAAA/d,MAAA,wCAKA,UAAAA,MAAA,iCAAAme,EAAA,0CAAA9E,EAAAD,MAlGA,YAAAha,EACA,UAAAY,MAAA,oCAEA,OAAA0e,GAAAvZ,GAAqCoI,OAAA+N,IAAA/N,OAAA,EAAA7O,OAAA4c,IAAA5c,OAAA,EAAAiM,QAAAyS,KAAAuB,UAAAvf,IAAiG2e,GAiGtI,IAAApC,EAEA,SAAA+C,GAAAvZ,EAAAtB,EAAAka,GAEA,IAAAnb,EAAAqc,GAAA9Z,EAAAtB,GAEA,IAAAqb,EAAArb,EAAA0J,OACA,IAAAxN,EAAA8D,EAAA0J,OAAA1J,EAAA8G,QAAAjM,OACA,OAAAmF,EAAAnF,QAAA,IAAAmF,EAAA8G,QAAAjM,OAAA,CACA,KAAAwgB,EAAA,IAA6B3H,GAAK3U,EAAAsc,EAAA,IAClCA,IAEA,KAAAnf,EAAA6C,EAAAlE,SAAwC6Y,GAAK3U,EAAA7C,IAC7CA,IAGA,IAAAmD,EAAgB8Q,GAAMpR,GAAW2K,OAAA2R,EAAAxgB,OAAAqB,EAAAmf,GAAqCnB,GAEtE,QAAArS,EAAAxI,EAAAxE,OAAA,EAAkCgN,GAAA,EAAQA,IAAA,CAC1C,IAAAyT,EAAAjc,EAAAwI,GACA9I,EAAAqc,GAAArc,EAAAuc,GACAD,EAAA1R,KAAAE,IAAAwR,EAAAC,EAAA5R,QACAxN,EAAAyN,KAAAC,IAAA1N,EAAAof,EAAA5R,OAAA4R,EAAAzgB,QACAqB,GAAAof,EAAAxU,QAAAjM,OAAAygB,EAAAzgB,OAGA,IAAA0gB,EACA,QAAa7R,OAAA2R,EAAAxgB,OADbyG,EAAAzG,QAAAkE,EAAAlE,OAAAqB,GAAAmf,EACavU,QAAA/H,EAAAkJ,UAAAoT,EAAAnf,KAEN,SAAAkf,GAAA9Z,EAAAtB,GACP,OAAAsB,EAAA2G,UAAA,EAAAjI,EAAA0J,QAAA1J,EAAA8G,QAAAxF,EAAA2G,UAAAjI,EAAA0J,OAAA1J,EAAAnF,QAEO,SAAA2gB,GAAAla,EAAAoI,GACP,qBAAAuL,QAAA3T,EAAAmI,OAAAC,ICzJO,IAAI+R,GAAgBpK,GAIpB,IAAIqK,GAAcxG,GAKlB,IAAIyG,GAAQlM,GAIZ,IAAImM,GAAYvE,GAIhB,IAAIwE,GAAqBrE,GAIzB,IAAIsE,GAAmBtD,GAIvB,IAAIuD,GAAc7D,GAIlB,IAAI8D,GAAe7D,GAInB,IAAI8D,GAAQrG,GAMZ,IAAIsG,GAAgBrC,GAapB,SAASsC,GAAM/I,EAAA9W,EAAA0T,GACtB,OAAWG,GAAgBiD,EAAA9W,EAAA0T,GAiBpB,SAAAoM,GAAA9a,EAAAkV,EAAAjb,EAAAyU,GACP,OAAWmK,GAAgB7Y,EAAAkV,EAAAjb,EAAAyU,EAAAkK,kBAAAlK,EAAAqK,mBAKpB,SAAAhT,GAAA/F,EAAAjC,GACP,QAAAwI,EAAAxI,EAAAxE,OAAA,EAAkCgN,GAAA,EAAQA,IAC1CvG,EAAe8Z,GAAc9Z,EAAAjC,EAAAwI,IAE7B,OAAAvG,ECvFO,SAAA+a,GAAAC,GACP,OACAC,gBAAA,WAAsC,WAAAC,GAAA,eACtCC,SAAA,SAAArhB,EAAAshB,EAAAC,EAAAC,GAAqE,OAAAH,GAAAH,EAAAlhB,EAAAshB,EAAAC,EAAAC,KAG9D,IAAAC,GAAA,yBACA,IAAAC,GAAA,uBACA,IAAAC,GAAA,uBACA,IAAAC,GAAA,uBACA,IAAAC,GAAA,eACA,IAAAC,GAAA,eACA,IAAAC,GAAA,oBACA,IAAAC,GAAA,cACA,IAAAC,GAAA,kBACA,IAAAC,GAAA,qBACA,IAAAC,GAAA,oBACP,IAAAf,GAAA,WACA,SAAAA,EAAAE,EAAAhL,EAAA8L,GACA5kB,KAAA6kB,OAAAf,EACA9jB,KAAA8Y,YACA9Y,KAAA4kB,eAEAhB,EAAAljB,UAAAokB,MAAA,WACA,WAAAlB,EAAA5jB,KAAA6kB,OAAA7kB,KAAA8Y,UAAA9Y,KAAA4kB,eAEAhB,EAAAljB,UAAAqkB,OAAA,SAAAC,GACA,GAAAA,IAAAhlB,KACA,SAEA,KAAAglB,gBAAApB,GACA,SAEA,OAAA5jB,KAAA8Y,YAAAkM,EAAAlM,WACA9Y,KAAA4kB,eAAAI,EAAAJ,cAEAhB,EAAAljB,UAAAukB,aAAA,WACA,OAAAjlB,KAAA6kB,QAEAjB,EAAAljB,UAAAwkB,aAAA,SAAApB,GACA9jB,KAAA6kB,OAAAf,GAEA,OAAAF,EAzBA,GA2BA,SAAAC,GAAAsB,EAAA3iB,EAAAshB,EAAAC,EAAAC,QACA,IAAAD,IAAiCA,EAAA,GAEjC,IAAAqB,EAAA,EAAAC,GAAA,EACA,OAAAvB,EAAAhL,WACA,OACAtW,EAAA,IAAAA,EACA4iB,EAAA,EACA,MACA,OACA5iB,EAAA,KAAAA,EACA4iB,EAAA,EAGA,IAAA9J,EAAkBuH,GAAkBrgB,GAAAwC,EAAA6K,EAAA+U,EAAAd,EAAAc,aACpC/U,GACAyV,UACAC,SAAAzB,EAAAgB,SAEA,QACA,IAAAhU,EAAAiT,EAAAzI,EAAArB,cAAA0C,EAAA,GAEA,SADA3X,EAAAsW,EAAApB,QAEA,MAGA,GAAApJ,IAAAiT,EAAAzI,EAAArB,cACA,UAAA1W,MAAA,mDAAAf,EAAAgjB,OAAAlK,EAAArB,cAAA,IAIAoL,IACAvU,GAAAsU,GAEAC,EAAAD,EAAA,EAEA,OAAApgB,GACA,OAIA,OACA2X,EAAAsH,GACAW,GAAA,EACA,MACA,OAIA,OACAjI,EAAAuH,GACAU,GAAA,EACA,MACA,OACAjI,EAAAwH,GACAS,GAAA,EACA,MACA,OACAjI,EAAAyH,GACAQ,GAAA,EACA,MACA,OACA,OACAjI,EAAA0H,GACAO,GAAA,EACA,MACA,OACAjI,EAAA2H,GACAM,GAAA,EACA,MACA,QACAjI,EAAAiI,EAAAL,GAAAE,GACAG,GAAA,EACA,MACA,QACAjI,EAAA6H,GACAI,GAAA,EAIA,GAAAO,EACA,OAAAngB,GACA,QACA2X,EAAAgI,GACA,MACA,QACAhI,EAAA+H,GAIA7U,EAAA0V,SAAA,IAAA3B,GAAAE,EAAAmB,eAAA3J,EAAAf,gBAAAqK,GACA/U,EAAAyV,OAAAre,MACAwe,WAAA3U,EACA4U,OAAA/I,IAGA,OAAA9M,EClJA8V,EAAAxS,EAAAyS,EAAA,8BAAAC,KAQO,SAAAA,GAAA/lB,GACP,IAAAgmB,KACA,IAAA3jB,EAAA,IAAqBtC,EAAaC,GAClCgmB,EAAA7e,KAAA9E,GACA,IAAAkR,EAAA,WACA,IAAA0S,KACA,QAAAhkB,EAAA,EAAwBA,EAAAC,UAAAC,OAAuBF,IAC/CgkB,EAAAhkB,GAAAC,UAAAD,GAEA,OAAAI,EAAAN,yBAAAmkB,MAAA7jB,EAAA4jB,IAEA,IAAAxkB,EAAAzB,EAAAyB,WACAukB,EAAA7e,KAAA/F,OAAA6T,UAAAkR,+BAAA1kB,EAAA,IAAqF2T,GAAkC7B,KACvHyS,EAAA7e,KAAA/F,OAAA6T,UAAAmR,sBAAA3kB,EAAA,IAA4EkV,GAA6BpD,KACzGyS,EAAA7e,KAAA/F,OAAA6T,UAAAoR,+BAAA5kB,EAAA,IAAqFyV,GAAsC3D,KAC3HyS,EAAA7e,KAAA/F,OAAA6T,UAAAqR,uCAAA7kB,EAAA,IAA6F8V,GAA+ChE,KAC5IyS,EAAA7e,KAAA/F,OAAA6T,UAAAsR,4CAAA9kB,EAAA,IAAkGiW,GAAoDnE,KACtJyS,EAAA7e,KAAA,IAAyB6K,EAAmCvQ,EAAA8R,EAAAvT,IAC5DgmB,EAAA7e,KAAA/F,OAAA6T,UAAAuR,kBAAA/kB,EAAoEkiB,IAAyB,KAC7FqC,EAAA7e,KAAA/F,OAAA6T,UAAAwR,yBAAAhlB,EAAAilB,KACAV,EAAA7e,KAAA/F,OAAA6T,UAAA0R,sBAAAllB,EAAA,IAA4EmW,GAAqCrE,KACjHyS,EAAA7e,KAAA/F,OAAA6T,UAAA2R,6BAAAnlB,EAAA,IAAmF2W,GAAoC7E,KAEvH,IAAAmT,IACAG,YAAA,yCACAxB,UACAyB,YAAA,KACAC,cAAA,YAEAC,WACA,IAAW,MACX,UAEAC,mBACSC,KAAA,IAASC,MAAA,IAAYC,OAAA,YACrBF,KAAA,IAAAC,MAAA,IAAAC,OAAA,YACAF,KAAA,IAAAC,MAAA,IAAAC,OAAA","file":"ce4a4e856f1eec361ed0.bundle.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nvar STOP_WHEN_IDLE_FOR = 2 * 60 * 1000; // 2min\r\nvar WorkerManager = /** @class */ (function () {\r\n    function WorkerManager(defaults) {\r\n        var _this = this;\r\n        this._defaults = defaults;\r\n        this._worker = null;\r\n        this._idleCheckInterval = setInterval(function () { return _this._checkIfIdle(); }, 30 * 1000);\r\n        this._lastUsedTime = 0;\r\n        this._configChangeListener = this._defaults.onDidChange(function () { return _this._stopWorker(); });\r\n    }\r\n    WorkerManager.prototype._stopWorker = function () {\r\n        if (this._worker) {\r\n            this._worker.dispose();\r\n            this._worker = null;\r\n        }\r\n        this._client = null;\r\n    };\r\n    WorkerManager.prototype.dispose = function () {\r\n        clearInterval(this._idleCheckInterval);\r\n        this._configChangeListener.dispose();\r\n        this._stopWorker();\r\n    };\r\n    WorkerManager.prototype._checkIfIdle = function () {\r\n        if (!this._worker) {\r\n            return;\r\n        }\r\n        var timePassedSinceLastUsed = Date.now() - this._lastUsedTime;\r\n        if (timePassedSinceLastUsed > STOP_WHEN_IDLE_FOR) {\r\n            this._stopWorker();\r\n        }\r\n    };\r\n    WorkerManager.prototype._getClient = function () {\r\n        this._lastUsedTime = Date.now();\r\n        if (!this._client) {\r\n            this._worker = monaco.editor.createWebWorker({\r\n                // module that exports the create() method and returns a `JSONWorker` instance\r\n                moduleId: 'vs/language/json/jsonWorker',\r\n                label: this._defaults.languageId,\r\n                // passed in to the create() method\r\n                createData: {\r\n                    languageSettings: this._defaults.diagnosticsOptions,\r\n                    languageId: this._defaults.languageId,\r\n                    enableSchemaRequest: this._defaults.diagnosticsOptions.enableSchemaRequest\r\n                }\r\n            });\r\n            this._client = this._worker.getProxy();\r\n        }\r\n        return this._client;\r\n    };\r\n    WorkerManager.prototype.getLanguageServiceWorker = function () {\r\n        var _this = this;\r\n        var resources = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            resources[_i] = arguments[_i];\r\n        }\r\n        var _client;\r\n        return this._getClient().then(function (client) {\r\n            _client = client;\r\n        }).then(function (_) {\r\n            return _this._worker.withSyncedResources(resources);\r\n        }).then(function (_) { return _client; });\r\n    };\r\n    return WorkerManager;\r\n}());\r\nexport { WorkerManager };\r\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\n/**\n * The Position namespace provides helper functions to work with\n * [Position](#Position) literals.\n */\nexport var Position;\n(function (Position) {\n    /**\n     * Creates a new Position literal from the given line and character.\n     * @param line The position's line.\n     * @param character The position's character.\n     */\n    function create(line, character) {\n        return { line: line, character: character };\n    }\n    Position.create = create;\n    /**\n     * Checks whether the given liternal conforms to the [Position](#Position) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.objectLiteral(candidate) && Is.number(candidate.line) && Is.number(candidate.character);\n    }\n    Position.is = is;\n})(Position || (Position = {}));\n/**\n * The Range namespace provides helper functions to work with\n * [Range](#Range) literals.\n */\nexport var Range;\n(function (Range) {\n    function create(one, two, three, four) {\n        if (Is.number(one) && Is.number(two) && Is.number(three) && Is.number(four)) {\n            return { start: Position.create(one, two), end: Position.create(three, four) };\n        }\n        else if (Position.is(one) && Position.is(two)) {\n            return { start: one, end: two };\n        }\n        else {\n            throw new Error(\"Range#create called with invalid arguments[\" + one + \", \" + two + \", \" + three + \", \" + four + \"]\");\n        }\n    }\n    Range.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Range](#Range) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\n    }\n    Range.is = is;\n})(Range || (Range = {}));\n/**\n * The Location namespace provides helper functions to work with\n * [Location](#Location) literals.\n */\nexport var Location;\n(function (Location) {\n    /**\n     * Creates a Location literal.\n     * @param uri The location's uri.\n     * @param range The location's range.\n     */\n    function create(uri, range) {\n        return { uri: uri, range: range };\n    }\n    Location.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Location](#Location) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\n    }\n    Location.is = is;\n})(Location || (Location = {}));\n/**\n * The Color namespace provides helper functions to work with\n * [Color](#Color) literals.\n */\nexport var Color;\n(function (Color) {\n    /**\n     * Creates a new Color literal.\n     */\n    function create(red, green, blue, alpha) {\n        return {\n            red: red,\n            green: green,\n            blue: blue,\n            alpha: alpha,\n        };\n    }\n    Color.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Color](#Color) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.number(candidate.red)\n            && Is.number(candidate.green)\n            && Is.number(candidate.blue)\n            && Is.number(candidate.alpha);\n    }\n    Color.is = is;\n})(Color || (Color = {}));\n/**\n * The ColorInformation namespace provides helper functions to work with\n * [ColorInformation](#ColorInformation) literals.\n */\nexport var ColorInformation;\n(function (ColorInformation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(range, color) {\n        return {\n            range: range,\n            color: color,\n        };\n    }\n    ColorInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the [ColorInformation](#ColorInformation) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Range.is(candidate.range) && Color.is(candidate.color);\n    }\n    ColorInformation.is = is;\n})(ColorInformation || (ColorInformation = {}));\n/**\n * The Color namespace provides helper functions to work with\n * [ColorPresentation](#ColorPresentation) literals.\n */\nexport var ColorPresentation;\n(function (ColorPresentation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(label, textEdit, additionalTextEdits) {\n        return {\n            label: label,\n            textEdit: textEdit,\n            additionalTextEdits: additionalTextEdits,\n        };\n    }\n    ColorPresentation.create = create;\n    /**\n     * Checks whether the given literal conforms to the [ColorInformation](#ColorInformation) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.string(candidate.label)\n            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))\n            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));\n    }\n    ColorPresentation.is = is;\n})(ColorPresentation || (ColorPresentation = {}));\n/**\n * Enum of known range kinds\n */\nexport var FoldingRangeKind;\n(function (FoldingRangeKind) {\n    /**\n     * Folding range for a comment\n     */\n    FoldingRangeKind[\"Comment\"] = \"comment\";\n    /**\n     * Folding range for a imports or includes\n     */\n    FoldingRangeKind[\"Imports\"] = \"imports\";\n    /**\n     * Folding range for a region (e.g. `#region`)\n     */\n    FoldingRangeKind[\"Region\"] = \"region\";\n})(FoldingRangeKind || (FoldingRangeKind = {}));\n/**\n * The folding range namespace provides helper functions to work with\n * [FoldingRange](#FoldingRange) literals.\n */\nexport var FoldingRange;\n(function (FoldingRange) {\n    /**\n     * Creates a new FoldingRange literal.\n     */\n    function create(startLine, endLine, startCharacter, endCharacter, kind) {\n        var result = {\n            startLine: startLine,\n            endLine: endLine\n        };\n        if (Is.defined(startCharacter)) {\n            result.startCharacter = startCharacter;\n        }\n        if (Is.defined(endCharacter)) {\n            result.endCharacter = endCharacter;\n        }\n        if (Is.defined(kind)) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    FoldingRange.create = create;\n    /**\n     * Checks whether the given literal conforms to the [FoldingRange](#FoldingRange) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.number(candidate.startLine) && Is.number(candidate.startLine)\n            && (Is.undefined(candidate.startCharacter) || Is.number(candidate.startCharacter))\n            && (Is.undefined(candidate.endCharacter) || Is.number(candidate.endCharacter))\n            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));\n    }\n    FoldingRange.is = is;\n})(FoldingRange || (FoldingRange = {}));\n/**\n * The DiagnosticRelatedInformation namespace provides helper functions to work with\n * [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) literals.\n */\nexport var DiagnosticRelatedInformation;\n(function (DiagnosticRelatedInformation) {\n    /**\n     * Creates a new DiagnosticRelatedInformation literal.\n     */\n    function create(location, message) {\n        return {\n            location: location,\n            message: message\n        };\n    }\n    DiagnosticRelatedInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);\n    }\n    DiagnosticRelatedInformation.is = is;\n})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));\n/**\n * The diagnostic's severity.\n */\nexport var DiagnosticSeverity;\n(function (DiagnosticSeverity) {\n    /**\n     * Reports an error.\n     */\n    DiagnosticSeverity.Error = 1;\n    /**\n     * Reports a warning.\n     */\n    DiagnosticSeverity.Warning = 2;\n    /**\n     * Reports an information.\n     */\n    DiagnosticSeverity.Information = 3;\n    /**\n     * Reports a hint.\n     */\n    DiagnosticSeverity.Hint = 4;\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\n/**\n * The Diagnostic namespace provides helper functions to work with\n * [Diagnostic](#Diagnostic) literals.\n */\nexport var Diagnostic;\n(function (Diagnostic) {\n    /**\n     * Creates a new Diagnostic literal.\n     */\n    function create(range, message, severity, code, source, relatedInformation) {\n        var result = { range: range, message: message };\n        if (Is.defined(severity)) {\n            result.severity = severity;\n        }\n        if (Is.defined(code)) {\n            result.code = code;\n        }\n        if (Is.defined(source)) {\n            result.source = source;\n        }\n        if (Is.defined(relatedInformation)) {\n            result.relatedInformation = relatedInformation;\n        }\n        return result;\n    }\n    Diagnostic.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Diagnostic](#Diagnostic) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate)\n            && Range.is(candidate.range)\n            && Is.string(candidate.message)\n            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))\n            && (Is.number(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))\n            && (Is.string(candidate.source) || Is.undefined(candidate.source))\n            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));\n    }\n    Diagnostic.is = is;\n})(Diagnostic || (Diagnostic = {}));\n/**\n * The Command namespace provides helper functions to work with\n * [Command](#Command) literals.\n */\nexport var Command;\n(function (Command) {\n    /**\n     * Creates a new Command literal.\n     */\n    function create(title, command) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        var result = { title: title, command: command };\n        if (Is.defined(args) && args.length > 0) {\n            result.arguments = args;\n        }\n        return result;\n    }\n    Command.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Command](#Command) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);\n    }\n    Command.is = is;\n})(Command || (Command = {}));\n/**\n * The TextEdit namespace provides helper function to create replace,\n * insert and delete edits more easily.\n */\nexport var TextEdit;\n(function (TextEdit) {\n    /**\n     * Creates a replace text edit.\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     */\n    function replace(range, newText) {\n        return { range: range, newText: newText };\n    }\n    TextEdit.replace = replace;\n    /**\n     * Creates a insert text edit.\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     */\n    function insert(position, newText) {\n        return { range: { start: position, end: position }, newText: newText };\n    }\n    TextEdit.insert = insert;\n    /**\n     * Creates a delete text edit.\n     * @param range The range of text to be deleted.\n     */\n    function del(range) {\n        return { range: range, newText: '' };\n    }\n    TextEdit.del = del;\n    function is(value) {\n        var candidate = value;\n        return Is.objectLiteral(candidate)\n            && Is.string(candidate.newText)\n            && Range.is(candidate.range);\n    }\n    TextEdit.is = is;\n})(TextEdit || (TextEdit = {}));\n/**\n * The TextDocumentEdit namespace provides helper function to create\n * an edit that manipulates a text document.\n */\nexport var TextDocumentEdit;\n(function (TextDocumentEdit) {\n    /**\n     * Creates a new `TextDocumentEdit`\n     */\n    function create(textDocument, edits) {\n        return { textDocument: textDocument, edits: edits };\n    }\n    TextDocumentEdit.create = create;\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate)\n            && VersionedTextDocumentIdentifier.is(candidate.textDocument)\n            && Array.isArray(candidate.edits);\n    }\n    TextDocumentEdit.is = is;\n})(TextDocumentEdit || (TextDocumentEdit = {}));\nexport var WorkspaceEdit;\n(function (WorkspaceEdit) {\n    function is(value) {\n        var candidate = value;\n        return candidate &&\n            (candidate.changes !== void 0 || candidate.documentChanges !== void 0) &&\n            (candidate.documentChanges === void 0 || Is.typedArray(candidate.documentChanges, TextDocumentEdit.is));\n    }\n    WorkspaceEdit.is = is;\n})(WorkspaceEdit || (WorkspaceEdit = {}));\nvar TextEditChangeImpl = /** @class */ (function () {\n    function TextEditChangeImpl(edits) {\n        this.edits = edits;\n    }\n    TextEditChangeImpl.prototype.insert = function (position, newText) {\n        this.edits.push(TextEdit.insert(position, newText));\n    };\n    TextEditChangeImpl.prototype.replace = function (range, newText) {\n        this.edits.push(TextEdit.replace(range, newText));\n    };\n    TextEditChangeImpl.prototype.delete = function (range) {\n        this.edits.push(TextEdit.del(range));\n    };\n    TextEditChangeImpl.prototype.add = function (edit) {\n        this.edits.push(edit);\n    };\n    TextEditChangeImpl.prototype.all = function () {\n        return this.edits;\n    };\n    TextEditChangeImpl.prototype.clear = function () {\n        this.edits.splice(0, this.edits.length);\n    };\n    return TextEditChangeImpl;\n}());\n/**\n * A workspace change helps constructing changes to a workspace.\n */\nvar WorkspaceChange = /** @class */ (function () {\n    function WorkspaceChange(workspaceEdit) {\n        var _this = this;\n        this._textEditChanges = Object.create(null);\n        if (workspaceEdit) {\n            this._workspaceEdit = workspaceEdit;\n            if (workspaceEdit.documentChanges) {\n                workspaceEdit.documentChanges.forEach(function (textDocumentEdit) {\n                    var textEditChange = new TextEditChangeImpl(textDocumentEdit.edits);\n                    _this._textEditChanges[textDocumentEdit.textDocument.uri] = textEditChange;\n                });\n            }\n            else if (workspaceEdit.changes) {\n                Object.keys(workspaceEdit.changes).forEach(function (key) {\n                    var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\n                    _this._textEditChanges[key] = textEditChange;\n                });\n            }\n        }\n    }\n    Object.defineProperty(WorkspaceChange.prototype, \"edit\", {\n        /**\n         * Returns the underlying [WorkspaceEdit](#WorkspaceEdit) literal\n         * use to be returned from a workspace edit operation like rename.\n         */\n        get: function () {\n            return this._workspaceEdit;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WorkspaceChange.prototype.getTextEditChange = function (key) {\n        if (VersionedTextDocumentIdentifier.is(key)) {\n            if (!this._workspaceEdit) {\n                this._workspaceEdit = {\n                    documentChanges: []\n                };\n            }\n            if (!this._workspaceEdit.documentChanges) {\n                throw new Error('Workspace edit is not configured for versioned document changes.');\n            }\n            var textDocument = key;\n            var result = this._textEditChanges[textDocument.uri];\n            if (!result) {\n                var edits = [];\n                var textDocumentEdit = {\n                    textDocument: textDocument,\n                    edits: edits\n                };\n                this._workspaceEdit.documentChanges.push(textDocumentEdit);\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[textDocument.uri] = result;\n            }\n            return result;\n        }\n        else {\n            if (!this._workspaceEdit) {\n                this._workspaceEdit = {\n                    changes: Object.create(null)\n                };\n            }\n            if (!this._workspaceEdit.changes) {\n                throw new Error('Workspace edit is not configured for normal text edit changes.');\n            }\n            var result = this._textEditChanges[key];\n            if (!result) {\n                var edits = [];\n                this._workspaceEdit.changes[key] = edits;\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[key] = result;\n            }\n            return result;\n        }\n    };\n    return WorkspaceChange;\n}());\nexport { WorkspaceChange };\n/**\n * The TextDocumentIdentifier namespace provides helper functions to work with\n * [TextDocumentIdentifier](#TextDocumentIdentifier) literals.\n */\nexport var TextDocumentIdentifier;\n(function (TextDocumentIdentifier) {\n    /**\n     * Creates a new TextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     */\n    function create(uri) {\n        return { uri: uri };\n    }\n    TextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the [TextDocumentIdentifier](#TextDocumentIdentifier) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri);\n    }\n    TextDocumentIdentifier.is = is;\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\n/**\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\n * [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) literals.\n */\nexport var VersionedTextDocumentIdentifier;\n(function (VersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new VersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param uri The document's text.\n     */\n    function create(uri, version) {\n        return { uri: uri, version: version };\n    }\n    VersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.number(candidate.version);\n    }\n    VersionedTextDocumentIdentifier.is = is;\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\n/**\n * The TextDocumentItem namespace provides helper functions to work with\n * [TextDocumentItem](#TextDocumentItem) literals.\n */\nexport var TextDocumentItem;\n(function (TextDocumentItem) {\n    /**\n     * Creates a new TextDocumentItem literal.\n     * @param uri The document's uri.\n     * @param languageId The document's language identifier.\n     * @param version The document's version number.\n     * @param text The document's text.\n     */\n    function create(uri, languageId, version, text) {\n        return { uri: uri, languageId: languageId, version: version, text: text };\n    }\n    TextDocumentItem.create = create;\n    /**\n     * Checks whether the given literal conforms to the [TextDocumentItem](#TextDocumentItem) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.number(candidate.version) && Is.string(candidate.text);\n    }\n    TextDocumentItem.is = is;\n})(TextDocumentItem || (TextDocumentItem = {}));\n/**\n * Describes the content type that a client supports in various\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n *\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\n * are reserved for internal usage.\n */\nexport var MarkupKind;\n(function (MarkupKind) {\n    /**\n     * Plain text is supported as a content format\n     */\n    MarkupKind.PlainText = 'plaintext';\n    /**\n     * Markdown is supported as a content format\n     */\n    MarkupKind.Markdown = 'markdown';\n})(MarkupKind || (MarkupKind = {}));\n(function (MarkupKind) {\n    /**\n     * Checks whether the given value is a value of the [MarkupKind](#MarkupKind) type.\n     */\n    function is(value) {\n        var candidate = value;\n        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;\n    }\n    MarkupKind.is = is;\n})(MarkupKind || (MarkupKind = {}));\nexport var MarkupContent;\n(function (MarkupContent) {\n    /**\n     * Checks whether the given value conforms to the [MarkupContent](#MarkupContent) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);\n    }\n    MarkupContent.is = is;\n})(MarkupContent || (MarkupContent = {}));\n/**\n * The kind of a completion entry.\n */\nexport var CompletionItemKind;\n(function (CompletionItemKind) {\n    CompletionItemKind.Text = 1;\n    CompletionItemKind.Method = 2;\n    CompletionItemKind.Function = 3;\n    CompletionItemKind.Constructor = 4;\n    CompletionItemKind.Field = 5;\n    CompletionItemKind.Variable = 6;\n    CompletionItemKind.Class = 7;\n    CompletionItemKind.Interface = 8;\n    CompletionItemKind.Module = 9;\n    CompletionItemKind.Property = 10;\n    CompletionItemKind.Unit = 11;\n    CompletionItemKind.Value = 12;\n    CompletionItemKind.Enum = 13;\n    CompletionItemKind.Keyword = 14;\n    CompletionItemKind.Snippet = 15;\n    CompletionItemKind.Color = 16;\n    CompletionItemKind.File = 17;\n    CompletionItemKind.Reference = 18;\n    CompletionItemKind.Folder = 19;\n    CompletionItemKind.EnumMember = 20;\n    CompletionItemKind.Constant = 21;\n    CompletionItemKind.Struct = 22;\n    CompletionItemKind.Event = 23;\n    CompletionItemKind.Operator = 24;\n    CompletionItemKind.TypeParameter = 25;\n})(CompletionItemKind || (CompletionItemKind = {}));\n/**\n * Defines whether the insert text in a completion item should be interpreted as\n * plain text or a snippet.\n */\nexport var InsertTextFormat;\n(function (InsertTextFormat) {\n    /**\n     * The primary text to be inserted is treated as a plain string.\n     */\n    InsertTextFormat.PlainText = 1;\n    /**\n     * The primary text to be inserted is treated as a snippet.\n     *\n     * A snippet can define tab stops and placeholders with `$1`, `$2`\n     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\n     * the end of the snippet. Placeholders with equal identifiers are linked,\n     * that is typing in one will update others too.\n     *\n     * See also: https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/snippet/common/snippet.md\n     */\n    InsertTextFormat.Snippet = 2;\n})(InsertTextFormat || (InsertTextFormat = {}));\n/**\n * The CompletionItem namespace provides functions to deal with\n * completion items.\n */\nexport var CompletionItem;\n(function (CompletionItem) {\n    /**\n     * Create a completion item and seed it with a label.\n     * @param label The completion item's label\n     */\n    function create(label) {\n        return { label: label };\n    }\n    CompletionItem.create = create;\n})(CompletionItem || (CompletionItem = {}));\n/**\n * The CompletionList namespace provides functions to deal with\n * completion lists.\n */\nexport var CompletionList;\n(function (CompletionList) {\n    /**\n     * Creates a new completion list.\n     *\n     * @param items The completion items.\n     * @param isIncomplete The list is not complete.\n     */\n    function create(items, isIncomplete) {\n        return { items: items ? items : [], isIncomplete: !!isIncomplete };\n    }\n    CompletionList.create = create;\n})(CompletionList || (CompletionList = {}));\nexport var MarkedString;\n(function (MarkedString) {\n    /**\n     * Creates a marked string from plain text.\n     *\n     * @param plainText The plain text.\n     */\n    function fromPlainText(plainText) {\n        return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, \"\\\\$&\"); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n    }\n    MarkedString.fromPlainText = fromPlainText;\n    /**\n     * Checks whether the given value conforms to the [MarkedString](#MarkedString) type.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));\n    }\n    MarkedString.is = is;\n})(MarkedString || (MarkedString = {}));\nexport var Hover;\n(function (Hover) {\n    /**\n     * Checks whether the given value conforms to the [Hover](#Hover) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||\n            MarkedString.is(candidate.contents) ||\n            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === void 0 || Range.is(value.range));\n    }\n    Hover.is = is;\n})(Hover || (Hover = {}));\n/**\n * The ParameterInformation namespace provides helper functions to work with\n * [ParameterInformation](#ParameterInformation) literals.\n */\nexport var ParameterInformation;\n(function (ParameterInformation) {\n    /**\n     * Creates a new parameter information literal.\n     *\n     * @param label A label string.\n     * @param documentation A doc string.\n     */\n    function create(label, documentation) {\n        return documentation ? { label: label, documentation: documentation } : { label: label };\n    }\n    ParameterInformation.create = create;\n    ;\n})(ParameterInformation || (ParameterInformation = {}));\n/**\n * The SignatureInformation namespace provides helper functions to work with\n * [SignatureInformation](#SignatureInformation) literals.\n */\nexport var SignatureInformation;\n(function (SignatureInformation) {\n    function create(label, documentation) {\n        var parameters = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            parameters[_i - 2] = arguments[_i];\n        }\n        var result = { label: label };\n        if (Is.defined(documentation)) {\n            result.documentation = documentation;\n        }\n        if (Is.defined(parameters)) {\n            result.parameters = parameters;\n        }\n        else {\n            result.parameters = [];\n        }\n        return result;\n    }\n    SignatureInformation.create = create;\n})(SignatureInformation || (SignatureInformation = {}));\n/**\n * A document highlight kind.\n */\nexport var DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrence.\n     */\n    DocumentHighlightKind.Text = 1;\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind.Read = 2;\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind.Write = 3;\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * DocumentHighlight namespace to provide helper functions to work with\n * [DocumentHighlight](#DocumentHighlight) literals.\n */\nexport var DocumentHighlight;\n(function (DocumentHighlight) {\n    /**\n     * Create a DocumentHighlight object.\n     * @param range The range the highlight applies to.\n     */\n    function create(range, kind) {\n        var result = { range: range };\n        if (Is.number(kind)) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    DocumentHighlight.create = create;\n})(DocumentHighlight || (DocumentHighlight = {}));\n/**\n * A symbol kind.\n */\nexport var SymbolKind;\n(function (SymbolKind) {\n    SymbolKind.File = 1;\n    SymbolKind.Module = 2;\n    SymbolKind.Namespace = 3;\n    SymbolKind.Package = 4;\n    SymbolKind.Class = 5;\n    SymbolKind.Method = 6;\n    SymbolKind.Property = 7;\n    SymbolKind.Field = 8;\n    SymbolKind.Constructor = 9;\n    SymbolKind.Enum = 10;\n    SymbolKind.Interface = 11;\n    SymbolKind.Function = 12;\n    SymbolKind.Variable = 13;\n    SymbolKind.Constant = 14;\n    SymbolKind.String = 15;\n    SymbolKind.Number = 16;\n    SymbolKind.Boolean = 17;\n    SymbolKind.Array = 18;\n    SymbolKind.Object = 19;\n    SymbolKind.Key = 20;\n    SymbolKind.Null = 21;\n    SymbolKind.EnumMember = 22;\n    SymbolKind.Struct = 23;\n    SymbolKind.Event = 24;\n    SymbolKind.Operator = 25;\n    SymbolKind.TypeParameter = 26;\n})(SymbolKind || (SymbolKind = {}));\nexport var SymbolInformation;\n(function (SymbolInformation) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the location of the symbol.\n     * @param uri The resource of the location of symbol, defaults to the current document.\n     * @param containerName The name of the symbol containing the symbol.\n     */\n    function create(name, kind, range, uri, containerName) {\n        var result = {\n            name: name,\n            kind: kind,\n            location: { uri: uri, range: range }\n        };\n        if (containerName) {\n            result.containerName = containerName;\n        }\n        return result;\n    }\n    SymbolInformation.create = create;\n})(SymbolInformation || (SymbolInformation = {}));\n/**\n * Represents programming constructs like variables, classes, interfaces etc.\n * that appear in a document. Document symbols can be hierarchical and they\n * have two ranges: one that encloses its definition and one that points to\n * its most interesting range, e.g. the range of an identifier.\n */\nvar DocumentSymbol = /** @class */ (function () {\n    function DocumentSymbol() {\n    }\n    return DocumentSymbol;\n}());\nexport { DocumentSymbol };\n(function (DocumentSymbol) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param detail The detail of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the symbol.\n     * @param selectionRange The selectionRange of the symbol.\n     * @param children Children of the symbol.\n     */\n    function create(name, detail, kind, range, selectionRange, children) {\n        var result = {\n            name: name,\n            detail: detail,\n            kind: kind,\n            range: range,\n            selectionRange: selectionRange\n        };\n        if (children !== void 0) {\n            result.children = children;\n        }\n        return result;\n    }\n    DocumentSymbol.create = create;\n    /**\n     * Checks whether the given literal conforms to the [DocumentSymbol](#DocumentSymbol) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return candidate &&\n            Is.string(candidate.name) && Is.number(candidate.kind) &&\n            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&\n            (candidate.detail === void 0 || Is.string(candidate.detail)) &&\n            (candidate.deprecated === void 0 || Is.boolean(candidate.deprecated)) &&\n            (candidate.children === void 0 || Array.isArray(candidate.children));\n    }\n    DocumentSymbol.is = is;\n})(DocumentSymbol || (DocumentSymbol = {}));\n/**\n * A set of predefined code action kinds\n */\nexport var CodeActionKind;\n(function (CodeActionKind) {\n    /**\n     * Base kind for quickfix actions: 'quickfix'\n     */\n    CodeActionKind.QuickFix = 'quickfix';\n    /**\n     * Base kind for refactoring actions: 'refactor'\n     */\n    CodeActionKind.Refactor = 'refactor';\n    /**\n     * Base kind for refactoring extraction actions: 'refactor.extract'\n     *\n     * Example extract actions:\n     *\n     * - Extract method\n     * - Extract function\n     * - Extract variable\n     * - Extract interface from class\n     * - ...\n     */\n    CodeActionKind.RefactorExtract = 'refactor.extract';\n    /**\n     * Base kind for refactoring inline actions: 'refactor.inline'\n     *\n     * Example inline actions:\n     *\n     * - Inline function\n     * - Inline variable\n     * - Inline constant\n     * - ...\n     */\n    CodeActionKind.RefactorInline = 'refactor.inline';\n    /**\n     * Base kind for refactoring rewrite actions: 'refactor.rewrite'\n     *\n     * Example rewrite actions:\n     *\n     * - Convert JavaScript function to class\n     * - Add or remove parameter\n     * - Encapsulate field\n     * - Make method static\n     * - Move method to base class\n     * - ...\n     */\n    CodeActionKind.RefactorRewrite = 'refactor.rewrite';\n    /**\n     * Base kind for source actions: `source`\n     *\n     * Source code actions apply to the entire file.\n     */\n    CodeActionKind.Source = 'source';\n    /**\n     * Base kind for an organize imports source action: `source.organizeImports`\n     */\n    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';\n})(CodeActionKind || (CodeActionKind = {}));\n/**\n * The CodeActionContext namespace provides helper functions to work with\n * [CodeActionContext](#CodeActionContext) literals.\n */\nexport var CodeActionContext;\n(function (CodeActionContext) {\n    /**\n     * Creates a new CodeActionContext literal.\n     */\n    function create(diagnostics, only) {\n        var result = { diagnostics: diagnostics };\n        if (only !== void 0 && only !== null) {\n            result.only = only;\n        }\n        return result;\n    }\n    CodeActionContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the [CodeActionContext](#CodeActionContext) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is) && (candidate.only === void 0 || Is.typedArray(candidate.only, Is.string));\n    }\n    CodeActionContext.is = is;\n})(CodeActionContext || (CodeActionContext = {}));\nexport var CodeAction;\n(function (CodeAction) {\n    function create(title, commandOrEdit, kind) {\n        var result = { title: title };\n        if (Command.is(commandOrEdit)) {\n            result.command = commandOrEdit;\n        }\n        else {\n            result.edit = commandOrEdit;\n        }\n        if (kind !== void null) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    CodeAction.create = create;\n    function is(value) {\n        var candidate = value;\n        return candidate && Is.string(candidate.title) &&\n            (candidate.diagnostics === void 0 || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&\n            (candidate.kind === void 0 || Is.string(candidate.kind)) &&\n            (candidate.edit !== void 0 || candidate.command !== void 0) &&\n            (candidate.command === void 0 || Command.is(candidate.command)) &&\n            (candidate.edit === void 0 || WorkspaceEdit.is(candidate.edit));\n    }\n    CodeAction.is = is;\n})(CodeAction || (CodeAction = {}));\n/**\n * The CodeLens namespace provides helper functions to work with\n * [CodeLens](#CodeLens) literals.\n */\nexport var CodeLens;\n(function (CodeLens) {\n    /**\n     * Creates a new CodeLens literal.\n     */\n    function create(range, data) {\n        var result = { range: range };\n        if (Is.defined(data))\n            result.data = data;\n        return result;\n    }\n    CodeLens.create = create;\n    /**\n     * Checks whether the given literal conforms to the [CodeLens](#CodeLens) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\n    }\n    CodeLens.is = is;\n})(CodeLens || (CodeLens = {}));\n/**\n * The FormattingOptions namespace provides helper functions to work with\n * [FormattingOptions](#FormattingOptions) literals.\n */\nexport var FormattingOptions;\n(function (FormattingOptions) {\n    /**\n     * Creates a new FormattingOptions literal.\n     */\n    function create(tabSize, insertSpaces) {\n        return { tabSize: tabSize, insertSpaces: insertSpaces };\n    }\n    FormattingOptions.create = create;\n    /**\n     * Checks whether the given literal conforms to the [FormattingOptions](#FormattingOptions) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.number(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\n    }\n    FormattingOptions.is = is;\n})(FormattingOptions || (FormattingOptions = {}));\n/**\n * A document link is a range in a text document that links to an internal or external resource, like another\n * text document or a web site.\n */\nvar DocumentLink = /** @class */ (function () {\n    function DocumentLink() {\n    }\n    return DocumentLink;\n}());\nexport { DocumentLink };\n/**\n * The DocumentLink namespace provides helper functions to work with\n * [DocumentLink](#DocumentLink) literals.\n */\n(function (DocumentLink) {\n    /**\n     * Creates a new DocumentLink literal.\n     */\n    function create(range, target, data) {\n        return { range: range, target: target, data: data };\n    }\n    DocumentLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the [DocumentLink](#DocumentLink) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\n    }\n    DocumentLink.is = is;\n})(DocumentLink || (DocumentLink = {}));\nexport var EOL = ['\\n', '\\r\\n', '\\r'];\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new ITextDocument literal from the given uri and content.\n     * @param uri The document's uri.\n     * @param languageId  The document's language Id.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Checks whether the given literal conforms to the [ITextDocument](#ITextDocument) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.number(candidate.lineCount)\n            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\n    }\n    TextDocument.is = is;\n    function applyEdits(document, edits) {\n        var text = document.getText();\n        var sortedEdits = mergeSort(edits, function (a, b) {\n            var diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return diff;\n        });\n        var lastModifiedOffset = text.length;\n        for (var i = sortedEdits.length - 1; i >= 0; i--) {\n            var e = sortedEdits[i];\n            var startOffset = document.offsetAt(e.range.start);\n            var endOffset = document.offsetAt(e.range.end);\n            if (endOffset <= lastModifiedOffset) {\n                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\n            }\n            else {\n                throw new Error('Ovelapping edit');\n            }\n            lastModifiedOffset = startOffset;\n        }\n        return text;\n    }\n    TextDocument.applyEdits = applyEdits;\n    function mergeSort(data, compare) {\n        if (data.length <= 1) {\n            // sorted\n            return data;\n        }\n        var p = (data.length / 2) | 0;\n        var left = data.slice(0, p);\n        var right = data.slice(p);\n        mergeSort(left, compare);\n        mergeSort(right, compare);\n        var leftIdx = 0;\n        var rightIdx = 0;\n        var i = 0;\n        while (leftIdx < left.length && rightIdx < right.length) {\n            var ret = compare(left[leftIdx], right[rightIdx]);\n            if (ret <= 0) {\n                // smaller_equal -> take left to preserve order\n                data[i++] = left[leftIdx++];\n            }\n            else {\n                // greater -> take right\n                data[i++] = right[rightIdx++];\n            }\n        }\n        while (leftIdx < left.length) {\n            data[i++] = left[leftIdx++];\n        }\n        while (rightIdx < right.length) {\n            data[i++] = right[rightIdx++];\n        }\n        return data;\n    }\n})(TextDocument || (TextDocument = {}));\n/**\n * Represents reasons why a text document is saved.\n */\nexport var TextDocumentSaveReason;\n(function (TextDocumentSaveReason) {\n    /**\n     * Manually triggered, e.g. by the user pressing save, by starting debugging,\n     * or by an API call.\n     */\n    TextDocumentSaveReason.Manual = 1;\n    /**\n     * Automatic after a delay.\n     */\n    TextDocumentSaveReason.AfterDelay = 2;\n    /**\n     * When the editor lost focus.\n     */\n    TextDocumentSaveReason.FocusOut = 3;\n})(TextDocumentSaveReason || (TextDocumentSaveReason = {}));\nvar FullTextDocument = /** @class */ (function () {\n    function FullTextDocument(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = null;\n    }\n    Object.defineProperty(FullTextDocument.prototype, \"uri\", {\n        get: function () {\n            return this._uri;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FullTextDocument.prototype, \"languageId\", {\n        get: function () {\n            return this._languageId;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FullTextDocument.prototype, \"version\", {\n        get: function () {\n            return this._version;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FullTextDocument.prototype.getText = function (range) {\n        if (range) {\n            var start = this.offsetAt(range.start);\n            var end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    };\n    FullTextDocument.prototype.update = function (event, version) {\n        this._content = event.text;\n        this._version = version;\n        this._lineOffsets = null;\n    };\n    FullTextDocument.prototype.getLineOffsets = function () {\n        if (this._lineOffsets === null) {\n            var lineOffsets = [];\n            var text = this._content;\n            var isLineStart = true;\n            for (var i = 0; i < text.length; i++) {\n                if (isLineStart) {\n                    lineOffsets.push(i);\n                    isLineStart = false;\n                }\n                var ch = text.charAt(i);\n                isLineStart = (ch === '\\r' || ch === '\\n');\n                if (ch === '\\r' && i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                    i++;\n                }\n            }\n            if (isLineStart && text.length > 0) {\n                lineOffsets.push(text.length);\n            }\n            this._lineOffsets = lineOffsets;\n        }\n        return this._lineOffsets;\n    };\n    FullTextDocument.prototype.positionAt = function (offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        var lineOffsets = this.getLineOffsets();\n        var low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return Position.create(0, offset);\n        }\n        while (low < high) {\n            var mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        var line = low - 1;\n        return Position.create(line, offset - lineOffsets[line]);\n    };\n    FullTextDocument.prototype.offsetAt = function (position) {\n        var lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        var lineOffset = lineOffsets[position.line];\n        var nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\n    };\n    Object.defineProperty(FullTextDocument.prototype, \"lineCount\", {\n        get: function () {\n            return this.getLineOffsets().length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FullTextDocument;\n}());\nvar Is;\n(function (Is) {\n    var toString = Object.prototype.toString;\n    function defined(value) {\n        return typeof value !== 'undefined';\n    }\n    Is.defined = defined;\n    function undefined(value) {\n        return typeof value === 'undefined';\n    }\n    Is.undefined = undefined;\n    function boolean(value) {\n        return value === true || value === false;\n    }\n    Is.boolean = boolean;\n    function string(value) {\n        return toString.call(value) === '[object String]';\n    }\n    Is.string = string;\n    function number(value) {\n        return toString.call(value) === '[object Number]';\n    }\n    Is.number = number;\n    function func(value) {\n        return toString.call(value) === '[object Function]';\n    }\n    Is.func = func;\n    function objectLiteral(value) {\n        // Strictly speaking class instances pass this check as well. Since the LSP\n        // doesn't use classes we ignore this for now. If we do we need to add something\n        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`\n        return value !== null && typeof value === 'object';\n    }\n    Is.objectLiteral = objectLiteral;\n    function typedArray(value, check) {\n        return Array.isArray(value) && value.every(check);\n    }\n    Is.typedArray = typedArray;\n})(Is || (Is = {}));\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nimport * as ls from './_deps/vscode-languageserver-types/main.js';\r\nvar Uri = monaco.Uri;\r\nvar Range = monaco.Range;\r\n// --- diagnostics --- ---\r\nvar DiagnosticsAdapter = /** @class */ (function () {\r\n    function DiagnosticsAdapter(_languageId, _worker, defaults) {\r\n        var _this = this;\r\n        this._languageId = _languageId;\r\n        this._worker = _worker;\r\n        this._disposables = [];\r\n        this._listener = Object.create(null);\r\n        var onModelAdd = function (model) {\r\n            var modeId = model.getModeId();\r\n            if (modeId !== _this._languageId) {\r\n                return;\r\n            }\r\n            var handle;\r\n            _this._listener[model.uri.toString()] = model.onDidChangeContent(function () {\r\n                clearTimeout(handle);\r\n                handle = setTimeout(function () { return _this._doValidate(model.uri, modeId); }, 500);\r\n            });\r\n            _this._doValidate(model.uri, modeId);\r\n        };\r\n        var onModelRemoved = function (model) {\r\n            monaco.editor.setModelMarkers(model, _this._languageId, []);\r\n            var uriStr = model.uri.toString();\r\n            var listener = _this._listener[uriStr];\r\n            if (listener) {\r\n                listener.dispose();\r\n                delete _this._listener[uriStr];\r\n            }\r\n        };\r\n        this._disposables.push(monaco.editor.onDidCreateModel(onModelAdd));\r\n        this._disposables.push(monaco.editor.onWillDisposeModel(function (model) {\r\n            onModelRemoved(model);\r\n            _this._resetSchema(model.uri);\r\n        }));\r\n        this._disposables.push(monaco.editor.onDidChangeModelLanguage(function (event) {\r\n            onModelRemoved(event.model);\r\n            onModelAdd(event.model);\r\n            _this._resetSchema(event.model.uri);\r\n        }));\r\n        this._disposables.push(defaults.onDidChange(function (_) {\r\n            monaco.editor.getModels().forEach(function (model) {\r\n                if (model.getModeId() === _this._languageId) {\r\n                    onModelRemoved(model);\r\n                    onModelAdd(model);\r\n                }\r\n            });\r\n        }));\r\n        this._disposables.push({\r\n            dispose: function () {\r\n                monaco.editor.getModels().forEach(onModelRemoved);\r\n                for (var key in _this._listener) {\r\n                    _this._listener[key].dispose();\r\n                }\r\n            }\r\n        });\r\n        monaco.editor.getModels().forEach(onModelAdd);\r\n    }\r\n    DiagnosticsAdapter.prototype.dispose = function () {\r\n        this._disposables.forEach(function (d) { return d && d.dispose(); });\r\n        this._disposables = [];\r\n    };\r\n    DiagnosticsAdapter.prototype._resetSchema = function (resource) {\r\n        this._worker().then(function (worker) {\r\n            worker.resetSchema(resource.toString());\r\n        });\r\n    };\r\n    DiagnosticsAdapter.prototype._doValidate = function (resource, languageId) {\r\n        this._worker(resource).then(function (worker) {\r\n            return worker.doValidation(resource.toString()).then(function (diagnostics) {\r\n                var markers = diagnostics.map(function (d) { return toDiagnostics(resource, d); });\r\n                var model = monaco.editor.getModel(resource);\r\n                if (model.getModeId() === languageId) {\r\n                    monaco.editor.setModelMarkers(model, languageId, markers);\r\n                }\r\n            });\r\n        }).then(undefined, function (err) {\r\n            console.error(err);\r\n        });\r\n    };\r\n    return DiagnosticsAdapter;\r\n}());\r\nexport { DiagnosticsAdapter };\r\nfunction toSeverity(lsSeverity) {\r\n    switch (lsSeverity) {\r\n        case ls.DiagnosticSeverity.Error: return monaco.MarkerSeverity.Error;\r\n        case ls.DiagnosticSeverity.Warning: return monaco.MarkerSeverity.Warning;\r\n        case ls.DiagnosticSeverity.Information: return monaco.MarkerSeverity.Info;\r\n        case ls.DiagnosticSeverity.Hint: return monaco.MarkerSeverity.Hint;\r\n        default:\r\n            return monaco.MarkerSeverity.Info;\r\n    }\r\n}\r\nfunction toDiagnostics(resource, diag) {\r\n    var code = typeof diag.code === 'number' ? String(diag.code) : diag.code;\r\n    return {\r\n        severity: toSeverity(diag.severity),\r\n        startLineNumber: diag.range.start.line + 1,\r\n        startColumn: diag.range.start.character + 1,\r\n        endLineNumber: diag.range.end.line + 1,\r\n        endColumn: diag.range.end.character + 1,\r\n        message: diag.message,\r\n        code: code,\r\n        source: diag.source\r\n    };\r\n}\r\n// --- completion ------\r\nfunction fromPosition(position) {\r\n    if (!position) {\r\n        return void 0;\r\n    }\r\n    return { character: position.column - 1, line: position.lineNumber - 1 };\r\n}\r\nfunction fromRange(range) {\r\n    if (!range) {\r\n        return void 0;\r\n    }\r\n    return { start: { line: range.startLineNumber - 1, character: range.startColumn - 1 }, end: { line: range.endLineNumber - 1, character: range.endColumn - 1 } };\r\n}\r\nfunction toRange(range) {\r\n    if (!range) {\r\n        return void 0;\r\n    }\r\n    return new Range(range.start.line + 1, range.start.character + 1, range.end.line + 1, range.end.character + 1);\r\n}\r\nfunction toCompletionItemKind(kind) {\r\n    var mItemKind = monaco.languages.CompletionItemKind;\r\n    switch (kind) {\r\n        case ls.CompletionItemKind.Text: return mItemKind.Text;\r\n        case ls.CompletionItemKind.Method: return mItemKind.Method;\r\n        case ls.CompletionItemKind.Function: return mItemKind.Function;\r\n        case ls.CompletionItemKind.Constructor: return mItemKind.Constructor;\r\n        case ls.CompletionItemKind.Field: return mItemKind.Field;\r\n        case ls.CompletionItemKind.Variable: return mItemKind.Variable;\r\n        case ls.CompletionItemKind.Class: return mItemKind.Class;\r\n        case ls.CompletionItemKind.Interface: return mItemKind.Interface;\r\n        case ls.CompletionItemKind.Module: return mItemKind.Module;\r\n        case ls.CompletionItemKind.Property: return mItemKind.Property;\r\n        case ls.CompletionItemKind.Unit: return mItemKind.Unit;\r\n        case ls.CompletionItemKind.Value: return mItemKind.Value;\r\n        case ls.CompletionItemKind.Enum: return mItemKind.Enum;\r\n        case ls.CompletionItemKind.Keyword: return mItemKind.Keyword;\r\n        case ls.CompletionItemKind.Snippet: return mItemKind.Snippet;\r\n        case ls.CompletionItemKind.Color: return mItemKind.Color;\r\n        case ls.CompletionItemKind.File: return mItemKind.File;\r\n        case ls.CompletionItemKind.Reference: return mItemKind.Reference;\r\n    }\r\n    return mItemKind.Property;\r\n}\r\nfunction fromCompletionItemKind(kind) {\r\n    var mItemKind = monaco.languages.CompletionItemKind;\r\n    switch (kind) {\r\n        case mItemKind.Text: return ls.CompletionItemKind.Text;\r\n        case mItemKind.Method: return ls.CompletionItemKind.Method;\r\n        case mItemKind.Function: return ls.CompletionItemKind.Function;\r\n        case mItemKind.Constructor: return ls.CompletionItemKind.Constructor;\r\n        case mItemKind.Field: return ls.CompletionItemKind.Field;\r\n        case mItemKind.Variable: return ls.CompletionItemKind.Variable;\r\n        case mItemKind.Class: return ls.CompletionItemKind.Class;\r\n        case mItemKind.Interface: return ls.CompletionItemKind.Interface;\r\n        case mItemKind.Module: return ls.CompletionItemKind.Module;\r\n        case mItemKind.Property: return ls.CompletionItemKind.Property;\r\n        case mItemKind.Unit: return ls.CompletionItemKind.Unit;\r\n        case mItemKind.Value: return ls.CompletionItemKind.Value;\r\n        case mItemKind.Enum: return ls.CompletionItemKind.Enum;\r\n        case mItemKind.Keyword: return ls.CompletionItemKind.Keyword;\r\n        case mItemKind.Snippet: return ls.CompletionItemKind.Snippet;\r\n        case mItemKind.Color: return ls.CompletionItemKind.Color;\r\n        case mItemKind.File: return ls.CompletionItemKind.File;\r\n        case mItemKind.Reference: return ls.CompletionItemKind.Reference;\r\n    }\r\n    return ls.CompletionItemKind.Property;\r\n}\r\nfunction toTextEdit(textEdit) {\r\n    if (!textEdit) {\r\n        return void 0;\r\n    }\r\n    return {\r\n        range: toRange(textEdit.range),\r\n        text: textEdit.newText\r\n    };\r\n}\r\nvar CompletionAdapter = /** @class */ (function () {\r\n    function CompletionAdapter(_worker) {\r\n        this._worker = _worker;\r\n    }\r\n    Object.defineProperty(CompletionAdapter.prototype, \"triggerCharacters\", {\r\n        get: function () {\r\n            return [' ', ':'];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    CompletionAdapter.prototype.provideCompletionItems = function (model, position, context, token) {\r\n        var wordInfo = model.getWordUntilPosition(position);\r\n        var resource = model.uri;\r\n        return this._worker(resource).then(function (worker) {\r\n            return worker.doComplete(resource.toString(), fromPosition(position));\r\n        }).then(function (info) {\r\n            if (!info) {\r\n                return;\r\n            }\r\n            var items = info.items.map(function (entry) {\r\n                var item = {\r\n                    label: entry.label,\r\n                    insertText: entry.insertText || entry.label,\r\n                    sortText: entry.sortText,\r\n                    filterText: entry.filterText,\r\n                    documentation: entry.documentation,\r\n                    detail: entry.detail,\r\n                    kind: toCompletionItemKind(entry.kind),\r\n                };\r\n                if (entry.textEdit) {\r\n                    item.range = toRange(entry.textEdit.range);\r\n                    item.insertText = entry.textEdit.newText;\r\n                }\r\n                if (entry.additionalTextEdits) {\r\n                    item.additionalTextEdits = entry.additionalTextEdits.map(toTextEdit);\r\n                }\r\n                if (entry.insertTextFormat === ls.InsertTextFormat.Snippet) {\r\n                    item.insertTextRules = monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet;\r\n                }\r\n                return item;\r\n            });\r\n            return {\r\n                isIncomplete: info.isIncomplete,\r\n                suggestions: items\r\n            };\r\n        });\r\n    };\r\n    return CompletionAdapter;\r\n}());\r\nexport { CompletionAdapter };\r\nfunction isMarkupContent(thing) {\r\n    return thing && typeof thing === 'object' && typeof thing.kind === 'string';\r\n}\r\nfunction toMarkdownString(entry) {\r\n    if (typeof entry === 'string') {\r\n        return {\r\n            value: entry\r\n        };\r\n    }\r\n    if (isMarkupContent(entry)) {\r\n        if (entry.kind === 'plaintext') {\r\n            return {\r\n                value: entry.value.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, '\\\\$&')\r\n            };\r\n        }\r\n        return {\r\n            value: entry.value\r\n        };\r\n    }\r\n    return { value: '```' + entry.language + '\\n' + entry.value + '\\n```\\n' };\r\n}\r\nfunction toMarkedStringArray(contents) {\r\n    if (!contents) {\r\n        return void 0;\r\n    }\r\n    if (Array.isArray(contents)) {\r\n        return contents.map(toMarkdownString);\r\n    }\r\n    return [toMarkdownString(contents)];\r\n}\r\n// --- hover ------\r\nvar HoverAdapter = /** @class */ (function () {\r\n    function HoverAdapter(_worker) {\r\n        this._worker = _worker;\r\n    }\r\n    HoverAdapter.prototype.provideHover = function (model, position, token) {\r\n        var resource = model.uri;\r\n        return this._worker(resource).then(function (worker) {\r\n            return worker.doHover(resource.toString(), fromPosition(position));\r\n        }).then(function (info) {\r\n            if (!info) {\r\n                return;\r\n            }\r\n            return {\r\n                range: toRange(info.range),\r\n                contents: toMarkedStringArray(info.contents)\r\n            };\r\n        });\r\n    };\r\n    return HoverAdapter;\r\n}());\r\nexport { HoverAdapter };\r\n// --- definition ------\r\nfunction toLocation(location) {\r\n    return {\r\n        uri: Uri.parse(location.uri),\r\n        range: toRange(location.range)\r\n    };\r\n}\r\n// --- document symbols ------\r\nfunction toSymbolKind(kind) {\r\n    var mKind = monaco.languages.SymbolKind;\r\n    switch (kind) {\r\n        case ls.SymbolKind.File: return mKind.Array;\r\n        case ls.SymbolKind.Module: return mKind.Module;\r\n        case ls.SymbolKind.Namespace: return mKind.Namespace;\r\n        case ls.SymbolKind.Package: return mKind.Package;\r\n        case ls.SymbolKind.Class: return mKind.Class;\r\n        case ls.SymbolKind.Method: return mKind.Method;\r\n        case ls.SymbolKind.Property: return mKind.Property;\r\n        case ls.SymbolKind.Field: return mKind.Field;\r\n        case ls.SymbolKind.Constructor: return mKind.Constructor;\r\n        case ls.SymbolKind.Enum: return mKind.Enum;\r\n        case ls.SymbolKind.Interface: return mKind.Interface;\r\n        case ls.SymbolKind.Function: return mKind.Function;\r\n        case ls.SymbolKind.Variable: return mKind.Variable;\r\n        case ls.SymbolKind.Constant: return mKind.Constant;\r\n        case ls.SymbolKind.String: return mKind.String;\r\n        case ls.SymbolKind.Number: return mKind.Number;\r\n        case ls.SymbolKind.Boolean: return mKind.Boolean;\r\n        case ls.SymbolKind.Array: return mKind.Array;\r\n    }\r\n    return mKind.Function;\r\n}\r\nvar DocumentSymbolAdapter = /** @class */ (function () {\r\n    function DocumentSymbolAdapter(_worker) {\r\n        this._worker = _worker;\r\n    }\r\n    DocumentSymbolAdapter.prototype.provideDocumentSymbols = function (model, token) {\r\n        var resource = model.uri;\r\n        return this._worker(resource).then(function (worker) { return worker.findDocumentSymbols(resource.toString()); }).then(function (items) {\r\n            if (!items) {\r\n                return;\r\n            }\r\n            return items.map(function (item) { return ({\r\n                name: item.name,\r\n                detail: '',\r\n                containerName: item.containerName,\r\n                kind: toSymbolKind(item.kind),\r\n                range: toRange(item.location.range),\r\n                selectionRange: toRange(item.location.range)\r\n            }); });\r\n        });\r\n    };\r\n    return DocumentSymbolAdapter;\r\n}());\r\nexport { DocumentSymbolAdapter };\r\nfunction fromFormattingOptions(options) {\r\n    return {\r\n        tabSize: options.tabSize,\r\n        insertSpaces: options.insertSpaces\r\n    };\r\n}\r\nvar DocumentFormattingEditProvider = /** @class */ (function () {\r\n    function DocumentFormattingEditProvider(_worker) {\r\n        this._worker = _worker;\r\n    }\r\n    DocumentFormattingEditProvider.prototype.provideDocumentFormattingEdits = function (model, options, token) {\r\n        var resource = model.uri;\r\n        return this._worker(resource).then(function (worker) {\r\n            return worker.format(resource.toString(), null, fromFormattingOptions(options)).then(function (edits) {\r\n                if (!edits || edits.length === 0) {\r\n                    return;\r\n                }\r\n                return edits.map(toTextEdit);\r\n            });\r\n        });\r\n    };\r\n    return DocumentFormattingEditProvider;\r\n}());\r\nexport { DocumentFormattingEditProvider };\r\nvar DocumentRangeFormattingEditProvider = /** @class */ (function () {\r\n    function DocumentRangeFormattingEditProvider(_worker) {\r\n        this._worker = _worker;\r\n    }\r\n    DocumentRangeFormattingEditProvider.prototype.provideDocumentRangeFormattingEdits = function (model, range, options, token) {\r\n        var resource = model.uri;\r\n        return this._worker(resource).then(function (worker) {\r\n            return worker.format(resource.toString(), fromRange(range), fromFormattingOptions(options)).then(function (edits) {\r\n                if (!edits || edits.length === 0) {\r\n                    return;\r\n                }\r\n                return edits.map(toTextEdit);\r\n            });\r\n        });\r\n    };\r\n    return DocumentRangeFormattingEditProvider;\r\n}());\r\nexport { DocumentRangeFormattingEditProvider };\r\nvar DocumentColorAdapter = /** @class */ (function () {\r\n    function DocumentColorAdapter(_worker) {\r\n        this._worker = _worker;\r\n    }\r\n    DocumentColorAdapter.prototype.provideDocumentColors = function (model, token) {\r\n        var resource = model.uri;\r\n        return this._worker(resource).then(function (worker) { return worker.findDocumentColors(resource.toString()); }).then(function (infos) {\r\n            if (!infos) {\r\n                return;\r\n            }\r\n            return infos.map(function (item) { return ({\r\n                color: item.color,\r\n                range: toRange(item.range)\r\n            }); });\r\n        });\r\n    };\r\n    DocumentColorAdapter.prototype.provideColorPresentations = function (model, info, token) {\r\n        var resource = model.uri;\r\n        return this._worker(resource).then(function (worker) { return worker.getColorPresentations(resource.toString(), info.color, fromRange(info.range)); }).then(function (presentations) {\r\n            if (!presentations) {\r\n                return;\r\n            }\r\n            return presentations.map(function (presentation) {\r\n                var item = {\r\n                    label: presentation.label,\r\n                };\r\n                if (presentation.textEdit) {\r\n                    item.textEdit = toTextEdit(presentation.textEdit);\r\n                }\r\n                if (presentation.additionalTextEdits) {\r\n                    item.additionalTextEdits = presentation.additionalTextEdits.map(toTextEdit);\r\n                }\r\n                return item;\r\n            });\r\n        });\r\n    };\r\n    return DocumentColorAdapter;\r\n}());\r\nexport { DocumentColorAdapter };\r\nvar FoldingRangeAdapter = /** @class */ (function () {\r\n    function FoldingRangeAdapter(_worker) {\r\n        this._worker = _worker;\r\n    }\r\n    FoldingRangeAdapter.prototype.provideFoldingRanges = function (model, context, token) {\r\n        var resource = model.uri;\r\n        return this._worker(resource).then(function (worker) { return worker.provideFoldingRanges(resource.toString(), context); }).then(function (ranges) {\r\n            if (!ranges) {\r\n                return;\r\n            }\r\n            return ranges.map(function (range) {\r\n                var result = {\r\n                    start: range.startLine + 1,\r\n                    end: range.endLine + 1\r\n                };\r\n                if (typeof range.kind !== 'undefined') {\r\n                    result.kind = toFoldingRangeKind(range.kind);\r\n                }\r\n                return result;\r\n            });\r\n        });\r\n    };\r\n    return FoldingRangeAdapter;\r\n}());\r\nexport { FoldingRangeAdapter };\r\nfunction toFoldingRangeKind(kind) {\r\n    switch (kind) {\r\n        case ls.FoldingRangeKind.Comment: return monaco.languages.FoldingRangeKind.Comment;\r\n        case ls.FoldingRangeKind.Imports: return monaco.languages.FoldingRangeKind.Imports;\r\n        case ls.FoldingRangeKind.Region: return monaco.languages.FoldingRangeKind.Region;\r\n    }\r\n    return void 0;\r\n}\r\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport function createScanner(text, ignoreTrivia) {\n    if (ignoreTrivia === void 0) { ignoreTrivia = false; }\n    var pos = 0, len = text.length, value = '', tokenOffset = 0, token = 16 /* Unknown */, scanError = 0 /* None */;\n    function scanHexDigits(count, exact) {\n        var digits = 0;\n        var value = 0;\n        while (digits < count || !exact) {\n            var ch = text.charCodeAt(pos);\n            if (ch >= 48 /* _0 */ && ch <= 57 /* _9 */) {\n                value = value * 16 + ch - 48 /* _0 */;\n            }\n            else if (ch >= 65 /* A */ && ch <= 70 /* F */) {\n                value = value * 16 + ch - 65 /* A */ + 10;\n            }\n            else if (ch >= 97 /* a */ && ch <= 102 /* f */) {\n                value = value * 16 + ch - 97 /* a */ + 10;\n            }\n            else {\n                break;\n            }\n            pos++;\n            digits++;\n        }\n        if (digits < count) {\n            value = -1;\n        }\n        return value;\n    }\n    function setPosition(newPosition) {\n        pos = newPosition;\n        value = '';\n        tokenOffset = 0;\n        token = 16 /* Unknown */;\n        scanError = 0 /* None */;\n    }\n    function scanNumber() {\n        var start = pos;\n        if (text.charCodeAt(pos) === 48 /* _0 */) {\n            pos++;\n        }\n        else {\n            pos++;\n            while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n            }\n        }\n        if (pos < text.length && text.charCodeAt(pos) === 46 /* dot */) {\n            pos++;\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n                return text.substring(start, pos);\n            }\n        }\n        var end = pos;\n        if (pos < text.length && (text.charCodeAt(pos) === 69 /* E */ || text.charCodeAt(pos) === 101 /* e */)) {\n            pos++;\n            if (pos < text.length && text.charCodeAt(pos) === 43 /* plus */ || text.charCodeAt(pos) === 45 /* minus */) {\n                pos++;\n            }\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n                end = pos;\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n            }\n        }\n        return text.substring(start, end);\n    }\n    function scanString() {\n        var result = '', start = pos;\n        while (true) {\n            if (pos >= len) {\n                result += text.substring(start, pos);\n                scanError = 2 /* UnexpectedEndOfString */;\n                break;\n            }\n            var ch = text.charCodeAt(pos);\n            if (ch === 34 /* doubleQuote */) {\n                result += text.substring(start, pos);\n                pos++;\n                break;\n            }\n            if (ch === 92 /* backslash */) {\n                result += text.substring(start, pos);\n                pos++;\n                if (pos >= len) {\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                ch = text.charCodeAt(pos++);\n                switch (ch) {\n                    case 34 /* doubleQuote */:\n                        result += '\\\"';\n                        break;\n                    case 92 /* backslash */:\n                        result += '\\\\';\n                        break;\n                    case 47 /* slash */:\n                        result += '/';\n                        break;\n                    case 98 /* b */:\n                        result += '\\b';\n                        break;\n                    case 102 /* f */:\n                        result += '\\f';\n                        break;\n                    case 110 /* n */:\n                        result += '\\n';\n                        break;\n                    case 114 /* r */:\n                        result += '\\r';\n                        break;\n                    case 116 /* t */:\n                        result += '\\t';\n                        break;\n                    case 117 /* u */:\n                        var ch_1 = scanHexDigits(4, true);\n                        if (ch_1 >= 0) {\n                            result += String.fromCharCode(ch_1);\n                        }\n                        else {\n                            scanError = 4 /* InvalidUnicode */;\n                        }\n                        break;\n                    default:\n                        scanError = 5 /* InvalidEscapeCharacter */;\n                }\n                start = pos;\n                continue;\n            }\n            if (ch >= 0 && ch <= 0x1f) {\n                if (isLineBreak(ch)) {\n                    result += text.substring(start, pos);\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                else {\n                    scanError = 6 /* InvalidCharacter */;\n                    // mark as error but continue with string\n                }\n            }\n            pos++;\n        }\n        return result;\n    }\n    function scanNext() {\n        value = '';\n        scanError = 0 /* None */;\n        tokenOffset = pos;\n        if (pos >= len) {\n            // at the end\n            tokenOffset = len;\n            return token = 17 /* EOF */;\n        }\n        var code = text.charCodeAt(pos);\n        // trivia: whitespace\n        if (isWhiteSpace(code)) {\n            do {\n                pos++;\n                value += String.fromCharCode(code);\n                code = text.charCodeAt(pos);\n            } while (isWhiteSpace(code));\n            return token = 15 /* Trivia */;\n        }\n        // trivia: newlines\n        if (isLineBreak(code)) {\n            pos++;\n            value += String.fromCharCode(code);\n            if (code === 13 /* carriageReturn */ && text.charCodeAt(pos) === 10 /* lineFeed */) {\n                pos++;\n                value += '\\n';\n            }\n            return token = 14 /* LineBreakTrivia */;\n        }\n        switch (code) {\n            // tokens: []{}:,\n            case 123 /* openBrace */:\n                pos++;\n                return token = 1 /* OpenBraceToken */;\n            case 125 /* closeBrace */:\n                pos++;\n                return token = 2 /* CloseBraceToken */;\n            case 91 /* openBracket */:\n                pos++;\n                return token = 3 /* OpenBracketToken */;\n            case 93 /* closeBracket */:\n                pos++;\n                return token = 4 /* CloseBracketToken */;\n            case 58 /* colon */:\n                pos++;\n                return token = 6 /* ColonToken */;\n            case 44 /* comma */:\n                pos++;\n                return token = 5 /* CommaToken */;\n            // strings\n            case 34 /* doubleQuote */:\n                pos++;\n                value = scanString();\n                return token = 10 /* StringLiteral */;\n            // comments\n            case 47 /* slash */:\n                var start = pos - 1;\n                // Single-line comment\n                if (text.charCodeAt(pos + 1) === 47 /* slash */) {\n                    pos += 2;\n                    while (pos < len) {\n                        if (isLineBreak(text.charCodeAt(pos))) {\n                            break;\n                        }\n                        pos++;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 12 /* LineCommentTrivia */;\n                }\n                // Multi-line comment\n                if (text.charCodeAt(pos + 1) === 42 /* asterisk */) {\n                    pos += 2;\n                    var commentClosed = false;\n                    while (pos < len) {\n                        var ch = text.charCodeAt(pos);\n                        if (ch === 42 /* asterisk */ && (pos + 1 < len) && text.charCodeAt(pos + 1) === 47 /* slash */) {\n                            pos += 2;\n                            commentClosed = true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!commentClosed) {\n                        pos++;\n                        scanError = 1 /* UnexpectedEndOfComment */;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 13 /* BlockCommentTrivia */;\n                }\n                // just a single slash\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n            // numbers\n            case 45 /* minus */:\n                value += String.fromCharCode(code);\n                pos++;\n                if (pos === len || !isDigit(text.charCodeAt(pos))) {\n                    return token = 16 /* Unknown */;\n                }\n            // found a minus, followed by a number so\n            // we fall through to proceed with scanning\n            // numbers\n            case 48 /* _0 */:\n            case 49 /* _1 */:\n            case 50 /* _2 */:\n            case 51 /* _3 */:\n            case 52 /* _4 */:\n            case 53 /* _5 */:\n            case 54 /* _6 */:\n            case 55 /* _7 */:\n            case 56 /* _8 */:\n            case 57 /* _9 */:\n                value += scanNumber();\n                return token = 11 /* NumericLiteral */;\n            // literals and unknown symbols\n            default:\n                // is a literal? Read the full word.\n                while (pos < len && isUnknownContentCharacter(code)) {\n                    pos++;\n                    code = text.charCodeAt(pos);\n                }\n                if (tokenOffset !== pos) {\n                    value = text.substring(tokenOffset, pos);\n                    // keywords: true, false, null\n                    switch (value) {\n                        case 'true': return token = 8 /* TrueKeyword */;\n                        case 'false': return token = 9 /* FalseKeyword */;\n                        case 'null': return token = 7 /* NullKeyword */;\n                    }\n                    return token = 16 /* Unknown */;\n                }\n                // some\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n        }\n    }\n    function isUnknownContentCharacter(code) {\n        if (isWhiteSpace(code) || isLineBreak(code)) {\n            return false;\n        }\n        switch (code) {\n            case 125 /* closeBrace */:\n            case 93 /* closeBracket */:\n            case 123 /* openBrace */:\n            case 91 /* openBracket */:\n            case 34 /* doubleQuote */:\n            case 58 /* colon */:\n            case 44 /* comma */:\n            case 47 /* slash */:\n                return false;\n        }\n        return true;\n    }\n    function scanNextNonTrivia() {\n        var result;\n        do {\n            result = scanNext();\n        } while (result >= 12 /* LineCommentTrivia */ && result <= 15 /* Trivia */);\n        return result;\n    }\n    return {\n        setPosition: setPosition,\n        getPosition: function () { return pos; },\n        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n        getToken: function () { return token; },\n        getTokenValue: function () { return value; },\n        getTokenOffset: function () { return tokenOffset; },\n        getTokenLength: function () { return pos - tokenOffset; },\n        getTokenError: function () { return scanError; }\n    };\n}\nfunction isWhiteSpace(ch) {\n    return ch === 32 /* space */ || ch === 9 /* tab */ || ch === 11 /* verticalTab */ || ch === 12 /* formFeed */ ||\n        ch === 160 /* nonBreakingSpace */ || ch === 5760 /* ogham */ || ch >= 8192 /* enQuad */ && ch <= 8203 /* zeroWidthSpace */ ||\n        ch === 8239 /* narrowNoBreakSpace */ || ch === 8287 /* mathematicalSpace */ || ch === 12288 /* ideographicSpace */ || ch === 65279 /* byteOrderMark */;\n}\nfunction isLineBreak(ch) {\n    return ch === 10 /* lineFeed */ || ch === 13 /* carriageReturn */ || ch === 8232 /* lineSeparator */ || ch === 8233 /* paragraphSeparator */;\n}\nfunction isDigit(ch) {\n    return ch >= 48 /* _0 */ && ch <= 57 /* _9 */;\n}\n//# sourceMappingURL=scanner.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner.js';\nexport function format(documentText, range, options) {\n    var initialIndentLevel;\n    var formatText;\n    var formatTextStart;\n    var rangeStart;\n    var rangeEnd;\n    if (range) {\n        rangeStart = range.offset;\n        rangeEnd = rangeStart + range.length;\n        formatTextStart = rangeStart;\n        while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n            formatTextStart--;\n        }\n        var endOffset = rangeEnd;\n        while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n            endOffset++;\n        }\n        formatText = documentText.substring(formatTextStart, endOffset);\n        initialIndentLevel = computeIndentLevel(formatText, options);\n    }\n    else {\n        formatText = documentText;\n        initialIndentLevel = 0;\n        formatTextStart = 0;\n        rangeStart = 0;\n        rangeEnd = documentText.length;\n    }\n    var eol = getEOL(options, documentText);\n    var lineBreak = false;\n    var indentLevel = 0;\n    var indentValue;\n    if (options.insertSpaces) {\n        indentValue = repeat(' ', options.tabSize || 4);\n    }\n    else {\n        indentValue = '\\t';\n    }\n    var scanner = createScanner(formatText, false);\n    var hasError = false;\n    function newLineAndIndent() {\n        return eol + repeat(indentValue, initialIndentLevel + indentLevel);\n    }\n    function scanNext() {\n        var token = scanner.scan();\n        lineBreak = false;\n        while (token === 15 /* Trivia */ || token === 14 /* LineBreakTrivia */) {\n            lineBreak = lineBreak || (token === 14 /* LineBreakTrivia */);\n            token = scanner.scan();\n        }\n        hasError = token === 16 /* Unknown */ || scanner.getTokenError() !== 0 /* None */;\n        return token;\n    }\n    var editOperations = [];\n    function addEdit(text, startOffset, endOffset) {\n        if (!hasError && startOffset < rangeEnd && endOffset > rangeStart && documentText.substring(startOffset, endOffset) !== text) {\n            editOperations.push({ offset: startOffset, length: endOffset - startOffset, content: text });\n        }\n    }\n    var firstToken = scanNext();\n    if (firstToken !== 17 /* EOF */) {\n        var firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n        var initialIndent = repeat(indentValue, initialIndentLevel);\n        addEdit(initialIndent, formatTextStart, firstTokenStart);\n    }\n    while (firstToken !== 17 /* EOF */) {\n        var firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n        var secondToken = scanNext();\n        var replaceContent = '';\n        while (!lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n            // comments on the same line: keep them on the same line, but ignore them otherwise\n            var commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n            addEdit(' ', firstTokenEnd, commentTokenStart);\n            firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n            replaceContent = secondToken === 12 /* LineCommentTrivia */ ? newLineAndIndent() : '';\n            secondToken = scanNext();\n        }\n        if (secondToken === 2 /* CloseBraceToken */) {\n            if (firstToken !== 1 /* OpenBraceToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else if (secondToken === 4 /* CloseBracketToken */) {\n            if (firstToken !== 3 /* OpenBracketToken */) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else {\n            switch (firstToken) {\n                case 3 /* OpenBracketToken */:\n                case 1 /* OpenBraceToken */:\n                    indentLevel++;\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 5 /* CommaToken */:\n                case 12 /* LineCommentTrivia */:\n                    replaceContent = newLineAndIndent();\n                    break;\n                case 13 /* BlockCommentTrivia */:\n                    if (lineBreak) {\n                        replaceContent = newLineAndIndent();\n                    }\n                    else {\n                        // symbol following comment on the same line: keep on same line, separate with ' '\n                        replaceContent = ' ';\n                    }\n                    break;\n                case 6 /* ColonToken */:\n                    replaceContent = ' ';\n                    break;\n                case 10 /* StringLiteral */:\n                    if (secondToken === 6 /* ColonToken */) {\n                        replaceContent = '';\n                        break;\n                    }\n                // fall through\n                case 7 /* NullKeyword */:\n                case 8 /* TrueKeyword */:\n                case 9 /* FalseKeyword */:\n                case 11 /* NumericLiteral */:\n                case 2 /* CloseBraceToken */:\n                case 4 /* CloseBracketToken */:\n                    if (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */) {\n                        replaceContent = ' ';\n                    }\n                    else if (secondToken !== 5 /* CommaToken */ && secondToken !== 17 /* EOF */) {\n                        hasError = true;\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    hasError = true;\n                    break;\n            }\n            if (lineBreak && (secondToken === 12 /* LineCommentTrivia */ || secondToken === 13 /* BlockCommentTrivia */)) {\n                replaceContent = newLineAndIndent();\n            }\n        }\n        var secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n        addEdit(replaceContent, firstTokenEnd, secondTokenStart);\n        firstToken = secondToken;\n    }\n    return editOperations;\n}\nfunction repeat(s, count) {\n    var result = '';\n    for (var i = 0; i < count; i++) {\n        result += s;\n    }\n    return result;\n}\nfunction computeIndentLevel(content, options) {\n    var i = 0;\n    var nChars = 0;\n    var tabSize = options.tabSize || 4;\n    while (i < content.length) {\n        var ch = content.charAt(i);\n        if (ch === ' ') {\n            nChars++;\n        }\n        else if (ch === '\\t') {\n            nChars += tabSize;\n        }\n        else {\n            break;\n        }\n        i++;\n    }\n    return Math.floor(nChars / tabSize);\n}\nfunction getEOL(options, text) {\n    for (var i = 0; i < text.length; i++) {\n        var ch = text.charAt(i);\n        if (ch === '\\r') {\n            if (i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                return '\\r\\n';\n            }\n            return '\\r';\n        }\n        else if (ch === '\\n') {\n            return '\\n';\n        }\n    }\n    return (options && options.eol) || '\\n';\n}\nexport function isEOL(text, offset) {\n    return '\\r\\n'.indexOf(text.charAt(offset)) !== -1;\n}\n//# sourceMappingURL=format.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner.js';\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport function getLocation(text, position) {\n    var segments = []; // strings or numbers\n    var earlyReturnException = new Object();\n    var previousNode = void 0;\n    var previousNodeInst = {\n        value: {},\n        offset: 0,\n        length: 0,\n        type: 'object',\n        parent: void 0\n    };\n    var isAtPropertyKey = false;\n    function setPreviousNode(value, offset, length, type) {\n        previousNodeInst.value = value;\n        previousNodeInst.offset = offset;\n        previousNodeInst.length = length;\n        previousNodeInst.type = type;\n        previousNodeInst.colonOffset = void 0;\n        previousNode = previousNodeInst;\n    }\n    try {\n        visit(text, {\n            onObjectBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                isAtPropertyKey = position > offset;\n                segments.push(''); // push a placeholder (will be replaced)\n            },\n            onObjectProperty: function (name, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(name, offset, length, 'property');\n                segments[segments.length - 1] = name;\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onObjectEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.pop();\n            },\n            onArrayBegin: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.push(0);\n            },\n            onArrayEnd: function (offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = void 0;\n                segments.pop();\n            },\n            onLiteralValue: function (value, offset, length) {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(value, offset, length, getLiteralNodeType(value));\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onSeparator: function (sep, offset, length) {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                if (sep === ':' && previousNode && previousNode.type === 'property') {\n                    previousNode.colonOffset = offset;\n                    isAtPropertyKey = false;\n                    previousNode = void 0;\n                }\n                else if (sep === ',') {\n                    var last = segments[segments.length - 1];\n                    if (typeof last === 'number') {\n                        segments[segments.length - 1] = last + 1;\n                    }\n                    else {\n                        isAtPropertyKey = true;\n                        segments[segments.length - 1] = '';\n                    }\n                    previousNode = void 0;\n                }\n            }\n        });\n    }\n    catch (e) {\n        if (e !== earlyReturnException) {\n            throw e;\n        }\n    }\n    return {\n        path: segments,\n        previousNode: previousNode,\n        isAtPropertyKey: isAtPropertyKey,\n        matches: function (pattern) {\n            var k = 0;\n            for (var i = 0; k < pattern.length && i < segments.length; i++) {\n                if (pattern[k] === segments[i] || pattern[k] === '*') {\n                    k++;\n                }\n                else if (pattern[k] !== '**') {\n                    return false;\n                }\n            }\n            return k === pattern.length;\n        }\n    };\n}\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nexport function parse(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    var currentProperty = null;\n    var currentParent = [];\n    var previousParents = [];\n    function onValue(value) {\n        if (Array.isArray(currentParent)) {\n            currentParent.push(value);\n        }\n        else if (currentProperty) {\n            currentParent[currentProperty] = value;\n        }\n    }\n    var visitor = {\n        onObjectBegin: function () {\n            var object = {};\n            onValue(object);\n            previousParents.push(currentParent);\n            currentParent = object;\n            currentProperty = null;\n        },\n        onObjectProperty: function (name) {\n            currentProperty = name;\n        },\n        onObjectEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onArrayBegin: function () {\n            var array = [];\n            onValue(array);\n            previousParents.push(currentParent);\n            currentParent = array;\n            currentProperty = null;\n        },\n        onArrayEnd: function () {\n            currentParent = previousParents.pop();\n        },\n        onLiteralValue: onValue,\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    return currentParent[0];\n}\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport function parseTree(text, errors, options) {\n    if (errors === void 0) { errors = []; }\n    var currentParent = { type: 'array', offset: -1, length: -1, children: [], parent: void 0 }; // artificial root\n    function ensurePropertyComplete(endOffset) {\n        if (currentParent.type === 'property') {\n            currentParent.length = endOffset - currentParent.offset;\n            currentParent = currentParent.parent;\n        }\n    }\n    function onValue(valueNode) {\n        currentParent.children.push(valueNode);\n        return valueNode;\n    }\n    var visitor = {\n        onObjectBegin: function (offset) {\n            currentParent = onValue({ type: 'object', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onObjectProperty: function (name, offset, length) {\n            currentParent = onValue({ type: 'property', offset: offset, length: -1, parent: currentParent, children: [] });\n            currentParent.children.push({ type: 'string', value: name, offset: offset, length: length, parent: currentParent });\n        },\n        onObjectEnd: function (offset, length) {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onArrayBegin: function (offset, length) {\n            currentParent = onValue({ type: 'array', offset: offset, length: -1, parent: currentParent, children: [] });\n        },\n        onArrayEnd: function (offset, length) {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onLiteralValue: function (value, offset, length) {\n            onValue({ type: getLiteralNodeType(value), offset: offset, length: length, parent: currentParent, value: value });\n            ensurePropertyComplete(offset + length);\n        },\n        onSeparator: function (sep, offset, length) {\n            if (currentParent.type === 'property') {\n                if (sep === ':') {\n                    currentParent.colonOffset = offset;\n                }\n                else if (sep === ',') {\n                    ensurePropertyComplete(offset);\n                }\n            }\n        },\n        onError: function (error, offset, length) {\n            errors.push({ error: error, offset: offset, length: length });\n        }\n    };\n    visit(text, visitor, options);\n    var result = currentParent.children[0];\n    if (result) {\n        delete result.parent;\n    }\n    return result;\n}\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport function findNodeAtLocation(root, path) {\n    if (!root) {\n        return void 0;\n    }\n    var node = root;\n    for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {\n        var segment = path_1[_i];\n        if (typeof segment === 'string') {\n            if (node.type !== 'object' || !Array.isArray(node.children)) {\n                return void 0;\n            }\n            var found = false;\n            for (var _a = 0, _b = node.children; _a < _b.length; _a++) {\n                var propertyNode = _b[_a];\n                if (Array.isArray(propertyNode.children) && propertyNode.children[0].value === segment) {\n                    node = propertyNode.children[1];\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return void 0;\n            }\n        }\n        else {\n            var index = segment;\n            if (node.type !== 'array' || index < 0 || !Array.isArray(node.children) || index >= node.children.length) {\n                return void 0;\n            }\n            node = node.children[index];\n        }\n    }\n    return node;\n}\n/**\n * Gets the JSON path of the given JSON DOM node\n */\nexport function getNodePath(node) {\n    if (!node.parent || !node.parent.children) {\n        return [];\n    }\n    var path = getNodePath(node.parent);\n    if (node.parent.type === 'property') {\n        var key = node.parent.children[0].value;\n        path.push(key);\n    }\n    else if (node.parent.type === 'array') {\n        var index = node.parent.children.indexOf(node);\n        if (index !== -1) {\n            path.push(index);\n        }\n    }\n    return path;\n}\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport function getNodeValue(node) {\n    switch (node.type) {\n        case 'array':\n            return node.children.map(getNodeValue);\n        case 'object':\n            var obj = Object.create(null);\n            for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n                var prop = _a[_i];\n                var valueNode = prop.children[1];\n                if (valueNode) {\n                    obj[prop.children[0].value] = getNodeValue(valueNode);\n                }\n            }\n            return obj;\n        case 'null':\n        case 'string':\n        case 'number':\n        case 'boolean':\n            return node.value;\n        default:\n            return void 0;\n    }\n}\nexport function contains(node, offset, includeRightBound) {\n    if (includeRightBound === void 0) { includeRightBound = false; }\n    return (offset >= node.offset && offset < (node.offset + node.length)) || includeRightBound && (offset === (node.offset + node.length));\n}\n/**\n * Finds the most inner node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.\n */\nexport function findNodeAtOffset(node, offset, includeRightBound) {\n    if (includeRightBound === void 0) { includeRightBound = false; }\n    if (contains(node, offset, includeRightBound)) {\n        var children = node.children;\n        if (Array.isArray(children)) {\n            for (var i = 0; i < children.length && children[i].offset <= offset; i++) {\n                var item = findNodeAtOffset(children[i], offset, includeRightBound);\n                if (item) {\n                    return item;\n                }\n            }\n        }\n        return node;\n    }\n    return void 0;\n}\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport function visit(text, visitor, options) {\n    var _scanner = createScanner(text, false);\n    function toNoArgVisit(visitFunction) {\n        return visitFunction ? function () { return visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength()); } : function () { return true; };\n    }\n    function toOneArgVisit(visitFunction) {\n        return visitFunction ? function (arg) { return visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength()); } : function () { return true; };\n    }\n    var onObjectBegin = toNoArgVisit(visitor.onObjectBegin), onObjectProperty = toOneArgVisit(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisit(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisit(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);\n    var disallowComments = options && options.disallowComments;\n    var allowTrailingComma = options && options.allowTrailingComma;\n    function scanNext() {\n        while (true) {\n            var token = _scanner.scan();\n            switch (_scanner.getTokenError()) {\n                case 4 /* InvalidUnicode */:\n                    handleError(14 /* InvalidUnicode */);\n                    break;\n                case 5 /* InvalidEscapeCharacter */:\n                    handleError(15 /* InvalidEscapeCharacter */);\n                    break;\n                case 3 /* UnexpectedEndOfNumber */:\n                    handleError(13 /* UnexpectedEndOfNumber */);\n                    break;\n                case 1 /* UnexpectedEndOfComment */:\n                    if (!disallowComments) {\n                        handleError(11 /* UnexpectedEndOfComment */);\n                    }\n                    break;\n                case 2 /* UnexpectedEndOfString */:\n                    handleError(12 /* UnexpectedEndOfString */);\n                    break;\n                case 6 /* InvalidCharacter */:\n                    handleError(16 /* InvalidCharacter */);\n                    break;\n            }\n            switch (token) {\n                case 12 /* LineCommentTrivia */:\n                case 13 /* BlockCommentTrivia */:\n                    if (disallowComments) {\n                        handleError(10 /* InvalidCommentToken */);\n                    }\n                    else {\n                        onComment();\n                    }\n                    break;\n                case 16 /* Unknown */:\n                    handleError(1 /* InvalidSymbol */);\n                    break;\n                case 15 /* Trivia */:\n                case 14 /* LineBreakTrivia */:\n                    break;\n                default:\n                    return token;\n            }\n        }\n    }\n    function handleError(error, skipUntilAfter, skipUntil) {\n        if (skipUntilAfter === void 0) { skipUntilAfter = []; }\n        if (skipUntil === void 0) { skipUntil = []; }\n        onError(error);\n        if (skipUntilAfter.length + skipUntil.length > 0) {\n            var token = _scanner.getToken();\n            while (token !== 17 /* EOF */) {\n                if (skipUntilAfter.indexOf(token) !== -1) {\n                    scanNext();\n                    break;\n                }\n                else if (skipUntil.indexOf(token) !== -1) {\n                    break;\n                }\n                token = scanNext();\n            }\n        }\n    }\n    function parseString(isValue) {\n        var value = _scanner.getTokenValue();\n        if (isValue) {\n            onLiteralValue(value);\n        }\n        else {\n            onObjectProperty(value);\n        }\n        scanNext();\n        return true;\n    }\n    function parseLiteral() {\n        switch (_scanner.getToken()) {\n            case 11 /* NumericLiteral */:\n                var value = 0;\n                try {\n                    value = JSON.parse(_scanner.getTokenValue());\n                    if (typeof value !== 'number') {\n                        handleError(2 /* InvalidNumberFormat */);\n                        value = 0;\n                    }\n                }\n                catch (e) {\n                    handleError(2 /* InvalidNumberFormat */);\n                }\n                onLiteralValue(value);\n                break;\n            case 7 /* NullKeyword */:\n                onLiteralValue(null);\n                break;\n            case 8 /* TrueKeyword */:\n                onLiteralValue(true);\n                break;\n            case 9 /* FalseKeyword */:\n                onLiteralValue(false);\n                break;\n            default:\n                return false;\n        }\n        scanNext();\n        return true;\n    }\n    function parseProperty() {\n        if (_scanner.getToken() !== 10 /* StringLiteral */) {\n            handleError(3 /* PropertyNameExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            return false;\n        }\n        parseString(false);\n        if (_scanner.getToken() === 6 /* ColonToken */) {\n            onSeparator(':');\n            scanNext(); // consume colon\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n        }\n        else {\n            handleError(5 /* ColonExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n        }\n        return true;\n    }\n    function parseObject() {\n        onObjectBegin();\n        scanNext(); // consume open brace\n        var needsComma = false;\n        while (_scanner.getToken() !== 2 /* CloseBraceToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 2 /* CloseBraceToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseProperty()) {\n                handleError(4 /* ValueExpected */, [], [2 /* CloseBraceToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onObjectEnd();\n        if (_scanner.getToken() !== 2 /* CloseBraceToken */) {\n            handleError(7 /* CloseBraceExpected */, [2 /* CloseBraceToken */], []);\n        }\n        else {\n            scanNext(); // consume close brace\n        }\n        return true;\n    }\n    function parseArray() {\n        onArrayBegin();\n        scanNext(); // consume open bracket\n        var needsComma = false;\n        while (_scanner.getToken() !== 4 /* CloseBracketToken */ && _scanner.getToken() !== 17 /* EOF */) {\n            if (_scanner.getToken() === 5 /* CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 4 /* CloseBracketToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* CommaExpected */, [], []);\n            }\n            if (!parseValue()) {\n                handleError(4 /* ValueExpected */, [], [4 /* CloseBracketToken */, 5 /* CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onArrayEnd();\n        if (_scanner.getToken() !== 4 /* CloseBracketToken */) {\n            handleError(8 /* CloseBracketExpected */, [4 /* CloseBracketToken */], []);\n        }\n        else {\n            scanNext(); // consume close bracket\n        }\n        return true;\n    }\n    function parseValue() {\n        switch (_scanner.getToken()) {\n            case 3 /* OpenBracketToken */:\n                return parseArray();\n            case 1 /* OpenBraceToken */:\n                return parseObject();\n            case 10 /* StringLiteral */:\n                return parseString(true);\n            default:\n                return parseLiteral();\n        }\n    }\n    scanNext();\n    if (_scanner.getToken() === 17 /* EOF */) {\n        return true;\n    }\n    if (!parseValue()) {\n        handleError(4 /* ValueExpected */, [], []);\n        return false;\n    }\n    if (_scanner.getToken() !== 17 /* EOF */) {\n        handleError(9 /* EndOfFileExpected */, [], []);\n    }\n    return true;\n}\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport function stripComments(text, replaceCh) {\n    var _scanner = createScanner(text), parts = [], kind, offset = 0, pos;\n    do {\n        pos = _scanner.getPosition();\n        kind = _scanner.scan();\n        switch (kind) {\n            case 12 /* LineCommentTrivia */:\n            case 13 /* BlockCommentTrivia */:\n            case 17 /* EOF */:\n                if (offset !== pos) {\n                    parts.push(text.substring(offset, pos));\n                }\n                if (replaceCh !== void 0) {\n                    parts.push(_scanner.getTokenValue().replace(/[^\\r\\n]/g, replaceCh));\n                }\n                offset = _scanner.getPosition();\n                break;\n        }\n    } while (kind !== 17 /* EOF */);\n    return parts.join('');\n}\nfunction getLiteralNodeType(value) {\n    switch (typeof value) {\n        case 'boolean': return 'boolean';\n        case 'number': return 'number';\n        case 'string': return 'string';\n        default: return 'null';\n    }\n}\n//# sourceMappingURL=parser.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { format, isEOL } from './format.js';\nimport { parseTree, findNodeAtLocation } from './parser.js';\nexport function removeProperty(text, path, formattingOptions) {\n    return setProperty(text, path, void 0, formattingOptions);\n}\nexport function setProperty(text, originalPath, value, formattingOptions, getInsertionIndex) {\n    var path = originalPath.slice();\n    var errors = [];\n    var root = parseTree(text, errors);\n    var parent = void 0;\n    var lastSegment = void 0;\n    while (path.length > 0) {\n        lastSegment = path.pop();\n        parent = findNodeAtLocation(root, path);\n        if (parent === void 0 && value !== void 0) {\n            if (typeof lastSegment === 'string') {\n                value = (_a = {}, _a[lastSegment] = value, _a);\n            }\n            else {\n                value = [value];\n            }\n        }\n        else {\n            break;\n        }\n    }\n    if (!parent) {\n        // empty document\n        if (value === void 0) { // delete\n            throw new Error('Can not delete in empty document');\n        }\n        return withFormatting(text, { offset: root ? root.offset : 0, length: root ? root.length : 0, content: JSON.stringify(value) }, formattingOptions);\n    }\n    else if (parent.type === 'object' && typeof lastSegment === 'string' && Array.isArray(parent.children)) {\n        var existing = findNodeAtLocation(parent, [lastSegment]);\n        if (existing !== void 0) {\n            if (value === void 0) { // delete\n                if (!existing.parent) {\n                    throw new Error('Malformed AST');\n                }\n                var propertyIndex = parent.children.indexOf(existing.parent);\n                var removeBegin = void 0;\n                var removeEnd = existing.parent.offset + existing.parent.length;\n                if (propertyIndex > 0) {\n                    // remove the comma of the previous node\n                    var previous = parent.children[propertyIndex - 1];\n                    removeBegin = previous.offset + previous.length;\n                }\n                else {\n                    removeBegin = parent.offset + 1;\n                    if (parent.children.length > 1) {\n                        // remove the comma of the next node\n                        var next = parent.children[1];\n                        removeEnd = next.offset;\n                    }\n                }\n                return withFormatting(text, { offset: removeBegin, length: removeEnd - removeBegin, content: '' }, formattingOptions);\n            }\n            else {\n                // set value of existing property\n                return withFormatting(text, { offset: existing.offset, length: existing.length, content: JSON.stringify(value) }, formattingOptions);\n            }\n        }\n        else {\n            if (value === void 0) { // delete\n                return []; // property does not exist, nothing to do\n            }\n            var newProperty = JSON.stringify(lastSegment) + \": \" + JSON.stringify(value);\n            var index = getInsertionIndex ? getInsertionIndex(parent.children.map(function (p) { return p.children[0].value; })) : parent.children.length;\n            var edit = void 0;\n            if (index > 0) {\n                var previous = parent.children[index - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            else if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty + ',' };\n            }\n            return withFormatting(text, edit, formattingOptions);\n        }\n    }\n    else if (parent.type === 'array' && typeof lastSegment === 'number' && Array.isArray(parent.children)) {\n        var insertIndex = lastSegment;\n        if (insertIndex === -1) {\n            // Insert\n            var newProperty = \"\" + JSON.stringify(value);\n            var edit = void 0;\n            if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                var previous = parent.children[parent.children.length - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            return withFormatting(text, edit, formattingOptions);\n        }\n        else {\n            if (value === void 0 && parent.children.length >= 0) {\n                //Removal\n                var removalIndex = lastSegment;\n                var toRemove = parent.children[removalIndex];\n                var edit = void 0;\n                if (parent.children.length === 1) {\n                    // only item\n                    edit = { offset: parent.offset + 1, length: parent.length - 2, content: '' };\n                }\n                else if (parent.children.length - 1 === removalIndex) {\n                    // last item\n                    var previous = parent.children[removalIndex - 1];\n                    var offset = previous.offset + previous.length;\n                    var parentEndOffset = parent.offset + parent.length;\n                    edit = { offset: offset, length: parentEndOffset - 2 - offset, content: '' };\n                }\n                else {\n                    edit = { offset: toRemove.offset, length: parent.children[removalIndex + 1].offset - toRemove.offset, content: '' };\n                }\n                return withFormatting(text, edit, formattingOptions);\n            }\n            else {\n                throw new Error('Array modification not supported yet');\n            }\n        }\n    }\n    else {\n        throw new Error(\"Can not add \" + (typeof lastSegment !== 'number' ? 'index' : 'property') + \" to parent of type \" + parent.type);\n    }\n    var _a;\n}\nfunction withFormatting(text, edit, formattingOptions) {\n    // apply the edit\n    var newText = applyEdit(text, edit);\n    // format the new text\n    var begin = edit.offset;\n    var end = edit.offset + edit.content.length;\n    if (edit.length === 0 || edit.content.length === 0) { // insert or remove\n        while (begin > 0 && !isEOL(newText, begin - 1)) {\n            begin--;\n        }\n        while (end < newText.length && !isEOL(newText, end)) {\n            end++;\n        }\n    }\n    var edits = format(newText, { offset: begin, length: end - begin }, formattingOptions);\n    // apply the formatting edits and track the begin and end offsets of the changes\n    for (var i = edits.length - 1; i >= 0; i--) {\n        var edit_1 = edits[i];\n        newText = applyEdit(newText, edit_1);\n        begin = Math.min(begin, edit_1.offset);\n        end = Math.max(end, edit_1.offset + edit_1.length);\n        end += edit_1.content.length - edit_1.length;\n    }\n    // create a single edit with all changes\n    var editLength = text.length - (newText.length - end) - begin;\n    return [{ offset: begin, length: editLength, content: newText.substring(begin, end) }];\n}\nexport function applyEdit(text, edit) {\n    return text.substring(0, edit.offset) + edit.content + text.substring(edit.offset + edit.length);\n}\nexport function isWS(text, offset) {\n    return '\\r\\n \\t'.indexOf(text.charAt(offset)) !== -1;\n}\n//# sourceMappingURL=edit.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as formatter from './impl/format.js';\nimport * as edit from './impl/edit.js';\nimport * as scanner from './impl/scanner.js';\nimport * as parser from './impl/parser.js';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport var createScanner = scanner.createScanner;\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport var getLocation = parser.getLocation;\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nexport var parse = parser.parse;\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport var parseTree = parser.parseTree;\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport var findNodeAtLocation = parser.findNodeAtLocation;\n/**\n * Finds the most inner node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.\n */\nexport var findNodeAtOffset = parser.findNodeAtOffset;\n/**\n * Gets the JSON path of the given JSON DOM node\n */\nexport var getNodePath = parser.getNodePath;\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport var getNodeValue = parser.getNodeValue;\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport var visit = parser.visit;\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport var stripComments = parser.stripComments;\n/**\n * Computes the edits needed to format a JSON document.\n *\n * @param documentText The input text\n * @param range The range to format or `undefined` to format the full content\n * @param options The formatting options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nexport function format(documentText, range, options) {\n    return formatter.format(documentText, range, options);\n}\n/**\n * Computes the edits needed to modify a value in the JSON document.\n *\n * @param documentText The input text\n * @param path The path of the value to change. The path represents either to the document root, a property or an array item.\n * If the path points to an non-existing property or item, it will be created.\n * @param value The new value for the specified property or item. If the value is undefined,\n * the property or item will be removed.\n * @param options Options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nexport function modify(text, path, value, options) {\n    return edit.setProperty(text, path, value, options.formattingOptions, options.getInsertionIndex);\n}\n/**\n * Applies edits to a input string.\n */\nexport function applyEdits(text, edits) {\n    for (var i = edits.length - 1; i >= 0; i--) {\n        text = edit.applyEdit(text, edits[i]);\n    }\n    return text;\n}\n//# sourceMappingURL=main.js.map","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nimport * as json from './_deps/jsonc-parser/main.js';\r\nexport function createTokenizationSupport(supportComments) {\r\n    return {\r\n        getInitialState: function () { return new JSONState(null, null, false); },\r\n        tokenize: function (line, state, offsetDelta, stopAtOffset) { return tokenize(supportComments, line, state, offsetDelta, stopAtOffset); }\r\n    };\r\n}\r\nexport var TOKEN_DELIM_OBJECT = 'delimiter.bracket.json';\r\nexport var TOKEN_DELIM_ARRAY = 'delimiter.array.json';\r\nexport var TOKEN_DELIM_COLON = 'delimiter.colon.json';\r\nexport var TOKEN_DELIM_COMMA = 'delimiter.comma.json';\r\nexport var TOKEN_VALUE_BOOLEAN = 'keyword.json';\r\nexport var TOKEN_VALUE_NULL = 'keyword.json';\r\nexport var TOKEN_VALUE_STRING = 'string.value.json';\r\nexport var TOKEN_VALUE_NUMBER = 'number.json';\r\nexport var TOKEN_PROPERTY_NAME = 'string.key.json';\r\nexport var TOKEN_COMMENT_BLOCK = 'comment.block.json';\r\nexport var TOKEN_COMMENT_LINE = 'comment.line.json';\r\nvar JSONState = /** @class */ (function () {\r\n    function JSONState(state, scanError, lastWasColon) {\r\n        this._state = state;\r\n        this.scanError = scanError;\r\n        this.lastWasColon = lastWasColon;\r\n    }\r\n    JSONState.prototype.clone = function () {\r\n        return new JSONState(this._state, this.scanError, this.lastWasColon);\r\n    };\r\n    JSONState.prototype.equals = function (other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        if (!other || !(other instanceof JSONState)) {\r\n            return false;\r\n        }\r\n        return this.scanError === other.scanError &&\r\n            this.lastWasColon === other.lastWasColon;\r\n    };\r\n    JSONState.prototype.getStateData = function () {\r\n        return this._state;\r\n    };\r\n    JSONState.prototype.setStateData = function (state) {\r\n        this._state = state;\r\n    };\r\n    return JSONState;\r\n}());\r\nfunction tokenize(comments, line, state, offsetDelta, stopAtOffset) {\r\n    if (offsetDelta === void 0) { offsetDelta = 0; }\r\n    // handle multiline strings and block comments\r\n    var numberOfInsertedCharacters = 0, adjustOffset = false;\r\n    switch (state.scanError) {\r\n        case 2 /* UnexpectedEndOfString */:\r\n            line = '\"' + line;\r\n            numberOfInsertedCharacters = 1;\r\n            break;\r\n        case 1 /* UnexpectedEndOfComment */:\r\n            line = '/*' + line;\r\n            numberOfInsertedCharacters = 2;\r\n            break;\r\n    }\r\n    var scanner = json.createScanner(line), kind, ret, lastWasColon = state.lastWasColon;\r\n    ret = {\r\n        tokens: [],\r\n        endState: state.clone()\r\n    };\r\n    while (true) {\r\n        var offset = offsetDelta + scanner.getPosition(), type = '';\r\n        kind = scanner.scan();\r\n        if (kind === 17 /* EOF */) {\r\n            break;\r\n        }\r\n        // Check that the scanner has advanced\r\n        if (offset === offsetDelta + scanner.getPosition()) {\r\n            throw new Error('Scanner did not advance, next 3 characters are: ' + line.substr(scanner.getPosition(), 3));\r\n        }\r\n        // In case we inserted /* or \" character, we need to\r\n        // adjust the offset of all tokens (except the first)\r\n        if (adjustOffset) {\r\n            offset -= numberOfInsertedCharacters;\r\n        }\r\n        adjustOffset = numberOfInsertedCharacters > 0;\r\n        // brackets and type\r\n        switch (kind) {\r\n            case 1 /* OpenBraceToken */:\r\n                type = TOKEN_DELIM_OBJECT;\r\n                lastWasColon = false;\r\n                break;\r\n            case 2 /* CloseBraceToken */:\r\n                type = TOKEN_DELIM_OBJECT;\r\n                lastWasColon = false;\r\n                break;\r\n            case 3 /* OpenBracketToken */:\r\n                type = TOKEN_DELIM_ARRAY;\r\n                lastWasColon = false;\r\n                break;\r\n            case 4 /* CloseBracketToken */:\r\n                type = TOKEN_DELIM_ARRAY;\r\n                lastWasColon = false;\r\n                break;\r\n            case 6 /* ColonToken */:\r\n                type = TOKEN_DELIM_COLON;\r\n                lastWasColon = true;\r\n                break;\r\n            case 5 /* CommaToken */:\r\n                type = TOKEN_DELIM_COMMA;\r\n                lastWasColon = false;\r\n                break;\r\n            case 8 /* TrueKeyword */:\r\n            case 9 /* FalseKeyword */:\r\n                type = TOKEN_VALUE_BOOLEAN;\r\n                lastWasColon = false;\r\n                break;\r\n            case 7 /* NullKeyword */:\r\n                type = TOKEN_VALUE_NULL;\r\n                lastWasColon = false;\r\n                break;\r\n            case 10 /* StringLiteral */:\r\n                type = lastWasColon ? TOKEN_VALUE_STRING : TOKEN_PROPERTY_NAME;\r\n                lastWasColon = false;\r\n                break;\r\n            case 11 /* NumericLiteral */:\r\n                type = TOKEN_VALUE_NUMBER;\r\n                lastWasColon = false;\r\n                break;\r\n        }\r\n        // comments, iff enabled\r\n        if (comments) {\r\n            switch (kind) {\r\n                case 12 /* LineCommentTrivia */:\r\n                    type = TOKEN_COMMENT_LINE;\r\n                    break;\r\n                case 13 /* BlockCommentTrivia */:\r\n                    type = TOKEN_COMMENT_BLOCK;\r\n                    break;\r\n            }\r\n        }\r\n        ret.endState = new JSONState(state.getStateData(), scanner.getTokenError(), lastWasColon);\r\n        ret.tokens.push({\r\n            startIndex: offset,\r\n            scopes: type\r\n        });\r\n    }\r\n    return ret;\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nimport { WorkerManager } from './workerManager.js';\r\nimport * as languageFeatures from './languageFeatures.js';\r\nimport { createTokenizationSupport } from './tokenization.js';\r\nexport function setupMode(defaults) {\r\n    var disposables = [];\r\n    var client = new WorkerManager(defaults);\r\n    disposables.push(client);\r\n    var worker = function () {\r\n        var uris = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            uris[_i] = arguments[_i];\r\n        }\r\n        return client.getLanguageServiceWorker.apply(client, uris);\r\n    };\r\n    var languageId = defaults.languageId;\r\n    disposables.push(monaco.languages.registerCompletionItemProvider(languageId, new languageFeatures.CompletionAdapter(worker)));\r\n    disposables.push(monaco.languages.registerHoverProvider(languageId, new languageFeatures.HoverAdapter(worker)));\r\n    disposables.push(monaco.languages.registerDocumentSymbolProvider(languageId, new languageFeatures.DocumentSymbolAdapter(worker)));\r\n    disposables.push(monaco.languages.registerDocumentFormattingEditProvider(languageId, new languageFeatures.DocumentFormattingEditProvider(worker)));\r\n    disposables.push(monaco.languages.registerDocumentRangeFormattingEditProvider(languageId, new languageFeatures.DocumentRangeFormattingEditProvider(worker)));\r\n    disposables.push(new languageFeatures.DiagnosticsAdapter(languageId, worker, defaults));\r\n    disposables.push(monaco.languages.setTokensProvider(languageId, createTokenizationSupport(true)));\r\n    disposables.push(monaco.languages.setLanguageConfiguration(languageId, richEditConfiguration));\r\n    disposables.push(monaco.languages.registerColorProvider(languageId, new languageFeatures.DocumentColorAdapter(worker)));\r\n    disposables.push(monaco.languages.registerFoldingRangeProvider(languageId, new languageFeatures.FoldingRangeAdapter(worker)));\r\n}\r\nvar richEditConfiguration = {\r\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\[\\{\\]\\}\\:\\\"\\,\\s]+)/g,\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['/*', '*/']\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}', notIn: ['string'] },\r\n        { open: '[', close: ']', notIn: ['string'] },\r\n        { open: '\"', close: '\"', notIn: ['string'] }\r\n    ]\r\n};\r\n"],"sourceRoot":""}